[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d ProManage"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-T16-2/main[image:https://travis-ci.org/CS2113-AY1819S1-T16-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-T16-2/main[image:https://coveralls.io/repos/github/CS2113-AY1819S1-T16-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* This is a desktop Project Management application designed for project-based companies. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* We provide an all-in-one platform that saves our consumersâ€™ time and money. Our customers will feel at ease communicating with one another in their project team setting."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* Managers of project team are now able to oversee their employees and overall project easily and conveniently."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* Features:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Project teams management."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Employees management."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Department management."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* Based of https://github.com/se-edu/addressbook-level4[AddressBook-Level4 project] created by the https://github.com/se-edu/[SE-EDU initiative]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jieliangang": 13,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"githubId\": \"jieliangang\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"displayName\": \"ANG...ANG\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \"authorNames\": [\"jieliangang\", \"jlang\", \"Jie Liang Ang\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"githubId\": \"fr3ddy4\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"displayName\": \"FAR...LAN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"authorNames\": [\"fr3ddy4\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"githubId\": \"Jeevz10\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"displayName\": \"JEE...HAR\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"authorNames\": [\"Jeevz10\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"githubId\": \"IcedCoffeeBoy\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"displayName\": \"LEE...ANG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"authorNames\": [\"IcedCoffeeBoy\",\"DESKTOP-T5GT484\\\\user\", \"Ming Liang\", \"Lee Ming Liang\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"githubId\": \"perrythewang\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"displayName\": \"PER...ING\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "      \"authorNames\": [\"perrythewang\", \"Perry Wang\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "IcedCoffeeBoy": 29
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    archiveName \u003d \u0027proManage.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "-": 246
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "ProManage was developed by the https://github.com/orgs/CS2113-AY1819S1-T16-2/teams/developers[T16-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lee Ming Liang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "image::icedcoffeeboy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/IcedCoffeeBoy[github]] [\u003c\u003c#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Role:** Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "**Responsibilities:** In charge of Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jie Liang Ang"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "image::jieliangang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/jieliangang[github]] [\u003c\u003c#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "**Role:** Team Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "**Responsibilities:** Integration, Scheduling and Tracking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jeevan Neralakere Somashekhar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "image::jeevz10.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/Jeevz10[github]] [\u003c\u003c#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "**Role:** Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "**Responsibilities:** Documentation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Perry Wang Zhi Ming"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "image::perrythewang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/perrythewang[github]] [\u003c\u003c#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**Role:** Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "**Responsibilities:** Testing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ruslan Farkhutdinov"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "image::fr3ddy4.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/fr3ddy4[github]] [\u003c\u003c#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "**Role:** Developer +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "**Responsibilities:** Code Quality Assurance"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 11,
      "-": 48
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-T16-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d ProManage - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T16-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "By: `T16-2` Â Â Â Â  Since: `September 2018` Â Â Â Â  Licence: `NUS`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d Event Sorting"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "The sort mechanism is facilitated by Comparator\u003cEvent\u003e."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "When the sort method for FXObservableList is called, it will take a Comparator object to be use for sorting the list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "The comparator is able to take in two Event class objects and compare the relative parameter values."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "The parameter can be `EventName`, `Date` \u0026 `StartTime`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "To allow sorting of these parameters, there are three types of comparators."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "image::SortNewCommand1StateListDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "image::SortSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Committing Event List after sorting"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * **Alternative 1 (current choice):** Commits and saves the entire event list."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Pros: Easy to implement and able to use undo to the previous state."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* **Alternative 2:** Does not commit the event list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Pros: Will use less memory."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Cons: Unable to use undo function to revert back to the previous view."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "// end::Sorting[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "// tag:: Invite[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d Invite feature"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "The `invite` command allows users to add attendees to an existing event, which is represented by an `Event` object."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "The command currently only allows users to add a single person to an event, based on the indices on the UI."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "This command adds the invited `Person` \u0027s name, which is unique, to a chosen `Event`, so that the attendees of a particular event is recorded."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "The adding of attendees is facilitated by the class: `Attendees`, a list of names of type `String`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "The following is a more detailed description of the class:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "*  `Attendees`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Each `Event` object has an `Attendees`, which is a list of the names of the different `Person` attending the event."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** This class is a wrapper class around the internal representation of a list of attendees that exposes only a few functions of a `Set` of `String`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Only the names of the `Person` is recorded in an `Event`, as the name should be unique and uneditable."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Storing only the *name* of `Person` in the `Attendees` object of `Event` saves memory storage and facilitates the `select` feature. As we select a person, we can simply iterate through the event list and check whether the person\u0027s name is in the attendees list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "We can also have a summarized content of persons (their names) involved in an event. Obtaining the full information of the list of persons in a particular event is not required in the current version of project, but can still be implemented easily with the current `Attendee` structure. This can be done by filtering through the address book based on the person names present in `Attendees`. Thus, there is no need to store any event information in the `Person` object."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Implementation of RemoveCommand is similar to InviteCommand, but removes persons from attendees of events instead."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d Execution of Command"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Given below is an example usage scenario and how the invite mechanism works."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 1. The user inputs `invite 1 to/1` to invite the 1st person in the address book to the 1st event in the event list. The command text is passed to an instance of the `LogicManager` class."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 2. The `LogicManager` instance calls `AddressBookParser#parsecommand`, which parses the `invite` command phrase."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 3. `InviteCommandParser#parse` parses the person and event index. An instance of the `InviteCommand` encapsulating the two indices information is then returned."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 4. `Logic Manager` then executes this `InviteCommand` by calling `InviteCommand#execute`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 5. The filtered person list and event list is first obtained by calling `PersonModel#getFilteredPersonList` and `EventModel#getFilteredEventList`. Based on the indices, the `Person` and `Event` is selected."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 6. Next, the `Person` object\u0027s name is obtained and added to the obtained `Attendees` object. The new `Attendees` object is then added to a new copy of the `Event` object."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 7. The new `Event` object is updated to the model by calling `Model#updateEvent`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Step 8. The `InviteCommand#execute` finally returns a `CommandResult` with a success message."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "The sequence diagram below illustrates the execution of the `invite` command."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "image::InviteSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to link `Person` and `Event`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* **Alternative 1 (current choice):** Saves only the names of the Persons in the Attendees of Events."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Pros: Saves space. Able to filter EventList easily."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Cons: Requires going through the entire list of AddressBook to obtain details of persons attending the particular event."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* **Alternative 2:** Saves the entire information of Events for each Persons."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Pros: Fast access to information of Events attended by any Persons."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Cons: Takes up a lot of storage space and memory. Many repeated items within the storage files."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* **Alternative 3:** Assign an ID to each Persons and store in Attendees of Events."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Pros: Able to edit names in a straightforward coding manner."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Cons: We must add or assign an ID during creation of Person. This may require some refactoring of the current code base. Unnecessary if name is unique and uneditable."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support `invite` command"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* **Alternative 1 (current choice):** Use `HashSet` to store persons names."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Pros: Easier and faster to retrieve or validate names stored. Able to handle duplicates easily."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Cons: Sequence of persons added is lost. Currently, this feature is not important for the project."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* **Alternative 2:** Use `ArrayList` to store persons names."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Pros: Names are stored in order of addition."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "** Cons: Inefficient when handling data."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d Future Improvements"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding multiple persons to an event"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "The current `invite` command only invites one person to a chosen event based on the index chosen. This feature can be further extended to enable inviting more than one person to an event."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "One possible way to to implement this is to have the user"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* input a certain range (2-5) or"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* multiple indices (1, 3, 6) or"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* a mixture of both (1-3, 4, 6-10)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "The same concept can also be applied to events, being able to invite one person to multiple events with one single command."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Implementation of this additional feature would require changes to both `InviteCommandParser` and `InviteCommand#execute`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "// end::Invite[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Companies have project management teams. Delegation of tasks and events can become complicated."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Project teams comprises of project managers, and the various sub branches : Admin, Logistics, Programmes, Publicity, Marketing and Safety."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* This application aims to provide an all in one platform to ease the mode of task and event allocation."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "**Project Manager:**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* In charge of overall project."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* He/She has the autonomy to add/edit/view/delete all of the events and tasks of his/her employees."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "**Department Head:**"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* In charge of his/her department ."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* He/she has the autonomy to communicate with"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "  other department heads within the system."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* He/she has the autonomy to add/edit/view/delete all of"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "  the events of his/her employees within the department."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "**Employees:**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "  * He/she is only entitled to add/edit/view/delete all of the events of himself/herself within"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    the department."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Facilitates workflow faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Saves consumers\u0027 efficiency, money and time tremendously."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |New Project Manager|See usage instructions |Refer to instructions when I forget how to use the ProManage"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Add a new person (Department Head or Employee) |To maintain a record of that person"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Delete a person (Department Head or Employee) |Remove entries that I no longer need"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Edit a person\u0027s details |Change the relevant information"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Find a person by name |Locate details of people without having to go through the entire list"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |List the people in alphabetical order by name or by department |View the whole list of"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "relevant people"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Select a person |To know more information about the person"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Add a new event |To maintain a record of that event"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Delete an event |Remove events that are no longer relevant"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Edit the information of an event |Update the relevant information"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Invite department heads or employee to events |Tag the person to the relevant event"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Remove people from the event |Remove irrelevant people from an event"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Find an event |Locate details of the event without having to look through the entire list"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Select an event |To know more information about the event"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Schedule for the time period |To have a calendar view of the events for that time period and"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "to keep track/ Plan schedule properly"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |History of commands |To view the commands previously inserted into ProManage"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Undo command |Undo my previously entered command"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Redo command |Redo my previously undo command"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Project Manager |Exit command |"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |New Department Head|See usage instructions |Refer to instructions when I forget how to use the ProManage"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Add a new Employee |To maintain a record of that employee"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Delete an Employee |Remove entries that I no longer need"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Edit an employee\u0027s details |Change the relevant information"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Find an employee by name |Locate details of employees without having to go through the entire list"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |List the people in alphabetical order by name or by department |View the whole list of"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "relevant people"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Select an employee |To know more information about the employee"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Add a new event |To maintain a record of that event"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Delete an event |Remove events that are no longer relevant"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Edit the information of an event |Update the relevant information"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Invite employees to events |Tag the person to the relevant event"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Remove employees from the event |Remove uninvolved employees from an event"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Find an event |Locate details of the event without having to look through the entire list"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Select an event |To know more information about the event"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Schedule for the time period |To have a calendar view of the events for that time period and"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "to keep track/ Plan schedule properly"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |History of commands |To view the commands previously inserted into ProManage"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Undo command |Undo my previously entered command"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Redo command |Redo my previously undo command"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Department Head |Exit command |"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |New Employee |See usage instructions |Refer to instructions when I forget how to use the ProManage"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "|`* * *` |Employee |Schedule for the time period |To have a calendar view of the events for that time period and"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "to keep track/ Plan schedule properly"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "(For all use cases below, the *System* is the `ProManage` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "1.  User requests to add a person."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "2.  ProManage adds records down the input information of the person."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "3.  ProManage adds person."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d Use case: Edit person"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "1.  User requests to edit information of person"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "2.  ProManage shows a list of persons"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "3.  User requests to edit a specific person in the list"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "4.  AddressBook edits the person"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d Use case: Add Event"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "1.  User requests to create an event."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "2.  ProManage displays input format and requests user to enter event input details according to format."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "3. User enters event details."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "4.  Program displays users input and confirm the input with user."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "5. User confirms with ProManage"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "6. ProManage adds event to user\u0027s event list."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 3a. User input incorrect format."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "** 3a1. ProManage shows an error message."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d Use case: Delete event"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "1.  User requests to delete an event"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "2.  ProManage shows a list of events"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "3.  User requests to delete a specific event in the list"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "4.  AddressBook deletes the event"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d Use case: Edit event"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "1.  User requests to edit an event."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "2.  ProManage shows a list of events to the user."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "3.  User requests to edit a specific event in the list"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "4.  User enters the updated details of the event."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "5.  ProManage confirms edited details with the user."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "6.  User confirms with ProManage."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "7.  ProManage edits confirmed details of the chosen event."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d Use case: Invite employees to events"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "1.  User requests to add employees to events."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "2.  ProManage request employee name and event ID."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "3.  User enters employee name and event ID."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "4.  ProManage confirms result with user."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "5.  User confirms with ProManage."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "6. ProManage adds employees to events"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 3a. Invalid name or event ID."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d Use case: Remove employees from events"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "1.  User requests to remove employees to events."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "2.  ProManage request employee name and event ID."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "3.  User enters employee name and event ID."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "4.  ProManage confirms result with user."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "5.  User confirms with ProManage."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "6. ProManage removes employees to events"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* 3a. Invalid name or event ID."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ".  A user new to the program should be able to navigate and utilize the CLI easily."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ".  Experienced CLI users should be able to be familiar with all the commands and navigation within the program."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ".  User cannot be in multiple departments."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ".  The program should respond within 2 seconds after creation, editing, and deletion of events."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 78,
      "Jeevz10": 288,
      "IcedCoffeeBoy": 11,
      "-": 904
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003d ProManage - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T16-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "By: `Team 16-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "ProManage is a *professional desktop application* for companies that specialises in executing projects that undergoes a"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "long and tedious planning phase, prior to their event. This is particularly useful for companies that have a distinct structure"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "and chain of command. For each project, there is a project team, which is usually led by a *Manager*. The planning"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "committee consists of various branches: *Admin, Logistics, Programmes, Finance, Publicity, Marketing and Safety*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Our application aims to ease the mode of task, event allocation and management by providing an all-in-one platform for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "the project team. It saves companies\u0027 time and money. Our customers will feel at ease communicating with one another in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "their project team setting. There is no better way to work than a CLI application that facilitates workflow than ProManage!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "More importantly, ProManage is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). ProManage can help you manage project scheduling effectively."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your ProManage App."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *`list`* : lists all employees and employers in our contact list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": " `John Doe` to the Address Book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* **`delete`**`3` : deletes the 3rd person shown in the contact list list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *`exit`* : exits the application"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "  can be used as `add n/Some Meeting`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* Items in square brackets are optional e.g `DEPT, [MORE_DEPTS,]` can be used as `Dept1, Dept2` or as `Dept1`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Items with `â€¦`â€‹ after them can be used multiple times including zero times e.g. `[MORE_DEPTS,]...` can be used as"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": " `{nbsp}` (i.e. 0 times), `Dept1`, `Dept1, Dept2` etc."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME t/TIME`, `t/TIME n/NAME` is also acceptable."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d *Project Manager*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "This section is meant for Project Managers\u0027. Some of the following commands are exclusive to the Project Manager."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Project Managers have full jurisdriction to view all information and events."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an employee : \u0027add\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Adds an employee to ProManage +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Enter a command: `add` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter employee details: `n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS dep/DEPARTMENT [t/TAG]...`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 dep/ADMIN`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all personnel of the company : \u0027list\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Shows a list of personnel in the company +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `list`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an employee : \u0027edit\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Edits the details of the employee: +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Enter a command: `edit LIST_INDEX p/PHONE_NUMBER e/EMAIL a/ADDRESS dep/DEPARTMENT t/TAGâ€¦â€‹`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed event list. The"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "index *must be a positive integer* 1, 2, 3, ... +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* Name is not editable"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* You can remove all the personâ€™s tags by typing t/ without specifying any tags after it."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an employee : \u0027delete\u0027"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Delete an employee from ProManage: +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `delete LIST_INDEX`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an event: `addEvent`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Adds an event to ProManage, via a series of prompts +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `addEvent` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter event details: `n/NAME d/DESCRIPTION l/LOCATION date/DATE(DDMMYY) s/START TIME e/END TIME`  +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`addEvent` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`n/Board Meeting d/Weekly Meeting l/Conference Room 1 date/2018-09-28 s/12:00 e/23:59 ` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Creates an event named Board Meeting."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all events: `schedule`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Display the full list of events in the project. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Format: `schedule`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Invite employees: `invite`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Add employees to the project event at the respective specified INDEX. The index refers to the index number shown in the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "displayed person and event list. The index must be a positive integer 1, 2, 3... +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Format: `invite PERSON_INDEX to/EVENT_INDEX` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Example: invite 1 to/2"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Remove employee: `remove`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Removes an employee from the project event. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Format/Prompts: `remove PERSON_INDEX  from/EVENT_INDEX` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Example: remove 1 from/2"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying an event: `editEvent`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Modifying the event at the specified INDEX. The index refers to the index number shown in the displayed event list. The"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "index must be a positive integer 1, 2, 3... +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Input nil if it is not the field to be changed. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `editEvent SCHEDULE_INDEX` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter event details: `n/NAME d/DESCRIPTION l/LOCATION date/DATE(DDMMYY) s/START TIME e/END TIME`  +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed event list. The"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "index *must be a positive integer* 1, 2, 3, ... +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Enter a command: `editEvent 10`  +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter event details: n/Weekly Meeting d/Check on progress l/Conference Room 2 date/2018-09-10 s/12:00 e/14:00`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Locating events by name: `find`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Finds the event whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* The search is case insensitive. e.g `Budget Review` will match `budget review`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* The order of the keywords does not matter. e.g. `Budget Review` will match `Review Budget`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Only full words will be matched e.g. `Budget` will not match `Budg`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Events matching at least one keyword will be returned (i.e. `OR` search). e.g. `Budget Review` will return `Budget`, `Review`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `find Budget` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Returns `Budget Review` and `Budget Press Release`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `find Budget Review` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Returns any event having names `Budget` or `Review`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an event : `deleteEvent`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Delete the event at the specified INDEX. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `deleteEvent SCHEDULE_INDEX`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* Deletes the event at the specified `INDEX`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* The index refers to the index number shown in the displayed event/task list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* `schedule` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`deleteEvent 2` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Deletes the 2nd event in the address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* `find Meeting` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`deleteEvent 1` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Deletes the 1st event in the results of the `find` command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting an event: `select`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Selects the event identified by the index number used in the displayed event list. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `select SCHEDULE_INDEX`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* Selects the event and loads the full description of the event at the specified `INDEX`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* The index refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* `schedule` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Selects the 2nd event in the event schedule."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "* `find Meeting` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Selects the 1st event in the results of the `find` command."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `history`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Restores the event schedule to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `undo`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Undoable commands: those commands that modify the event schedule\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `redo`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`undo` (reverses the `cancel 1` command) +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`redo` (reapplies the `cancel 1` command) +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`undo` (reverses the `cancel 1` command) +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`redo` (reapplies the `cancel 1` command) +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "Clears all entries from the event schedule. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `clear`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `exit`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "ProManage data saves data in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d *Department Head*"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "This section is meant for Department Heads\u0027."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Department Heads can only access his/her own departmentâ€™s events."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "//TODO confirm that department heads cannot add people?"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an event: `addEvent`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Adds an event to ProManage, via a series of prompts +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `addEvent` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter event details: `n/NAME d/DESCRIPTION l/LOCATION date/DATE(DDMMYY) s/START TIME e/END TIME`  +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`addEvent` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`n/Board Meeting d/Weekly Meeting l/Conference Room 1 date/2018-09-28 s/12:00 e/23:59 ` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Creates an event named Board Meeting."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all events: `schedule`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Display the full list of events in the project. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Format: `schedule`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Invite employees: `invite`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Add employees to the project event at the respective specified INDEX. The index refers to the index number shown in the"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "displayed person and event list. The index must be a positive integer 1, 2, 3... +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format: `invite LIST_INDEX to/SCHEDULE_INDEX` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Example: invite 1 to/2"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Remove employee: `remove`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Removes an employee from the project event. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Format/Prompts: `remove EVENT_INDEX  from/PERSON_INDEX` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Example: remove 1 from/2"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying an event: `editEvent`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Modifying the event at the specified INDEX. The index refers to the index number shown in the displayed event list. The"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "index must be a positive integer 1, 2, 3... +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Input nil if it is not the field to be changed. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `editEvent SCHEDULE_INDEX` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "Enter event details: `d/DESCRIPTION l/LOCATION date/DATE(DDMMYY) s/START TIME e/END TIME`  +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed event list. The"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "index *must be a positive integer* 1, 2, 3, ... +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Enter a command: `editEvent 10`  +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter event details: n/Weekly Meeting d/Check on progress l/Conference Room 2 date/2018-09-10 s/12:00 e/14:00`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Locating events by name: `find`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Finds the event whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* The search is case insensitive. e.g `Budget Review` will match `budget review`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* The order of the keywords does not matter. e.g. `Budget Review` will match `Review Budget`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Only full words will be matched e.g. `Budget` will not match `Budg`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Events matching at least one keyword will be returned (i.e. `OR` search). e.g. `Budget Review` will return `Budget`, `Review`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `find Budget` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Returns `Budget Review` and `Budget Press Release`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `find Budget Review` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Returns any event having names `Budget` or `Review`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an event : `deleteEvent`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Delete the event at the specified INDEX. +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `deleteEvent SCHEDULE_INDEX`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* Deletes the event at the specified `INDEX`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* The index refers to the index number shown in the displayed event/task list."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* `schedule` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`deleteEvent 2` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Deletes the 2nd event in the address book."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `find Meeting` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`deleteEvent 1` +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Deletes the 1st event in the results of the `find` command."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting an event: `select`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Selects the event identified by the index number used in the displayed event list. +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `select SCHEDULE_INDEX`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* Selects the event and loads the full description of the event at the specified `INDEX`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* The index refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "****"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* `schedule` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Selects the 2nd event in the event schedule."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* `find Meeting` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Selects the 1st event in the results of the `find` command."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `history`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Restores the event schedule to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `undo`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Undoable commands: those commands that modify the event schedule\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `redo`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`undo` (reverses the `cancel 1` command) +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`redo` (reapplies the `cancel 1` command) +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* `cancel 1` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`undo` (reverses the `cancel 1` command) +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "`redo` (reapplies the `cancel 1` command) +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Clears all entries from the event schedule. +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `clear`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `exit`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "ProManage data saves data in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d *Employee*"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "This section is meant for Employees."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Employees can only access his/her own departments\u0027 events."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all events: `schedule`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Display the full list of events in the project. +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: `schedule`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Requests for a statistics of a week or get a suggested common meeting time by analysing multiple usersâ€™ calendars: `query`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Format/Prompts: +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "Enter a command: `query\u0027"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "//TODO Finalise what this section does"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* `query stats` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Displays the statistics of a week"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* `query meetings` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Displays a suggested common meeting time"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003d\u003d\u003d\u003d Submit a completed task: `submit`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* `submit 1` +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "Task with id 1 is submitted as complete."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *Add*: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS dep/DEPARTMENT [t/TAG]...`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* *Edit* : `edit LIST_INDEX p/PHONE_NUMBER e/EMAIL a/ADDRESS dep/DEPARTMENT t/TAGâ€¦â€‹`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *Delete* : `delete LIST_INDEX`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *addEvent* : `addEvent n/NAME d/DESCRIPTION l/LOCATION date/DATE s/START TIME e/END TIME ` +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "// TODO figure this out! Enter description or instructions: `INSTRUCTIONS`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "* *Schedule* : `schedule`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* *Invite* : `invite PERSON_INDEX to/EVENT_INDEX`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "* *Remove* : `remove PERSON_INDEX  n/EVENT_INDEX`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *editEvent* : `n/NAME d/DESCRIPTION l/LOCATION date/DATE s/START TIME e/END TIME `"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *deleteEvent* : `deleteEvent SCHEDULE_INDEX`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *Select* : `select SCHEDULE_INDEX`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "perrythewang": 43,
      "jieliangang": 12,
      "Jeevz10": 211,
      "IcedCoffeeBoy": 149,
      "-": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.util.SampleEventUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.storage.EventStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.storage.XmlEventStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ProManage ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        EventStorage eventStorage \u003d new XmlEventStorage(userPrefs.getEventlistPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, eventStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Optional\u003cReadOnlyEventList\u003e eventListOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ReadOnlyEventList initialEventListData;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            eventListOptional \u003d storage.readEventList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            if (!eventListOptional.isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample EventList\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            initialEventListData \u003d eventListOptional.orElseGet(SampleEventUtil::getSampleEventList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty EventList\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            initialEventListData \u003d new EventList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EventList\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            initialEventListData \u003d new EventList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        initialEventListData.sortByName();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new ModelManager(initialAddressData, initialEventListData, userPrefs);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 20,
      "IcedCoffeeBoy": 14,
      "-": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 1,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 1,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/EventListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/** Indicates the EventList in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public final ReadOnlyEventList data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventListChangedEvent(ReadOnlyEventList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return \"number of events \" + data.getEventList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/EventPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Represents a selection change in the Event List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Event newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventPanelSelectionChangedEvent(Event newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Event getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(URI)} },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 4,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.ProManageParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private ProManageParser proManageParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.proManageParser \u003d new ProManageParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            Command command \u003d proManageParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 6,
      "IcedCoffeeBoy": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            + PREFIX_DEPARTMENT + \"DEPARTMENT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            + PREFIX_DEPARTMENT + \"Admin \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 3,
      "IcedCoffeeBoy": 2,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author: jieliangang"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Creates an event in event list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addEvent\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an event to the event list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_NAME + \"Board Meeting \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Weekly Meeting \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_LOCATION + \"Conference Room 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_DATE + \"2018-09-28 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_START_DATE + \"12:00 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_END_DATE + \"23:59 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the event list\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 14,
      "jieliangang": 57,
      "IcedCoffeeBoy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.resetData(new AddressBook(), new EventList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.removePersonFromAllEvents(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " * Cancels an event identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteEvent\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \": Cancels the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String MESSAGE_CANCEL_EVENT_SUCCESS \u003d \"Cancelled Event: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CANCEL_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Existing values will be overwritten by the input values. Name is NOT editable\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Name name \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        Department updatedDepartment \u003d editPersonDescriptor.getDepartment().orElse(personToEdit.getDepartment());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Person(name, updatedPhone, updatedEmail, updatedAddress, updatedDepartment, updatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        private Department department;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            setDepartment(toCopy.department);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(phone, email, address, department, tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        public void setDepartment(Department department) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            this.department \u003d department;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        public Optional\u003cDepartment\u003e getDepartment() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            return Optional.ofNullable(department);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    \u0026\u0026 getDepartment().equals(e.getDepartment())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 5,
      "Jeevz10": 19,
      "-": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " * Edits the details of an existing event in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editEvent\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END_DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + PREFIX_NAME + \"Strategy Meeting \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            + PREFIX_LOCATION + \"Meeting Room 2 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event name already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * @param index               of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * edited with {@code editEventDescriptor}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        EventName updatedName \u003d editEventDescriptor.getEventName().orElse(eventToEdit.getEventName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        LocalDate updatedDate \u003d editEventDescriptor.getDate().orElse(eventToEdit.getDate());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        StartTime updatedStartTime \u003d editEventDescriptor.getStartTime().orElse(eventToEdit.getStartTime());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        EndTime updatedEndTime \u003d editEventDescriptor.getEndTime().orElse(eventToEdit.getEndTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        Location updatedLocation \u003d editEventDescriptor.getLocation().orElse(eventToEdit.getLocation());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return new Event(updatedName, updatedDescription, updatedDate,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                updatedStartTime, updatedEndTime, updatedLocation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        model.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        model.commitEventList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        private EventName eventName;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        private StartTime startTime;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        private EndTime endTime;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public EditEventDescriptor() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            setEventName(toCopy.eventName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(eventName, startTime, endTime, location);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public Optional\u003cEventName\u003e getEventName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return Optional.ofNullable(eventName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public void setEventName(EventName eventName) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        public Optional\u003cStartTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        public void setStartTime(StartTime startTime) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        public Optional\u003cEndTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        public void setEndTime(EndTime endTime) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return getEventName().equals(e.getEventName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 207,
      "IcedCoffeeBoy": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InviteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Attendees;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Invites an existing person to an existing event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class InviteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"invite\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Invites an existing person to an existing event \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"by the index number used in the displayed person list and displayed event list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_TO + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TO + \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_INVITE_PERSON_SUCCESS \u003d \"Invited Person: %1$s to %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the event.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Index indexEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Index indexPerson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public InviteCommand(Index indexPerson, Index indexEvent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.indexPerson \u003d indexPerson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.indexEvent \u003d indexEvent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (indexPerson.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (indexEvent.getZeroBased() \u003e\u003d lastShownEventList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person person \u003d lastShownPersonList.get(indexPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event event \u003d lastShownEventList.get(indexEvent.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personName \u003d person.getName().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesList \u003d event.getAttendees();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!attendeesList.isSetEmpty() \u0026\u0026 attendeesList.hasName(personName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event updatedEvent \u003d event.addPersonToAttendee(personName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.updateEvent(event, updatedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_INVITE_PERSON_SUCCESS, personName, event.getEventName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof InviteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 indexEvent.equals(((InviteCommand) other).indexEvent))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 indexPerson.equals(((InviteCommand) other).indexPerson); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.model.EventModel.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.model.PersonModel.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons and events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.CommandsParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.EmployeeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.ManagerParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Login the person into ProManage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String KEY_MANAGER \u003d \"manager\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String KEY_EMPLOYEE \u003d \"employee\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String MESSAGE_INVALID_LOGIN \u003d \"Login identity should be either the following:\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            + \"\\nmanager\\nempolyee\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully login as %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final String loginIdentity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public LoginCommand(String arguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.loginIdentity \u003d arguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public CommandsParser getParser() throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        switch (loginIdentity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case KEY_MANAGER:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ManagerParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case KEY_EMPLOYEE:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new EmployeeParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_LOGIN);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, loginIdentity));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Attendees;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Removes an existing person from an existing event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes an existing person from an existing event \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"by the index number used in the displayed person list and displayed event list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + PREFIX_FROM + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_FROM + \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_REMOVE_PERSON_SUCCESS \u003d \"Removed Person: %1$s from %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_ABSENT_PERSON \u003d \"This person is not originally in the event\u0027s attendee list.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_ATTENDEE_EMPTY \u003d \"The event selected has no invited persons.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Index indexEvent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Index indexPerson;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public RemoveCommand(Index indexPerson, Index indexEvent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.indexPerson \u003d indexPerson;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.indexEvent \u003d indexEvent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (indexPerson.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (indexEvent.getZeroBased() \u003e\u003d lastShownEventList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person person \u003d lastShownPersonList.get(indexPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event event \u003d lastShownEventList.get(indexEvent.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personName \u003d person.getName().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesList \u003d event.getAttendees();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (attendeesList.isSetEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(MESSAGE_ATTENDEE_EMPTY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        } else if (!attendeesList.hasName(personName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(MESSAGE_ABSENT_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event updatedEvent \u003d event.removePersonFromAttendee(personName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.updateEvent(event, updatedEvent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_PERSON_SUCCESS, personName, event.getEventName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof RemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 indexEvent.equals(((RemoveCommand) other).indexEvent))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 indexPerson.equals(((RemoveCommand) other).indexPerson); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.EventContainsAttendeePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"and display events the person is attending\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person person \u003d filteredPersonList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personName \u003d person.getName().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventContainsAttendeePredicate predicate \u003d new EventContainsAttendeePredicate(personName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model.sortByDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 51,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Sort the event list based on the parameters given"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort by the given parameter \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            + \"name, starttime, endtime \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            + \"sort endtime\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully sort by %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String KEY_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String KEY_STARTTIME \u003d \"starttime\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String KEY_ENDTIME \u003d \"endtime\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String KEY_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final String key;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public SortCommand(String sortByParam) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(sortByParam);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        key \u003d sortByParam;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        switch (key) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (KEY_NAME):"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            model.sortByName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (KEY_STARTTIME):"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            model.sortByStartTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (KEY_ENDTIME):"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            model.sortByEndTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (KEY_DATE):"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            model.sortByDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, key));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                        PREFIX_DEPARTMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DEPARTMENT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        Department department \u003d ParserUtil.parseDepartment(argMultimap.getValue(PREFIX_DEPARTMENT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, department, tagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 7,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        PREFIX_DATE, PREFIX_LOCATION, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                PREFIX_DATE, PREFIX_LOCATION, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventName name \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        StartTime startDate \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        EndTime endDate \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Event event \u003d new Event(name, description, date, startDate, endDate, location);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 9,
      "jieliangang": 47,
      "IcedCoffeeBoy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.InviteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        case InviteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return new InviteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 12,
      "jieliangang": 8,
      "IcedCoffeeBoy": 4,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final Prefix PREFIX_DEPARTMENT \u003d new Prefix(\"dep/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 6,
      "Jeevz10": 1,
      "IcedCoffeeBoy": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandsParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public abstract class CommandsParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    protected static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public abstract Command parseCommand(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns identity of the parser type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public abstract String getIdentity();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DefaultParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.InviteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class DefaultParser extends CommandsParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String IDENTITY \u003d \"Default\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case InviteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new InviteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case LoginCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String getIdentity() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.IDENTITY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * and returns a Cancel command object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                        PREFIX_DEPARTMENT, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEPARTMENT).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            editPersonDescriptor.setDepartment(ParserUtil.parseDepartment("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    argMultimap.getValue(PREFIX_DEPARTMENT).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "Jeevz10": 6,
      "IcedCoffeeBoy": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " * Parses input arguments and creates a new EditEventCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            editEventDescriptor.setEventName("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            editEventDescriptor.setDescription("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            editEventDescriptor.setStartTime("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                    ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            editEventDescriptor.setEndTime("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                    ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            editEventDescriptor.setLocation("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                    ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 69,
      "IcedCoffeeBoy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EmployeeParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.InviteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class EmployeeParser extends CommandsParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String IDENTITY \u003d \"Employee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case InviteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new InviteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String getIdentity() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.IDENTITY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InviteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.InviteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Parses input arguments and creates a new InviteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class InviteCommandParser implements Parser\u003cInviteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InviteCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * and returns a InviteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public InviteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index indexPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index indexEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            indexPerson \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InviteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                indexEvent \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TO).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                        InviteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InviteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new InviteCommand(indexPerson, indexEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class LoginCommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String KEY_MANAGER \u003d \"manager\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String KEY_EMPLOYEE \u003d \"employee\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String MESSAGE_INVALID_LOGIN \u003d \"Login identity should be either the following:\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            + \"\\nmanager\\nemployee\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            + \"\\nExample: login manager\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param args full user input string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        switch (trimmedArgs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case KEY_MANAGER:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new LoginCommand(KEY_MANAGER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case KEY_EMPLOYEE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new LoginCommand(KEY_EMPLOYEE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_LOGIN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ManagerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.InviteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class ManagerParser extends CommandsParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String IDENTITY \u003d \"Manager\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case InviteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new InviteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String getIdentity() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.IDENTITY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "IcedCoffeeBoy": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * Parses a {@code String department} into a {@code Department}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * @throws ParseException if the given {@code department} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static Department parseDepartment(String department) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        String trimmedDepartment \u003d department.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        if (!Department.isValidDepartment(trimmedDepartment)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            throw new ParseException(Department.MESSAGE_DEPARTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return new Department(trimmedDepartment);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static EventName parseEventName(String name) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!EventName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_EVENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new EventName(trimmedName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new ParseException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new ParseException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String trimmedStartTime \u003d date.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        // TODO: WORK ON VALIDATING DATE"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        //if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        //  throw new ParseException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return LocalDate.parse(date);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses a {@code String startTime} into a {@code StartTime}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static StartTime parseStartTime(String startTime) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        // TODO: WORK ON VALIDATING DATE"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        //if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        //  throw new ParseException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return new StartTime(trimmedStartTime);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses a {@code String endTime} into a {@code EndTime}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static EndTime parseEndTime(String endTime) throws ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String trimmedEndTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // TODO: WORK ON VALIDATING DATE"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //  throw new ParseException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return new EndTime(trimmedEndTime);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 61,
      "Jeevz10": 16,
      "IcedCoffeeBoy": 42,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ProManageParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class ProManageParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private CommandsParser commandsParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public ProManageParser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.commandsParser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @return Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Command parseCommand(String userInput) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Command command \u003d commandsParser.parseCommand(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (command instanceof LoginCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            this.commandsParser \u003d ((LoginCommand) command).getParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Parses input arguments and creates a new RemoveCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * and returns a RemoveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public RemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FROM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index indexPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index indexEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            indexPerson \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                indexEvent \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FROM).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                        RemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new RemoveCommand(indexPerson, indexEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * and returns an CreateCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String key;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        switch (trimmedArgs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (SortCommand.KEY_NAME):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            key \u003d SortCommand.KEY_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (SortCommand.KEY_STARTTIME):"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            key \u003d SortCommand.KEY_STARTTIME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (SortCommand.KEY_ENDTIME):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            key \u003d SortCommand.KEY_ENDTIME;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        case (SortCommand.KEY_DATE):"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            key \u003d SortCommand.KEY_DATE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return new SortCommand(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Wraps all data at the event-list level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Duplicates are not allowed (by .isSameEvent comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class EventList implements ReadOnlyEventList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param toBeCopied"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EventList(ReadOnlyEventList toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void resetData(ReadOnlyEventList newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Adds an event to the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * The event must not already exist in the event list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * {@code target} must exist in the event list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * The identity of {@code editedEvent} must not be the same as another existing event in the event list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Removes {@code key} from this {@code EventList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * {@code key} must exist in the event list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Removes {@code Person} from the Attendee of {@code EventList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void removePersonFromAllEvents(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personName \u003d person.getName().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        events.removeAttendee(personName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cEvent\u003e getSortedEventList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return events.getSortedEventList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || (other instanceof EventList// instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 events.equals(((EventList) other).events));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        events.sortByName();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByStartTime() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        events.sortByStartTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByEndTime() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        events.sortByEndTime();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByDate() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        events.sortByDate();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "perrythewang": 17,
      "jieliangang": 19,
      "IcedCoffeeBoy": 102,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EventModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public interface EventModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns the EventList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    ReadOnlyEventList getEventList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns true if a person with the same identity as {@code event} exists in the event list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * The event must exist in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * {@code event} must not already exist in the eventList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * {@code target} must exist in the event list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * The event identity of {@code editedPerson} must not be the same as another existing event in the event list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns an unmodifiable view of the filtered event list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Remove person\u0027s name from all event\u0027s attendee if present"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * This is called when a person is deleted from addressbook"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void removePersonFromAllEvents(Person person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Returns true if the model has previous event list states to restore."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    boolean canUndoEventList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Returns true if the model has undone event list states to restore."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    boolean canRedoEventList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Restores the model\u0027s event list to its previous state."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void undoEventList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Restores the model\u0027s event list to its previously undone state."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void redoEventList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Saves the current event list state for undo/redo."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void commitEventList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByStartTime();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByEndTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByDate();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 60,
      "jieliangang": 20,
      "IcedCoffeeBoy": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public interface Model extends PersonModel, EventModel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData, ReadOnlyEventList newEventList);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.events.model.EventListChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final VersionedEventList versionedEventList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyEventList eventList, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireAllNonNull(addressBook, eventList, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        versionedEventList \u003d new VersionedEventList(eventList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedEventList.getEventList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this(new AddressBook(), new EventList(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData, ReadOnlyEventList newEventList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        indicateEventListChanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Address Book Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Raises an event to indicate the addressbook model has changed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventList Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ReadOnlyEventList getEventList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return versionedEventList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Raises an event to indicate the eventlist model has changed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private void indicateEventListChanged() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        raise(new EventListChangedEvent(versionedEventList));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return versionedEventList.hasEvent(event);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        versionedEventList.removeEvent(target);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        indicateEventListChanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        versionedEventList.addEvent(event);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        indicateEventListChanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        versionedEventList.updateEvent(target, editedEvent);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        indicateEventListChanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void removePersonFromAllEvents(Person person) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        versionedEventList.removePersonFromAllEvents(person);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        indicateEventListChanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        versionedEventList.sortByName();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByStartTime() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        versionedEventList.sortByStartTime();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByEndTime() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        versionedEventList.sortByEndTime();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByDate() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        versionedEventList.sortByDate();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean canUndoEventList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return versionedEventList.canUndo();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean canRedoEventList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return versionedEventList.canRedo();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void undoEventList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        versionedEventList.undo();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        indicateEventListChanged();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void redoEventList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        versionedEventList.redo();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        indicateEventListChanged();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void commitEventList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        versionedEventList.commit();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Object Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 versionedEventList.equals(other.versionedEventList)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 29,
      "jieliangang": 76,
      "IcedCoffeeBoy": 28,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PersonModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public interface PersonModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 25,
      "jieliangang": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Unmodifiable view of event list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public interface ReadOnlyEventList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByName();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByStartTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByEndTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void sortByDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 2,
      "IcedCoffeeBoy": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Path eventListPath \u003d Paths.get(\"data\", \"eventlist.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Path getEventlistPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return eventListPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void setEventlistPath(Path eventlistPath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.eventListPath \u003d eventlistPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 3,
      "IcedCoffeeBoy": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * {@code EventList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "perrythewang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public class VersionedEventList extends EventList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    private final List\u003cReadOnlyEventList\u003e eventListStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public VersionedEventList(ReadOnlyEventList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        eventListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        eventListStateList.add(new EventList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Saves a copy of the current {@code EventList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        eventListStateList.add(new EventList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        eventListStateList.subList(currentStatePointer + 1, eventListStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Restores the event list to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        resetData(eventListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Restores the event list to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        resetData(eventListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns true if {@code undo()} has event list states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns true if {@code redo()} has event list states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return currentStatePointer \u003c eventListStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        if (!(other instanceof VersionedEventList)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        VersionedEventList otherVersionedEventList \u003d (VersionedEventList) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return super.equals(otherVersionedEventList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                \u0026\u0026 eventListStateList.equals(otherVersionedEventList.eventListStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedEventList.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "perrythewang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 103,
      "jieliangang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Attendees.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author: jieliangang"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Represents a the attendees in a event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class Attendees {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public final Set\u003cString\u003e attendeesSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Attendees() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.attendeesSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Attendees(Set\u003cString\u003e attendeesSet) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Objects.requireNonNull(attendeesSet);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.attendeesSet \u003d attendeesSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Attendees(Set\u003cString\u003e... attendeesSet) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        for (Set\u003cString\u003e names: attendeesSet) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            Objects.requireNonNull(names);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            this.attendeesSet.addAll(names);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Add names to attendees list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param name The new name to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @return A new copy of updated Attendees."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Attendees addName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Set\u003cString\u003e updatedAttendees \u003d new HashSet\u003c\u003e(this.attendeesSet);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        updatedAttendees.add(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Attendees(updatedAttendees);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Remove names to attendees list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param name The name to be removed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @return A new copy of updated Attendees."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Attendees removeName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Set\u003cString\u003e updatedAttendees \u003d new HashSet\u003c\u003e(this.attendeesSet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        updatedAttendees.remove(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Attendees(updatedAttendees);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns whether set contains name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param name The name to be checked."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean hasName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return attendeesSet.contains(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns whether set is empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean isSetEmpty() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return attendeesSet.isEmpty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof Attendees// instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 attendeesSet.equals(((Attendees) other).attendeesSet)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return attendeesSet.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 76,
      "IcedCoffeeBoy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Represents an Event\u0027s description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Description can take any values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            \"Event description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param description A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 3,
      "IcedCoffeeBoy": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EndTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Represents a Event\u0027s end time in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class EndTime implements Comparable\u003cEndTime\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            \"End time should only be given in HH:MM in 24 hour format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * The first character of the start time must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public final String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EndTime(String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        endTime \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof EndTime // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 endTime.equals(((EndTime) other).endTime)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return endTime.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int compareTo(EndTime other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.endTime.compareTo(other.endTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 58,
      "IcedCoffeeBoy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Represents a Event in the event list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d \" Description: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_LOCATION \u003d \" Location: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_DATE \u003d \" Date: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_START_TIME \u003d \" Start time: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_END_TIME \u003d \" End time: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final StartTime startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final EndTime endTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Attendees attendees;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Every field must be present not null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Event(EventName eventName, Description description,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                 LocalDate date, StartTime startTime, EndTime endTime, Location location) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireAllNonNull(eventName, description, startTime, endTime, location);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendees \u003d new Attendees();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Overloaded constructor to construct event with existing attendees list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Event(EventName eventName, Description description,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                 LocalDate date, StartTime startTime, EndTime endTime, Location location, Attendees attendees) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireAllNonNull(eventName, description, startTime, endTime, location);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public StartTime getStartTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EndTime getEndTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Attendees getAttendees() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return attendees;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if both event of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean isSameEvent(Event event) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (event \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return event !\u003d null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 event.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 (event.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || event.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || event.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || event.getEndTime().equals(getEndTime()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return otherEvent.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 otherEvent.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 otherEvent.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 otherEvent.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 otherEvent.getDate().equals(getDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return Objects.hash(eventName, description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        builder.append(getEventName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_DESCRIPTION)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_LOCATION)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(MESSAGE_DATE)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_START_TIME)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_END_TIME)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .append(attendees.toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Add new name to an event attendees list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param personName The person\u0027s name to be removed from the attendees list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @return An updated event with the person\u0027s name in the attendees list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Event addPersonToAttendee(String personName) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assert personName !\u003d null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assert !attendees.hasName(personName);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees updatedAttendee \u003d attendees.addName(personName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Event(eventName, description, date, startTime, endTime, location, updatedAttendee);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Remove existing name from an event attendees list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param personName The person\u0027s name to be removed from the attendees list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @return An updated event with the person\u0027s name removed in the attendees list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Event removePersonFromAttendee(String personName) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assert personName !\u003d null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assert attendees.hasName(personName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees updatedAttendee \u003d attendees.removeName(personName);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Event(eventName, description, date, startTime, endTime, location, updatedAttendee);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Event other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.getEventName().fullName.compareTo(other.getEventName().fullName);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int compareDateTo(Event other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.getDate().compareTo(other.getDate());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int compareStartTimeTo(Event other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.getStartTime().compareTo(other.getStartTime());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int compareEndTimeTo(Event other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.getEndTime().compareTo(other.getEndTime());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 70,
      "IcedCoffeeBoy": 137,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventContainsAttendeePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code Attendee} contains the person name given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventContainsAttendeePredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final String personName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventContainsAttendeePredicate(String personName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return event.getAttendees().hasName(personName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof EventContainsAttendeePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 personName.equals(((EventContainsAttendeePredicate) other).personName)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Represents a Event\u0027s name in the event list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String MESSAGE_EVENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            \"Event can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * The first character of the event name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EventName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_EVENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 fullName.equals(((EventName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "IcedCoffeeBoy": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Location.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Represents a Event\u0027s location in the event list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            \"Event location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param location A valid address."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return test.matches(LOCATION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || (other instanceof Location// instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 3,
      "IcedCoffeeBoy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/StartTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Represents a Event\u0027s start time in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class StartTime implements Comparable\u003cStartTime\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            \"Start time should only be given in HH:MM in 24 hour format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * The first character of the start time must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public final String startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Constructs a {@code StartTime}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public StartTime(String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        startTime \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                || (other instanceof StartTime // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 startTime.equals(((StartTime) other).startTime)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return startTime.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int compareTo(StartTime other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this.startTime.compareTo(other.startTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 58,
      "IcedCoffeeBoy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * A event is considered unique by comparing using {@code Person#isSameEvent(Event)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * unique in terms of identity in the UniqueEventList. However, the removal of a event uses Event#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * as to ensure that the Event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Adds a Event to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Update events which Attendee contains personName"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void removeAttendee(String personName) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        requireNonNull(personName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        for (Event event: internalList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            if (event.getAttendees().hasName(personName)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                int index \u003d internalList.indexOf(event);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                Event updatedEvent \u003d event.removePersonFromAttendee(personName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                internalList.set(index, updatedEvent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cEvent\u003e getSortedEventList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cEvent\u003e result \u003d this.internalList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(result);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.sort((Event e1, Event e2) -\u003e e1.compareTo(e2));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByStartTime() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.sort((Event e1, Event e2) -\u003e e1.compareStartTimeTo(e2));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByEndTime() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.sort((Event e1, Event e2) -\u003e e1.compareEndTimeTo(e2));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void sortByDate() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        internalList.sort((Event e1, Event e2) -\u003e e1.compareDateTo(e2));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 29,
      "IcedCoffeeBoy": 135,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Department.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": " * Represents a Person\u0027s department in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDepartment(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "public class Department {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String MESSAGE_DEPARTMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            \"Department must be valid and only consist of alphabets\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String DEPARTMENT_VALIDATION_REGEX \u003d \"^[A-Za-z]+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * Constructs a {@code Department}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * @param department A valid department."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public Department(String department) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        checkArgument(isValidDepartment(department), MESSAGE_DEPARTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        value \u003d department;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static boolean isValidDepartment(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return test.matches(DEPARTMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                || (other instanceof Department // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                \u0026\u0026 value.equals(((Department) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_PHONE \u003d \" Phone: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_EMAIL \u003d \" Email: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_ADDRESS \u003d \" Address: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_TAG \u003d \" Tags: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String MESSAGE_DEPARTMENT \u003d \" Department: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private final Department department;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Department department, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        requireAllNonNull(name, phone, email, address, department, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public Department getDepartment() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return department; }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                || (otherPerson.getDepartment().equals(getDepartment())));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                \u0026\u0026 otherPerson.getDepartment().equals(getDepartment());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return Objects.hash(name, phone, email, address, department, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_PHONE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_EMAIL)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_ADDRESS)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .append(MESSAGE_DEPARTMENT)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .append(getDepartment())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .append(MESSAGE_TAG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 9,
      "Jeevz10": 15,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Department(\"Admin\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Department(\"Publicity\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Department(\"Finance\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Department(\"Marketing\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                getTagSet(\"engineering\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Department(\"Publicity\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Department(\"Programmes\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "Jeevz10": 7,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleEventUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Contains utility methods for populating {@code EventList} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class SampleEventUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return new Event[]{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new Event(new EventName(\"CS2113 Lecture\"), new Description(\"Very Hard\"), LocalDate.parse(\"2018-09-28\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                      new StartTime(\"16:00\"), new EndTime(\"18:00\"), new Location(\"LT 100\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new Event(new EventName(\"CS2113 Tutorial\"), new Description(\"Can i skip this?\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                      LocalDate.parse(\"2018-10-28\"), new StartTime(\"16:00\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                      new EndTime(\"17:00\"), new Location(\"Tut room 1000\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new Event(new EventName(\"CS2113 Java session\"), new Description(\"Java Camp help!\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                      LocalDate.parse(\"2018-09-28\"), new StartTime(\"16:00\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                      new EndTime(\"23:00\"), new Location(\"Utown\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static ReadOnlyEventList getSampleEventList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        EventList sampleAb \u003d new EventList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            sampleAb.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "IcedCoffeeBoy": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EventStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Represents a storage for {@link seedu.address.model.EventList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public interface EventStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Path getEventListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyEventList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Optional\u003cReadOnlyEventList\u003e readEventList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @see #getEventListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Optional\u003cReadOnlyEventList\u003e readEventList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Saves the given {@link ReadOnlyEventList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void saveEventList(ReadOnlyEventList addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @see #saveEventList(ReadOnlyEventList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void saveEventList(ReadOnlyEventList eventList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EventStorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "//import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "//import seedu.address.commons.events.model.EventListChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "//import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class EventStorageManager extends ComponentManager implement Storage{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private EventStorage eventStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EventStorageManager(EventStorage eventStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.eventStorage \u003d eventStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Path getEventListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return eventStorage.getEventListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Optional\u003cReadOnlyEventList\u003e readEventList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return readEventList(eventStorage.getEventListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Optional\u003cReadOnlyEventList\u003e readEventList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return eventStorage.readEventList(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void saveEventList(ReadOnlyEventList eventList) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        saveEventList(eventList, eventStorage.getEventListFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void saveEventList(ReadOnlyEventList eventList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        eventStorage.saveEventList(eventList, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void handleEventListChangedEvent(EventListChangeEvent event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            saveEventList(event.data);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "*/"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "IcedCoffeeBoy": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.events.model.EventListChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//import seedu.address.commons.events.model.EventListChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public interface Storage extends AddressBookStorage, EventStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Path getEventListFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Optional\u003cReadOnlyEventList\u003e readEventList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void saveEventList(ReadOnlyEventList eventList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    void handleEventListChangedEvent(EventListChangedEvent abce);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jieliangang": 8,
      "IcedCoffeeBoy": 9,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageAddress.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public interface StorageAddress extends AddressBookStorage, EventStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 2,
      "IcedCoffeeBoy": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.events.model.EventListChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private EventStorage eventStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                          EventStorage eventStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.eventStorage \u003d eventStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Path getEventListFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return eventStorage.getEventListFilePath();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Optional\u003cReadOnlyEventList\u003e readEventList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return readEventList(eventStorage.getEventListFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Optional\u003cReadOnlyEventList\u003e readEventList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return eventStorage.readEventList(filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void saveEventList(ReadOnlyEventList eventList) throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        saveEventList(eventList, eventStorage.getEventListFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void saveEventList(ReadOnlyEventList eventList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventStorage.saveEventList(eventList, filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void handleEventListChangedEvent(EventListChangedEvent event) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            saveEventList(event.data);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 47,
      "IcedCoffeeBoy": 2,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Attendees;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * JAXB-friendly version of the Event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private List\u003cString\u003e attendees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /* @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      private List\u003cXmlAttendees\u003e attendees \u003d new ArrayList\u003c\u003e();*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Constructs an XmlAdaptedEvent."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public XmlAdaptedEvent() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public XmlAdaptedEvent(String eventName, String description, String date,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                           String startTime, String endTime, String location) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.attendees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    //TODO: Test for this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details with attendees."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public XmlAdaptedEvent(String eventName, String description, String date,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                           String startTime, String endTime, String location, List\u003cString\u003e attendees) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (attendees !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            this.attendees \u003d new ArrayList\u003c\u003e(attendees);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventName \u003d source.getEventName().fullName;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        startTime \u003d source.getStartTime().startTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        endTime \u003d source.getEndTime().endTime;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendees \u003d source.getAttendees().attendeesSet.stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        /* attendees \u003d source.getAttendees().stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .map(XmlAttendees::new)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .collect(Collectors.toList());*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        final List\u003cString\u003e eventAttendees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        for (String name : attendees) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            eventAttendees.add(name);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!EventName.isValidName(eventName)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_EVENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        final EventName modelEventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new IllegalValueException(\"Wrong date format\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final LocalDate modelDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                    StartTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!StartTime.isValidTime(startTime)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new IllegalValueException(StartTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final StartTime modelStartTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!EndTime.isValidTime(endTime)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new IllegalValueException(EndTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        final EndTime modelEndTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Set\u003cString\u003e attendees \u003d new HashSet\u003c\u003e(eventAttendees);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        final Attendees modelAttendees \u003d new Attendees(attendees);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Event(modelEventName, modelDescription, modelDate, modelStartTime,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                modelEndTime, modelLocation, modelAttendees);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return Objects.equals(eventName, otherEvent.eventName)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherEvent.description)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 Objects.equals(location, otherEvent.location);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 164,
      "IcedCoffeeBoy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public XmlAdaptedPerson() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, String department,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        department \u003d source.getDepartment().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        if (department \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Department.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        if (!Department.isValidDepartment(department)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            throw new IllegalValueException(Department.MESSAGE_DEPARTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        final Department modelDepartment \u003d new Department(department);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelDepartment, modelTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                \u0026\u0026 Objects.equals(department, otherPerson.department)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 18,
      "IcedCoffeeBoy": 3,
      "-": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlEventStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " * A class to access EventList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class XmlEventStorage implements EventStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlEventStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public XmlEventStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Path getEventListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Optional\u003cReadOnlyEventList\u003e readEventList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return readEventList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Similar to {@link #readEventList()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public Optional\u003cReadOnlyEventList\u003e readEventList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlSerializableEventList xmlEventList \u003d XmlFileStorage.loadEventDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return Optional.of(xmlEventList.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void saveEventList(ReadOnlyEventList eventList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        saveEventList(eventList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Similar to {@link #saveEventList(ReadOnlyEventList)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void saveEventList(ReadOnlyEventList eventList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(eventList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableEventList(eventList));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Saves the given eventList data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableEventList eventList)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            XmlUtil.saveDataToFile(file, eventList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Returns eventList in the file or an empty address book"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static XmlSerializableEventList loadEventDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableEventList.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 19,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * An Immutable EventList that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "@XmlRootElement(name \u003d \"eventlist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class XmlSerializableEventList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Event list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public XmlSerializableEventList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public XmlSerializableEventList(ReadOnlyEventList src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Converts this XML event list into the model\u0027s {@code EventList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        for (XmlAdaptedEvent e : events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            Event event \u003d e.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            if (eventList.hasEvent(event)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            eventList.addEvent(event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!(other instanceof XmlSerializableEventList)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return events.equals(((XmlSerializableEventList) other).events);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 1,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private static final String[] TAG_COLOR \u003d {\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"purple\", \"pink\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Label eventId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Label eventLocation;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private Label eventDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventId.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventName.setText(event.getEventName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        description.setText(event.getDescription().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        eventLocation.setText(String.format(\"Location: %s\", event.getLocation().value));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventDate.setText(String.format(\"Date: %s\", formatDate(event.getDate())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        startTime.setText(String.format(\"Start time: %s\", event.getStartTime().startTime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        endTime.setText(String.format(\"End time: %s\", event.getEndTime().endTime));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return eventId.getText().equals(card.eventId.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns formatted string based on LocalDate."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static String formatDate(LocalDate date) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String formattedString \u003d date.format(formatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String trimmedFormattedString \u003d formattedString.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return trimmedFormattedString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 84,
      "IcedCoffeeBoy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        setConnections(eventList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private void setConnections(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                        //raise(new EventPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Scrolls to the {@code EventCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            eventListView.scrollTo(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            eventListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // TODO: Update gui tests before using eventListPanel"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        browserPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 8,
      "IcedCoffeeBoy": 1,
      "-": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private static final String[] TAG_COLOR \u003d { \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"purple\", \"pink\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private Label department;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        department.setText(person.getDepartment().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        createTags(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns the color  for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private String getTagColor(String tagName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Sets the tag labels for {@code person}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private void createTags(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            String tagColor \u003d getTagColor(tag.tagName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            tagLabel.getStyleClass().add(tagColor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 20,
      "Jeevz10": 3,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                        //raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: #4a3759;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-border-color: #583d91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .indigo {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: indigo;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .purple {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jieliangang": 43,
      "-": 347
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"15\" prefWidth\u003d\"400\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventId\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        \u003cLabel fx:id\u003d\"eventName\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cLabel fx:id\u003d\"eventLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventLocation\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cLabel fx:id\u003d\"eventDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "      \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 37
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "  \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "      \u003cLabel fx:id\u003d\"department\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$department\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eFinance\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eFinance\u003c/department\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 2,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003ePublicity\u003c/department\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eSafety\u003c/department\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eProgrammes\u003c/department\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 7,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlSerializableEventListTest/duplicateEventEventList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003ceventlist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003ceventName\u003eCS2113 Java session\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdescription\u003eJava Camp help!\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdate\u003e2018-09-28\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cstartTime\u003e16:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cendTime\u003e23:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003clocation\u003eUtown\u003c/location\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c!-- Event that is the same with the previous --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003ceventName\u003eCS2113 Java session\u003c/eventName\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdescription\u003eJava Camp help!\u003c/description\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdate\u003e2018-09-28\u003c/date\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cstartTime\u003e16:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cendTime\u003e23:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003clocation\u003eUtown\u003c/location\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003c/eventlist\u003e"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 22
    }
  },
  {
    "path": "src/test/data/XmlSerializableEventListTest/invalidEventEventList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003ceventlist\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c!-- Event with invalid end time--\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003ceventName\u003eCS2113 Java session\u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdescription\u003eJava Camp help!\u003c/description\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdate\u003e2018-09-28\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cstartTime\u003e16:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cendTime\u003e25:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003clocation\u003eUtown\u003c/location\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003c/eventlist\u003e"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 14
    }
  },
  {
    "path": "src/test/data/XmlSerializableEventListTest/typicalEventsEventList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003c!-- EventList save file which contains the same Event values as in TypicalEvents#getTypicalEventList() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003ceventlist\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003ceventName\u003eTest Event 1\u003c/eventName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdescription\u003eTest Description 1\u003c/description\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdate\u003e2018-09-18\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cstartTime\u003e12:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cendTime\u003e16:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003clocation\u003eTest Location 1\u003c/location\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003ceventName\u003eTest Event 2\u003c/eventName\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdescription\u003eTest Description 2\u003c/description\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdate\u003e2018-09-18\u003c/date\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cstartTime\u003e12:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cendTime\u003e21:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003clocation\u003eTest Location 2\u003c/location\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003ceventName\u003eTest Event 3\u003c/eventName\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdescription\u003eTest Description 3\u003c/description\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cdate\u003e2018-09-18\u003c/date\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cstartTime\u003e09:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cendTime\u003e21:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003clocation\u003eTest Location 3\u003c/location\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        \u003cattendees\u003eAlice Pauline\u003c/attendees\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "\u003c/eventlist\u003e"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 31
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    \u003cdepartment\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    \u003cdepartment\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 9,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    \u003cdepartment\u003eAdmin\u003c/department\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private static final String DEPARTMENT_FIELD_ID \u003d \"#department\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private final Label departmentLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        departmentLabel \u003d getChildNode(DEPARTMENT_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return departmentLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                \u0026\u0026 getDepartment().equals(person.getDepartment().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 8,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), (model.getEventList()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private static final String VALID_DEPARTMENT \u003d \"Admin\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 4,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        expectedModel.addEvent(validEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertCommandSuccess(new AddEventCommand(validEvent), model, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventInList \u003d model.getEventList().getEventList().get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertCommandFailure(new AddEventCommand(eventInList), model, commandHistory,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "                AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 4,
      "jieliangang": 8,
      "IcedCoffeeBoy": 13,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event alice \u003d new EventBuilder().withEventName(\"Lecture\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event bob \u003d new EventBuilder().withEventName(\"Tutorial\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        AddEventCommand addLectureCommand \u003d new AddEventCommand(alice);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        AddEventCommand addTutorialCommand \u003d new AddEventCommand(bob);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertTrue(addLectureCommand.equals(addLectureCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        AddEventCommand addLectureCommandCopy \u003d new AddEventCommand(alice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertTrue(addLectureCommand.equals(addLectureCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertFalse(addLectureCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertFalse(addLectureCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertFalse(addLectureCommand.equals(addTutorialCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 12,
      "jieliangang": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new EventList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new EventList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel.resetData(new AddressBook(), new EventList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_NAME_ALICE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_NAME_BENSON \u003d \"Benson Meier\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_NAME_CALVIN \u003d \"Calvin Duu\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String VALID_DEPARTMENT_AMY \u003d \"Marketing\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String VALID_DEPARTMENT_BOB \u003d \"Admin\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_EVENT_NAME_BIRTHDAY \u003d \"Birthday\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_DATE \u003d \"2018-10-28\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_DESCRIPTION_PUNCTUAL \u003d \"Please be punctual.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_LOCATION_LT \u003d \"LT15\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_LOCATION_UT \u003d \"University Town\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_TIME_MORNING \u003d \"08:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String VALID_TIME_NOON \u003d \"12:00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String DEPARTMENT_DESC_AMY \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String DEPARTMENT_DESC_BOB \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String INVALID_DEPARTMENT_DESC \u003d \" \" + PREFIX_DEPARTMENT + \"M@rketing\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    // \u0027@\u0027 not allowed in department"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 14,
      "Jeevz10": 9,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel.removePersonFromAllEvents(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 7,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EventList(model.getEventList()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person editedPerson \u003d personInList.withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EventList(model.getEventList()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EventList(model.getEventList()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EditPersonDescriptorBuilder().build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EventList(model.getEventList()), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EditPersonDescriptorBuilder().build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EventList(model.getEventList()), new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BENSON).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EventList(model.getEventList()), new UserPrefs());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 24,
      "-": 212
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InviteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Attendees;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class InviteCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Event event1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Event event2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Event event3;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        set.add(\"Alice\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        event1 \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        event2 \u003d new EventBuilder().withAttendee(set).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person personChosen \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventChosen \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personName \u003d personChosen.getName().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand inviteCommand \u003d new InviteCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String expectedMessage \u003d String.format(InviteCommand.MESSAGE_INVITE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                personChosen.getName(), eventChosen.getEventName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesChosen \u003d eventChosen.getAttendees();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesUpdated \u003d attendeesChosen.addName(personName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Set\u003cString\u003e setUpdated \u003d attendeesUpdated.attendeesSet;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventUpdated \u003d new EventBuilder(eventChosen).withAttendee(setUpdated).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel.updateEvent(eventChosen, eventUpdated);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandSuccess(inviteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand inviteCommand \u003d new InviteCommand(outOfBoundIndex, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(inviteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand inviteCommand \u003d new InviteCommand(INDEX_FIRST_PERSON, outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(inviteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_invalidBothIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndexPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndexEvent \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand inviteCommand \u003d new InviteCommand(outOfBoundIndexPerson, outOfBoundIndexEvent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(inviteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    //TODO: On Filtered List"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_duplicatePersonInEventList_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand inviteCommand \u003d new InviteCommand(INDEX_FIRST_PERSON, INDEX_THIRD_EVENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(inviteCommand, model, commandHistory, InviteCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand command1 \u003d new InviteCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand command2 \u003d new InviteCommand(INDEX_FIRST_PERSON, INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(command1.equals(command1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand command1Copy \u003d new InviteCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(command1.equals(command1Copy));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(command1.equals(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(command1.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(command1.equals(command2));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Attendees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class RemoveCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person personChosen \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventChosen \u003d model.getFilteredEventList().get(INDEX_THIRD_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personName \u003d personChosen.getName().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_PERSON, INDEX_THIRD_EVENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                personChosen.getName(), eventChosen.getEventName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesChosen \u003d eventChosen.getAttendees();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesUpdated \u003d attendeesChosen.removeName(personName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Set\u003cString\u003e setUpdated \u003d attendeesUpdated.attendeesSet;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventUpdated \u003d new EventBuilder(eventChosen).withAttendee(setUpdated).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel.updateEvent(eventChosen, eventUpdated);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandSuccess(removeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndex, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_PERSON, outOfBoundIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_invalidBothIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndexPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index outOfBoundIndexEvent \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndexPerson, outOfBoundIndexEvent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_personNotInAttendee_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_SECOND_PERSON, INDEX_THIRD_EVENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, RemoveCommand.MESSAGE_ABSENT_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void execute_emptyAttendeeList_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_SECOND_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(removeCommand, model, commandHistory, RemoveCommand.MESSAGE_ATTENDEE_EMPTY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand command1 \u003d new RemoveCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand command2 \u003d new RemoveCommand(INDEX_FIRST_PERSON, INDEX_THIRD_EVENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(command1.equals(command1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand command2Copy \u003d new RemoveCommand(INDEX_FIRST_PERSON, INDEX_THIRD_EVENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(command2.equals(command2Copy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(command1.equals(1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(command1.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(command1.equals(command2));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.EventContainsAttendeePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //Update expectedModel"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person personChosen \u003d expectedModel.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personName \u003d personChosen.getName().toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventContainsAttendeePredicate predicate \u003d new EventContainsAttendeePredicate(personName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedModel.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 11,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            getTypicalEventList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        // multiple departments - last department accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        // missing department prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + VALID_DEPARTMENT_BOB, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + VALID_DEPARTMENT_BOB, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + INVALID_DEPARTMENT_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                Department.MESSAGE_DEPARTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 44,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.InviteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventsUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public void parseCommand_addEvent() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(EventsUtil.getAddEventCommand(event));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        assertEquals(new AddEventCommand(event), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parseCommand_deleteEvent() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                DeleteEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(new DeleteEventCommand(INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parseCommand_invite() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand command \u003d (InviteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                InviteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                + EventsUtil.getEventIndexForInvite(INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(new InviteCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parseCommand_remove() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand command \u003d (RemoveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                RemoveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                        + EventsUtil.getEventIndexForRemove(INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(new RemoveCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 4,
      "jieliangang": 34,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EMAIL_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"0\" + EMAIL_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEPARTMENT_DESC, Department.MESSAGE_DEPARTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                + VALID_PHONE_AMY + INVALID_DEPARTMENT_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        // department"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withDepartment(VALID_DEPARTMENT_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDepartment(VALID_DEPARTMENT_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withDepartment(VALID_DEPARTMENT_BOB).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 10,
      "Jeevz10": 30,
      "-": 181
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InviteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.InviteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class InviteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private InviteCommandParser parser \u003d new InviteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, InviteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, PREFIX_TO + \"1\", expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // no index field specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1\", expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \" \", expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, InviteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"-1 \" + PREFIX_TO + \"1\", expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_TO + \"-1\", expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"-1 \" + PREFIX_TO + \"-1\", expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"0 \" + PREFIX_TO + \"1\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_TO + \"0\", expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"0 \" + PREFIX_TO + \"0\", expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // invalid arguments"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"amy \" + PREFIX_TO + \"birthday\", expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_TO + \"event\", expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index eventIndex \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String userInput \u003d String.valueOf(personIndex.getOneBased())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                + \" \" + PREFIX_TO + String.valueOf(eventIndex.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        InviteCommand expectedCommand \u003d new InviteCommand(personIndex, eventIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemoveCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private RemoveCommandParser parser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, PREFIX_FROM + \"1\", expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // no index field specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1\", expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \" \", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"-1 \" + PREFIX_FROM + \"1\", expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_FROM + \"-1\", expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"-1 \" + PREFIX_FROM + \"-1\", expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"0 \" + PREFIX_FROM + \"1\", expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_FROM + \"0\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"0 \" + PREFIX_FROM + \"0\", expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // invalid arguments"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"amy \" + PREFIX_FROM + \"birthday\", expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_FROM + \"event\", expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index personIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Index eventIndex \u003d INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String userInput \u003d String.valueOf(personIndex.getOneBased())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                + \" \" + PREFIX_FROM + String.valueOf(eventIndex.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        RemoveCommand expectedCommand \u003d new RemoveCommand(personIndex, eventIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/EventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUNCTUAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_LT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(Collections.emptyList(), eventList.getEventList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.resetData(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventList newData \u003d getTypicalEventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(newData, eventList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.hasEvent(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasEvent_eventNotInEventList_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(eventList.hasEvent(EVENT_1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasEvent_eventInEventList_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.addEvent(EVENT_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(eventList.hasEvent(EVENT_1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasEvent_eventWithSameIdentityFieldsInEventList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.addEvent(EVENT_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(EVENT_1).withLocation(VALID_LOCATION_LT)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PUNCTUAL)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(eventList.hasEvent(editedEvent));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void getEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.getEventList().remove(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    // Pure AddressBook Model test methods"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    // Pure EventList Model test methods"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        modelManager.hasEvent(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasEvent_eventNotInEventList_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(modelManager.hasEvent(EVENT_1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        modelManager.getFilteredEventList().remove(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.addEvent(EVENT_1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.addEvent(EVENT_2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventList differentEventList \u003d new EventList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, eventList, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, eventList, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, eventList, userPrefs)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different eventlist -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentEventList, userPrefs)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, eventList, userPrefs)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, eventList, differentUserPrefs)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 34,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/AttendeesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CALVIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class AttendeesTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e attendeesSetOne;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e attendeesSetTwo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e attendeesSetThree;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e attendeesSetNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Attendees attendeesOne;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Attendees attendeesTwo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Attendees attendeesThree;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetOne \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetTwo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetThree \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetNull \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetOne.add(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetTwo.add(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetThree.add(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetThree.add(VALID_NAME_CALVIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesOne \u003d new Attendees(attendeesSetOne);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesTwo \u003d new Attendees(attendeesSetTwo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesThree \u003d new Attendees(attendeesSetThree);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_nullSingleSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Attendees(attendeesSetNull));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_nullMultipleSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Attendees(attendeesSetOne,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                attendeesSetTwo, attendeesSetNull));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Attendees equal to itself"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(attendeesOne.equals(attendeesOne));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesOneCopy \u003d attendeesOne;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Attendees equal to one with same content"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(attendeesOne.equals(attendeesOneCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Attendees not equal to one with different content"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(attendeesOne.equals(attendeesTwo));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(attendeesOne.equals(attendeesThree));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(attendeesTwo.equals(attendeesThree));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasName_presentName_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Attendees has names it contain"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(attendeesOne.hasName(VALID_NAME_AMY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void hasName_absentName_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Attendees does not have names absent in list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(attendeesOne.hasName(VALID_NAME_BOB));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void addName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesTwoNew \u003d attendeesTwo.addName(VALID_NAME_CALVIN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(attendeesTwoNew, attendeesThree);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void removeName() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesThreeNew \u003d attendeesThree.removeName(VALID_NAME_CALVIN);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(attendeesTwo, attendeesThreeNew);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isSetEmpty_attendeeIsEmpty_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Attendees attendeesNull \u003d new Attendees();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(attendeesNull.isSetEmpty());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isSetEmpty_attendeeIsFilled_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(attendeesOne.isSetEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // short description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Dress code: Smart Casual\")); // with special characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Please note that this is a formal event. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                + \"Please refrain from wearing slippers and shorts.\")); // long description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EndTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EndTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_invalidStartTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartTime(invalidTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EndTime.isValidTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EndTime.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EndTime.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EndTime.isValidTime(\"1200\")); //invalid time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EndTime.isValidTime(\"25:00\")); //invalid time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EndTime.isValidTime(\"12:61\")); //invalid time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EndTime.isValidTime(\"2pm\")); //invalid time with characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EndTime.isValidTime(\"00:00\")); // with 4 digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EndTime.isValidTime(\"12:30\")); // with 4 digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EndTime.isValidTime(\"23:59\")); // with 4 digits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventContainsAttendeePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CALVIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "//@@author jieliangang"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventContainsAttendeePredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e attendeesSetOne;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e attendeesSetTwo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e attendeesSetThree;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetOne \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetTwo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetOne.add(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetTwo.add(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendeesSetTwo.add(VALID_NAME_CALVIN);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personNameAlice \u003d \"ALICE\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String personNameBob \u003d \"BOB\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventContainsAttendeePredicate firstPredicate \u003d new EventContainsAttendeePredicate(personNameAlice);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventContainsAttendeePredicate secondPredicate \u003d new EventContainsAttendeePredicate(personNameBob);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventContainsAttendeePredicate firstPredicateCopy \u003d new EventContainsAttendeePredicate(personNameAlice);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void test_attendeesContainName_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //event with attendee size one"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventContainsAttendeePredicate predicate \u003d new EventContainsAttendeePredicate(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withAttendee(attendeesSetOne).build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //event with attendee size more than one"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        predicate \u003d new EventContainsAttendeePredicate(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withAttendee(attendeesSetTwo).build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void test_attendeesContainName_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //empty name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventContainsAttendeePredicate predicate \u003d new EventContainsAttendeePredicate(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withAttendee(attendeesSetOne).build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //person not in attendee"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        predicate \u003d new EventContainsAttendeePredicate(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withAttendee(attendeesSetTwo).build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        predicate \u003d new EventContainsAttendeePredicate(VALID_NAME_CALVIN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withAttendee(attendeesSetOne).build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //no attendee in event"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        predicate \u003d new EventContainsAttendeePredicate(VALID_NAME_CALVIN);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_invalidEventName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventName.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EventName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EventName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EventName.isValidName(\"31st birthday\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EventName.isValidName(\"John\u0027s Birthday!!\")); // with special characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EventName.isValidName(\"David Roger Jackson Ray Jr 2nd\u0027s Birthday\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 38,
      "IcedCoffeeBoy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUNCTUAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_BIRTHDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_LT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_MORNING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_NOON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Set\u003cString\u003e setOne;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        setOne \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        setOne.add(VALID_NAME_ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EVENT_1.isSameEvent(EVENT_1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.isSameEvent(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different location and -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(EVENT_1).withLocation(VALID_LOCATION_LT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PUNCTUAL).withStartTime(VALID_TIME_MORNING)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .withEndTime(VALID_TIME_NOON).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedEvent \u003d new EventBuilder(EVENT_1).withEventName(VALID_EVENT_NAME_BIRTHDAY).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventCopy \u003d new EventBuilder(EVENT_1).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EVENT_1.equals(eventCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(EVENT_1.equals(EVENT_1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(EVENT_2));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(EVENT_1).withEventName(VALID_EVENT_NAME_BIRTHDAY).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(editedEvent));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedEvent \u003d new EventBuilder(EVENT_1).withLocation(VALID_LOCATION_LT).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(editedEvent));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedEvent \u003d new EventBuilder(EVENT_1).withDescription(VALID_DESCRIPTION_PUNCTUAL).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(editedEvent));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different start time -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedEvent \u003d new EventBuilder(EVENT_1).withStartTime(VALID_TIME_MORNING).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(editedEvent));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different end time -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedEvent \u003d new EventBuilder(EVENT_1).withEndTime(VALID_TIME_NOON).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(editedEvent));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedEvent \u003d new EventBuilder(EVENT_1).withDate(VALID_DATE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(EVENT_1.equals(editedEvent));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void addPersonToAttendee() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventToUpdate \u003d new EventBuilder(EVENT_1).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventUpdated \u003d new EventBuilder(EVENT_1).withAttendee(setOne).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //add name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event event \u003d eventToUpdate.addPersonToAttendee(VALID_NAME_ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(event, eventUpdated);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void removePersonFromAttendee() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventToUpdate \u003d new EventBuilder(EVENT_1).withAttendee(setOne).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event eventUpdated \u003d new EventBuilder(EVENT_1).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //remove name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event event \u003d eventToUpdate.removePersonFromAttendee(VALID_NAME_ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(event, eventUpdated);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/LocationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(Location.isValidLocation(\"LT15\")); // short description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(Location.isValidLocation(\"#3 Block 4 (Level 3)\")); // with special characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(Location.isValidLocation(\"21 Lower Kent Ridge Rd, Singapore 119077\")); // long description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/StartTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class StartTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void constructor_invalidStartTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartTime(invalidTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StartTime.isValidTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(StartTime.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(StartTime.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(StartTime.isValidTime(\"1200\")); //invalid time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(StartTime.isValidTime(\"25:00\")); //invalid time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(StartTime.isValidTime(\"12:61\")); //invalid time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(StartTime.isValidTime(\"2pm\")); //invalid time with characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(StartTime.isValidTime(\"00:00\")); // with 4 digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(StartTime.isValidTime(\"12:30\")); // with 4 digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(StartTime.isValidTime(\"23:59\")); // with 4 digits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/UniqueEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PUNCTUAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_LT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(uniqueEventList.contains(EVENT_1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(uniqueEventList.contains(EVENT_1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(EVENT_1).withLocation(VALID_LOCATION_LT).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(uniqueEventList.contains(editedEvent));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvent_nullTargetEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvent(null, EVENT_1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvent_nullEditedEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvent(EVENT_1, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvent(EVENT_1, EVENT_1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvent_editedEventIsSameEvent_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvent(EVENT_1, EVENT_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedUniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvent_editedEventHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(EVENT_1).withLocation(VALID_LOCATION_LT)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PUNCTUAL)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvent(EVENT_1, editedEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedUniqueEventList.add(editedEvent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvent_editedEventHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvent(EVENT_1, EVENT_2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedUniqueEventList.add(EVENT_2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvent(EVENT_1, EVENT_2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void remove_eventDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.remove(EVENT_1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.remove(EVENT_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvents((UniqueEventList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedUniqueEventList.add(EVENT_2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvents(expectedUniqueEventList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.add(EVENT_1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d Collections.singletonList(EVENT_2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvents(eventList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        expectedUniqueEventList.add(EVENT_2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(EVENT_1, EVENT_1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.setEvents(listWithDuplicateEvents);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        uniqueEventList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        // different phone and email and department -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_AMY).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 4,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.events.model.EventListChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        XmlEventStorage eventStorage \u003d new XmlEventStorage(getTempFilePath(\"el\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, eventStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * A Stub class to throw an exception when the save method is called for addressbook"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlEventStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventList tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void eventListReadSave() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "         * {@link XmlEventListStorage} class."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlEventListStorageTest} class."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        EventList original \u003d getTypicalEventList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        storageManager.saveEventList(original);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        ReadOnlyEventList retrieved \u003d storageManager.readEventList().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        assertEquals(original, new EventList(retrieved));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void getEventListFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        assertNotNull(storageManager.getEventListFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * A Stub class to throw an exception when the save method is called for event"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    class XmlEventStorageExceptionThrowingStub extends XmlEventStorage {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        public XmlEventStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        public void saveEventList(ReadOnlyEventList eventList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void handleEventListChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlEventStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        storage.handleEventListChangedEvent(new EventListChangedEvent(new EventList()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 8,
      "IcedCoffeeBoy": 38,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class XmlAdaptedEventTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \"CS@3$%?/\u003e21\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"LOL $$$$ \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2018-9-28\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String INVALID_STARTTIME \u003d \"25:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String INVALID_ENDTIME \u003d \"25:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \"G!0 home sleep\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d \"CS3244\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Can i sleep \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String VALID_DATE \u003d \"2018-09-28\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String VALID_STARTTIME \u003d \"09:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String VALID_ENDTIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"Go home sleep\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_validEventDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(EVENT_1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        assertEquals(EVENT_1, event.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(null, VALID_DESCRIPTION, VALID_DATE, VALID_STARTTIME, VALID_ENDTIME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                VALID_LOCATION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_EVENT_NAME, null, VALID_DATE, VALID_STARTTIME, VALID_ENDTIME,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                VALID_LOCATION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_DESCRIPTION, INVALID_DATE, VALID_STARTTIME, VALID_ENDTIME,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(DateTimeParseException.class, event::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_DESCRIPTION, null, VALID_STARTTIME, VALID_ENDTIME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_DESCRIPTION, VALID_DATE, INVALID_STARTTIME, VALID_ENDTIME,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String expectedMessage \u003d StartTime.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_DESCRIPTION, VALID_DATE, null, VALID_ENDTIME,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_DESCRIPTION, VALID_DATE, VALID_STARTTIME, INVALID_ENDTIME,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String expectedMessage \u003d EndTime.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_DESCRIPTION, VALID_DATE, VALID_STARTTIME, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        VALID_LOCATION);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_DESCRIPTION, VALID_DATE, VALID_STARTTIME, VALID_ENDTIME,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private static final String INVALID_DEPARTMENT \u003d \"dep@rtment\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private static final String VALID_DEPARTMENT \u003d BENSON.getDepartment().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            VALID_DEPARTMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            VALID_DEPARTMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            VALID_DEPARTMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, INVALID_DEPARTMENT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            VALID_DEPARTMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                    invalidTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e validTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e validTagsDup \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Equal to itself"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(validTags.equals(validTags));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Equal to duplicate"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(validTags.equals(validTagsDup));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Not equal to different type"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(validTags.equals(\"1\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 17,
      "Jeevz10": 20,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Equals itself"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertTrue(dataFromFile.equals(dataFromFile));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // Different type"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertFalse(dataFromFile.equals(\"1\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 14,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "public class XmlSerializableEventListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableEventListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsEventList.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventEventList.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventEventList.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlSerializableEventList dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_EVENTS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                XmlSerializableEventList.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        EventList eventListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        EventList typicalEventsEventList \u003d TypicalEvents.getTypicalEventList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        assertEquals(eventListFromFile, typicalEventsEventList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlSerializableEventList dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                XmlSerializableEventList.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        XmlSerializableEventList dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_EVENT_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "                XmlSerializableEventList.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        thrown.expectMessage(XmlSerializableEventList.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IcedCoffeeBoy": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        descriptor.setDepartment(person.getDepartment());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * Sets the {@code Department} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public EditPersonDescriptorBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        descriptor.setDepartment(new Department(department));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 10,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Attendees;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS2113 Practical Exam\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Fun\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2018-09-18\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"16:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"LT15\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private StartTime startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    private EndTime endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    private Attendees attendees;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        date \u003d LocalDate.parse(DEFAULT_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        startTime \u003d new StartTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        endTime \u003d new EndTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendees \u003d new Attendees();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventName \u003d eventToCopy.getEventName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        date \u003d eventToCopy.getDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        startTime \u003d eventToCopy.getStartTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        endTime \u003d eventToCopy.getEndTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        location \u003d eventToCopy.getLocation();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendees \u003d eventToCopy.getAttendees();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Sets the {@code EventName} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventBuilder withEventName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.eventName \u003d new EventName(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Sets the {@code Address} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     * Sets the {@code Address} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EventBuilder withDate(String date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Sets the {@code LocalDate} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EventBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.startTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Sets the {@code LocalDate} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "    public EventBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        this.endTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Sets the {@code Location} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Sets the {@code Attendees} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public EventBuilder withAttendee(Set\u003cString\u003e attendeesSet) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        this.attendees \u003d new Attendees(attendeesSet);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Event(eventName, description, date, startTime, endTime, location, attendees);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 98,
      "IcedCoffeeBoy": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "    public static String getAddEventCommand(Event event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "perrythewang"
        },
        "content": "        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static String getEventDetails(Event event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        sb.append(PREFIX_NAME + event.getEventName().fullName + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + event.getDescription().value + \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        sb.append(PREFIX_LOCATION + event.getLocation().value + \" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        sb.append(PREFIX_DATE + event.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        sb.append(PREFIX_START_DATE + event.getStartTime().startTime + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "        sb.append(PREFIX_END_DATE + event.getEndTime().endTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns the part of command string for the given {@code event}\u0027s index for InviteCommand."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static String getEventIndexForInvite(Index index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return PREFIX_TO + String.valueOf(index.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns the part of command string for the given {@code event}\u0027s index for RemoveCommand."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static String getEventIndexForRemove(Index index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return PREFIX_FROM + String.valueOf(index.getOneBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns formatted string based on LocalDate."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static String formatDate(LocalDate date) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String formattedString \u003d date.format(formatter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String trimmedFormattedString \u003d formattedString.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return trimmedFormattedString;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "perrythewang": 3,
      "jieliangang": 54,
      "IcedCoffeeBoy": 5,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.ReadOnlyEventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData, ReadOnlyEventList newEventList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    // Implemented EventList Methods go here"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ReadOnlyEventList getEventList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void addEvent(Event person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void removePersonFromAllEvents(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean canUndoEventList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public boolean canRedoEventList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void undoEventList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void redoEventList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void commitEventList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void sortByStartTime() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void sortByEndTime() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public void sortByDate() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jieliangang": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final String DEFAULT_DEPARTMENT \u003d \"Head\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private Department department;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        department \u003d new Department(DEFAULT_DEPARTMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        department \u003d personToCopy.getDepartment();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     * Sets the {@code Department} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public PersonBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        this.department \u003d new Department(department);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        return new Person(name, phone, email, address, department, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 14,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        sb.append(PREFIX_DEPARTMENT + person.getDepartment().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        descriptor.getDepartment().ifPresent(department -\u003e sb.append(PREFIX_DEPARTMENT).append(department.value)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 4,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Attendees;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.EndTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "import seedu.address.model.event.StartTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " * Returns test event list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jieliangang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Event EVENT_1 \u003d new Event("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new EventName(\"Test Event 1\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new Description(\"Test Description 1\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            LocalDate.of(2018, 9, 18),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new StartTime(\"12:00\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new EndTime(\"16:00\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new Location(\"Test Location 1\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Event EVENT_2 \u003d new Event("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new EventName(\"Test Event 2\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new Description(\"Test Description 2\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            LocalDate.of(2018, 9, 18),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new StartTime(\"12:00\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new EndTime(\"21:00\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new Location(\"Test Location 2\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Event EVENT_3 \u003d new Event("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new EventName(\"Test Event 3\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new Description(\"Test Description 3\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            LocalDate.of(2018, 9, 18),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new StartTime(\"09:00\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IcedCoffeeBoy"
        },
        "content": "            new EndTime(\"21:00\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            new Location(\"Test Location 3\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns test event with attendees."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Event eventwithAttendee() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Set\u003cString\u003e attendee \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        attendee.add(\"Alice Pauline\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return new Event("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EventName(\"Test Event 3\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new Description(\"Test Description 3\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                LocalDate.of(2018, 9, 18),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new StartTime(\"09:00\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new EndTime(\"21:00\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new Location(\"Test Location 3\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                new Attendees(attendee));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Returns test event list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static EventList getTypicalEventList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.addEvent(EVENT_1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.addEvent(EVENT_2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        eventList.addEvent(eventwithAttendee());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 68,
      "IcedCoffeeBoy": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jieliangang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Index INDEX_THIRD_EVENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withPhone(\"94351253\").withDepartment(\"Admin\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withPhone(\"98765432\").withDepartment(\"Admin\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withDepartment(\"Publicity\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withDepartment(\"Admin\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withDepartment(\"Safety\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withDepartment(\"Programmes\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withDepartment(\"Admin\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withDepartment(\"Marketing\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withDepartment(\"Finance\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDepartment(VALID_DEPARTMENT_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDepartment(VALID_DEPARTMENT_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "    public static final Person BOB_DUMMY \u003d new PersonBuilder().withName(VALID_NAME_ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDepartment(VALID_DEPARTMENT_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "Jeevz10": 22,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "            builder.append(\"\u003cdepartment\u003ed\u003c/department\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 1,
      "-": 124
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + DEPARTMENT_DESC_AMY + \"   \" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        /* Case: add a duplicate person except with different department -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withDepartment(VALID_DEPARTMENT_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        /* Case: missing department -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        /* Case: invalid department -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(command, Department.MESSAGE_DEPARTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + DEPARTMENT_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeevz10": 38,
      "-": 235
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Calls {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Asserts that the previously selected card is now deselected"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "     * Asserts that the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 4,
      "-": 254
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB_DUMMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandSuccess(command, index, BOB_DUMMY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "         *   and department -\u003e edited"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_BENSON).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withDepartment(VALID_DEPARTMENT_AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(editedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandSuccess(command, index, BOB_DUMMY, index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        /* Case: invalid department -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + INVALID_DEPARTMENT_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                Department.MESSAGE_DEPARTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "                + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jeevz10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 23,
      "Jeevz10": 29,
      "-": 221
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        /*getBrowserPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        assertHelpWindowNotOpen(); */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jieliangang"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jieliangang": 3,
      "-": 103
    }
  }
]
