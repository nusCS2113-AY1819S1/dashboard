[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d Task Book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-W13-3/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* This is a desktop Task Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is an app for busy students to *manage their daily tasks* and ultimately, *lead a more productive life*."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* If you can type fast, TB can get your management of tasks done *faster than traditional paper notebooks or a mobile application*."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* Some parts of this sample application were inspired by the excellent https://github.com/se-edu/addressbook-level4[Address Book (Level 4)] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "_se-edu_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chelseyong": 7,
      "-": 30
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Task Book was developed by the team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Chelsey Ong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::chelseyong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "{empty} [https://github.com/chelseyong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Responsibilities: Task features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Jeremy Aw"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::jeremyinelysium.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "{empty}[http://github.com/jeremyinelysium[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Responsibilities: Milestone features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Beh Kha Sim"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::emobeany.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": "{empty}[https://github.com/emobeany[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Responsibilities: Deadline features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Chan Chun Cheong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::chanchuncheong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "{empty}[https://github.com/ChanChunCheong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Responsibilities: Task \u0026 Deadline features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 1,
      "-": 31,
      "chelseyong": 14,
      "emobeany": 1,
      "ChanChunCheong": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "To find this particular file, refer to Figure 1 for guidance."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ".Subdirectories of MainApp"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::MainApp_directory.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass. Refer to Figure 2."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ".Running all tests"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::RunAllTests.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::SDforDeleteTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::SDforDeleteTaskEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ".  `Logic` uses the `TaskBookParser` class to parse the user command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a task) and/or raise events."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "image::DeleteTaskSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* stores the Task Book data."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "// +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* can save the Task Book data in xml format and read it back."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedTaskBook`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "It extends `TaskBook` with an undo/redo history, stored internally as an `taskBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `VersionedTaskBook#commit()` -- Saves the current task book state in its history."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `VersionedTaskBook#undo()` -- Restores the previous task book state from its history."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `VersionedTaskBook#redo()` -- Restores a previously undone task book state from its history."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTaskBook()`, `Model#undoTaskBook()` and `Model#redoTaskBook()` respectively."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTaskBook` will be initialized with the initial task book state, and the `currentStatePointer` pointing to that single task book state."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th task in the task book. The `delete` command calls `Model#commitTaskBook()`, causing the modified state of the task book after the `delete 5` command executes to be saved in the `taskBookStateList`, and the `currentStatePointer` is shifted to the newly inserted task book state."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Step 3. The user executes `add t/Do math homework ...` to add a new task. The `add` command also calls `Model#commitTaskBook()`, causing another modified task book state to be saved into the `taskBookStateList`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "If a command fails its execution, it will not call `Model#commitTaskBook()`, so the task book state will not be saved into the `taskBookStateList`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous task book state, and restores the task book to that state."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial task book state, then there are no previous task book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the task book to that state."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "If the `currentStatePointer` is at index `taskBookStateList.size() - 1`, pointing to the latest task book state, then there are no undone task book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the task book, such as `list`, will usually not call `Model#commitTaskBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `taskBookStateList` remains unchanged."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTaskBook()`. Since the `currentStatePointer` is not pointing at the end of the `taskBookStateList`, all task book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/Do math homework ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire task book."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of task book states."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedTaskBook`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "////"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "////"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* Students who need to manage a significant number of daily tasks"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "*Value proposition*: manage daily tasks faster than Google calendar/handwritten notebook and become more productive"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "|`* * *` |forgetful student |add new task |keep track of my workload"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "|`* * *` |efficient student |complete a task |keep track of my incomplete tasks"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "|`* * *` |tidy student |delete a task |remove tasks that I do not intend to complete"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "|`* * *` |organized student |sort tasks by decreasing importance/categorise in module codes| complete tasks with more urgent deadlines first/ focus on modules with heavier workloads"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |busy student |defer deadlines |allow for a more flexible schedule when workload becomes too heavy"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |flexible student |remove self imposed deadlines |shift my priorities to other tasks"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "emobeany"
        },
        "content": "|`* * *` |unorganised student |select a date |add/delete/complete tasks for that particular day"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |objective student |break up my task into smaller tasks |manage them more effectively"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "|`* * *` |targeted student |track the productivity of how fast tasks are being completed |learn more about my studying habits and work more effectively"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "(For all use cases below, the *System* is the `TaskBook` and the *Actor* is the `student`, unless specified otherwise)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Use case: Add new task"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "1.  Student selects the deadline for a task"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "2.  TB updates the selected date."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "3.  Student requests to add a new task with its title, description, priority level and expected hours to complete"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "4.  TB checks for the validity of command and adds the task to the list"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* 3a. Student enters an invalid priority level for the command"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 3a1. TB outputs an error message."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* 3b. Student enters a duplicated task"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 3b1. TB outputs an error message"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add milestone"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "1. Student requests to add a new milestone"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "2. TB returns a list of tasks entered previously"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "3. Student selects the task to add the milestone to"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "4. TB asks for the milestone description and rank"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "5. Student provides the milestone description and rank"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "6. TB adds the milestone to the selected task"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. Task Book is currently empty as no tasks has been added yet."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. TB outputs error message"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* 5a. Student enters an milestone description and rank with invalid format"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "** 5a1. TB requests for milestone description and rank with valid format"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "** 5a2. Student enters milestone description and rank with valid format"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 6."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "\u003d\u003d\u003d Use case: Complete task"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "1.  Student selects the date of completed task"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "2.  TB updates the selected date."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "3.  Student requests to complete the task by providing its index and the number of hours taken to complete it"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "4.  TB checks for validity of the index and marks the task as completed"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "+"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* 3a. Student provided an invalid index or number of hours"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 3a1. TB requests for a valid command again"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 3a2. Student returns a new Complete command"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "+"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* 3a. Task is already completed"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 3a1. TB returns an info message for user."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "+"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "\u003d\u003d\u003d Use case: Sort tasks"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "1.  Student requests to sort his or her tasks for the day"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "2.  TB asks for the criteria to sort the tasks."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "3.  Student returns the method to sort tasks"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "4.  TB checks for its validity and display the sorted task list"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "+"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* 1b. Student requested to sort an empty taskbook"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 1b1. TB outputs an error message"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "+"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* 3a. Student provided an invalid sorting criteria"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 3a1. TB requests for a valid sorting criteria"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 3a2. Student enters a new criteria"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "+"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Defer deadlines"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "1. Student requests to defer deadline for an existing task to a requested date"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "2. TB sets the new deadline for the existing task"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. Student wants to defer a deadline for a task without deadline"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "** 1b1. TB outputs an error message"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "emobeany"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete task"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "1. Student requests to delete a task by providing its index"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "2. TB removes deadline from the task"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "+"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. Student provides an invalid index of the task"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "** 1a1. TB outputs an error message"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "emobeany"
        },
        "content": "\u003d\u003d\u003d Use case: Select a date"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "1. Student requests to select date required"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "emobeany"
        },
        "content": "2. TB checks for its validity and changes to the required date"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* 1a. Date entered by the student is not valid e.g. d/Tues w/5 m/9"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "** 1a1. TB prompts student to enter a correct date"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ".  Should be able to respond within 2 seconds."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ".  Will be offered free for students."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ".  Not built to contain sensitive information due to lack of password protection."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ".  Tasks dated as far as 10 years ago may be difficult to retrieve, unless data is backed up in the cloud storage."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 6,
      "-": 578,
      "chelseyong": 86,
      "emobeany": 4,
      "ChanChunCheong": 20
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Task Book is for students who prefer to use a desktop app for managing their daily tasks and ultimately, lead a more productive life. More importantly, AB is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB can get your management of tasks done faster than traditional paper notebooks or a mobile application. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* *`list`* : lists all tasks for that day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add t/TASK`, `TASK` is a parameter which can be used as `add t/Do homework`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "//* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Adds a task with its module code, title, description, priority level (low, medium, high) and the number of hours (integers only) expected to complete this task, to the task book +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Format: `add c/MODULE_CODE t/TITLE d/DESCRIPTION p/PRIORITY h/HOURS`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `add c/CS2113 t/Complete 2113 Tutorial d/with code done p/high h/1`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a milestone: `add_milestone`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a milestone to selected task from the task book +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Format: `add_milestone i/INDEX m/MILESTONE r/RANK...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `add_milestone i/1 m/Complete Sections 8.1 to 8.5 r/1`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "\u003d\u003d\u003d Complete a task: `complete`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Complete a task in the task book by providing its index and the actual number of hours taken to complete the task +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Format: `complete i/INDEX h/HOURS_TO_COMPLETE`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `complete i/1 h/2`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "\u003d\u003d\u003d Sort the taskbook: `sort`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Sort the tasks in the task book by certain method +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Format: `sort s/METHOD`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `sort s/priority`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deferring a deadline: `deadline`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Defers a deadline for a task +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `defer [INDEX] de/deadline`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* `defer 1 de/04012018`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Delete a task : `delete`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Removes a task from the task book"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Format: `delete [INDEX]`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* `delete 1`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "emobeany"
        },
        "content": "\u003d\u003d\u003d Selecting a date: `select`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "emobeany"
        },
        "content": "Chooses a particular date. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "emobeany"
        },
        "content": "Format: `select dd/DAY [mm/MONTH] [yyyy/YEAR]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "emobeany"
        },
        "content": "* `select dd/1`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "emobeany"
        },
        "content": "* `select dd/1 mm/1`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "emobeany"
        },
        "content": "* `select dd/1 mm/1 yyyy/2018`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003d\u003d\u003d Tracking productivity : `track`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Tracks your productivity for all completed tasks, by returning an average productivity (in percentage). +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Format: `track`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `complete`, `sort`, `add_milestone`, `defer_deadline`, `delete`, and `clear`)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* *Add task* : `add t/ACTION d/DESCRIPTION p/PRIORITY_LEVEL h/HOURS_TO_COMPLETE` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "e.g. `add t/Complete 2113 Tutorial d/with code done p/high h/2`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* *Add milestone* : `add_milestone t/TASK_TITLE m/MILESTONE r/RANK...` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add_milestone t/Complete CS2113 W8 LO m/Complete Sections 8.1 to 8.5 r/1`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* *Complete* : `complete i/INDEX h/HOURS_COMPLETED`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "e.g. `complete i/1 h/2`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* *Defer deadline* : `defer_deadline INDEX de/DEADLINE` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "e.g. `defer_deadline 1 de/01012018`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* *Delete* : `delete INDEX`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "e.g. `delete 1`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "* *Select* : `select dd/DAY mm/MONTH yyyy/YEAR` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "emobeany"
        },
        "content": "e.g. `select dd/1 mm/1 yyyy/2018`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "-": 179,
      "chelseyong": 34,
      "emobeany": 7,
      "ChanChunCheong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.TaskBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlTaskBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskBookStorage taskBookStorage \u003d new XmlTaskBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(taskBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyTaskBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyTaskBook initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readTaskBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 208,
      "chelseyong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_COMPLETED_TASK \u003d \"The task has completed already...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_ZERO_HOURS_COMPLETION \u003d \"It is impossible to complete it in 0 hours ;)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_MAX_HOURS \u003d \"That seems like a longggg time to complete this task... \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \"Please enter a smaller number.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "chelseyong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddMilestoneChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "//@@author JeremyInElysium"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "public class AddMilestoneChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public final ReadOnlyTaskBook data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public AddMilestoneChangedEvent(ReadOnlyTaskBook data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return \"number of tasks \" + data.getTaskList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.AddMilestoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeferDeadlineCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectDeadlineCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.logic.commands.SortTaskCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.TrackProductivityCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.TaskBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TaskBookParser taskBookParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author chelseyong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // need to add the commands into the list\u003cCommandParser\u003e commands in TaskBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        taskBookParser \u003d new TaskBookParser(new AddTaskCommand(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new ClearCommand(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new CompleteTaskCommand(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new DeferDeadlineCommand(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new DeleteCommand(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new ListCommand(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new TrackProductivityCommand(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new SelectDeadlineCommand(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new SortTaskCommand(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new HelpCommand(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new ExitCommand(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new HistoryCommand(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new UndoCommand(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new RedoCommand(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new AddMilestoneCommand()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            Command command \u003d taskBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "chelseyong": 36,
      "ChanChunCheong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMilestoneCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.logic.parser.AddMilestoneCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Milestone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "//@@author JeremyInElysium"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " * Adds a milestone to a task in the taskbook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "public class AddMilestoneCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_milestone\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New milestone added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"This task does not exist in the task book\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RANK \u003d \"Invalid rank entered.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds milestone(s) to selected task. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + PREFIX_MILESTONE + \"MILESTONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + PREFIX_RANK + \"RANK \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + PREFIX_MILESTONE + \"Complete Sections 8.1 to 8.5 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            + PREFIX_RANK + \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private final Milestone toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Creates a AddMilestoneCommand to serve the purpose of the LogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public AddMilestoneCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        toAdd \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Creates a AddMilestoneCommand to add the specified {@code Milestone}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public AddMilestoneCommand(Index index, Milestone milestone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        requireNonNull(milestone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        toAdd \u003d milestone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        //TODO: ensure rank of milestone that is being added does not collide with existing milestones\u0027 ranks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if(taskToEdit.milestoneSet.size() \u003c\u003d rank) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RANK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        Task editedTask \u003d taskToEdit.addMilestone(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        //model.addMilestone(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return new AddMilestoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 85,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MAX_HOURS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ZERO_HOURS_COMPLETION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddTaskCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "// @@author chelseyong"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * Adds a task to the task book"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class AddTaskCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_HOURS + \"HOURS \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_TITLE + \"Complete code refactoring \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"refer to notes \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_PRIORITY + \"high \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_HOURS + \"2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final int MAX_HOURS_TO_COMPLETE \u003d 24;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public AddTaskCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        toAdd \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } else if (toAdd.getExpectedNumOfHours() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(MESSAGE_ZERO_HOURS_COMPLETION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } else if (toAdd.getExpectedNumOfHours() \u003e\u003d MAX_HOURS_TO_COMPLETE) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(MESSAGE_MAX_HOURS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        toAdd.setDeadline(model.getDeadline());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "chelseyong": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * CommandParser is able to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * pass in arguments"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public interface CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Command parse(String arguments) throws ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public String getCommandWord();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "chelseyong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompleteTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MAX_HOURS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.AddTaskCommand.MAX_HOURS_TO_COMPLETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.CompleteTaskCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * Completes a task in the Task Book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class CompleteTaskCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"complete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \": Completes the task identified by the index number used in the displayed task list,\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \" under a certain number of hours\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \" INDEX(must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + PREFIX_HOURS + \"HOURS\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_HOURS + \"2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task completed: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final int completedNumOfHours;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CompleteTaskCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // Null so that it can be initialized in LogicManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // Check in JUnit test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        targetIndex \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        completedNumOfHours \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Creates an CompleteTaskCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CompleteTaskCommand(Index targetIndex, int completedNumOfHours) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d completedNumOfHours;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } else if (completedNumOfHours \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ZERO_HOURS_COMPLETION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } else if (completedNumOfHours \u003e\u003d MAX_HOURS_TO_COMPLETE) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(MESSAGE_MAX_HOURS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (taskToComplete.isCompleted()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_COMPLETED_TASK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.completeTask(taskToComplete, completedNumOfHours);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task completedTask \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, completedTask));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                || (other instanceof CompleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CompleteTaskCommand) other).targetIndex));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new CompleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "chelseyong": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeferDeadlineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.DeferDeadlineCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "//@@author ChanChunCheong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " * Defer deadline of a specific task in the taskbook."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "public class DeferDeadlineCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"defer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + \": Defers the deadline of the selected task in the taskbook. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + \"Existing deadline will be overwritten by the input. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + PREFIX_DEADLINE + \"deadline \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + PREFIX_DEADLINE + \"04011996\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    + PREFIX_DAY + \"DAY\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    + PREFIX_MONTH + \"MONTH\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    + PREFIX_YEAR +  \"YEAR \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    + \"Example: \" + COMMAND_WORD + \"1\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    + PREFIX_DAY + \"01\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    + PREFIX_MONTH + \"01\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    + PREFIX_YEAR + \"2018\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINE \u003d \"The date selected does not exist\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_TASK \u003d \"This task does not exist in the task book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Date deferred for task: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Defer deadline command not implemented yet\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private final Index taskIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public DeferDeadlineCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // Null so that it can be initialized in LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // Check in JUnit test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        taskIndex \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        deadline \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Creates an DeferDeadlineCommand to add the specified {@code Task \u0026 @code Deadline}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public DeferDeadlineCommand(Index taskIndex, Deadline deadline) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (taskIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_TASK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        Task taskToDefer \u003d lastShownList.get(taskIndex.getZeroBased()); // get the task from the filteredtasklist;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        model.deferTaskDeadline(taskToDefer, deadline);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, taskToDefer));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return new DeferDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "emobeany": 1,
      "ChanChunCheong": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class DeleteCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // Null so that it can be initialized in LogicManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // Check in JUnit test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        targetIndex \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "chelseyong": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectDeadlineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.SelectDeadlineCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//@@author emobeany"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": " * Selects a date as a deadline for tasks to be added to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class SelectDeadlineCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Selects a date. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + PREFIX_MONTH + \"MONTH \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + PREFIX_DAY + \"01 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + PREFIX_MONTH + \"01 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + PREFIX_YEAR + \"2018 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New date selected: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINE \u003d \"The date selected does not exist\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private final Deadline toSelect;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Creates a SelectDeadline to select the specified {@code Deadline}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public SelectDeadlineCommand (Deadline deadline) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        toSelect \u003d deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public SelectDeadlineCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        toSelect \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        if (!model.validDeadline(toSelect)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DEADLINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        model.selectDeadline(toSelect);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toSelect));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                || (other instanceof SelectDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                \u0026\u0026 toSelect.equals(((SelectDeadlineCommand) other).toSelect));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return new SelectDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "emobeany": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.logic.parser.SortTaskCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "//@@author ChanChunCheong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " * Sorts the tasks list in the task book based on the method chosen"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "public class SortTaskCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sort the tasks in the task book by preferred way. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + PREFIX_SORT + \"METHOD \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            + PREFIX_SORT + \"modules\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"SortTask command not implemented yet\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"method: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sort task based on: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private final String method;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public SortTaskCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // Null so that it can be initialized in LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // Check in JUnit test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        method \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Creates an DeferDeadlineCommand to add the specified {@code Task \u0026 @code Deadline}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public SortTaskCommand(String method) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(method);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.method \u003d method.toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        //throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        //throw new CommandException(String.format(MESSAGE_ARGUMENTS, method));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (method.equals(\"modules\") || method.equals(\"deadlines\") || method.equals(\"priority\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                || method.equals(\"title\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            model.sortTask(method);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, method));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            //if the methods called are not within the list of methods called then throw CommandException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return new SortTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (!(other instanceof SortTaskCommand)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        SortTaskCommand e \u003d (SortTaskCommand) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return method.equals(e.method);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanChunCheong": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TrackProductivityCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * Tracks the productivity of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * for the previous week based on hours"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TrackProductivityCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"track\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Tracks your productivity.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Recent productvity: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_NO_COMPLETED_TASK \u003d \"There are no completed tasks yet. Start working!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //private static final Logger logger \u003d LogsCenter.getLogger(TrackProductivityCommand.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // filter out Completed tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.trackProductivity();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ObservableList\u003cTask\u003e tasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new CommandException(MESSAGE_NO_COMPLETED_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        double productivity \u003d calculateProductivity(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String result \u003d Integer.toString((int) (productivity * 100)) + \" %\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, result));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new TrackProductivityCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Calculates the overall productivity for completed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @return the average productivity"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public double calculateProductivity(ObservableList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        double averageProductivity;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        double totalProductivity \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            double taskProductivity \u003d (double) task.getExpectedNumOfHours() / task.getCompletedNumOfHours();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            totalProductivity +\u003d taskProductivity;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //if (totalProductivity \u003d\u003d 0)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        averageProductivity \u003d totalProductivity / tasks.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return averageProductivity;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * Represents an error which occurs during execution of a Command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "chelseyong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMilestoneCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.logic.commands.AddMilestoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.Milestone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.MilestoneDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.Rank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "//@@author JeremyInElysium"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " * Parses input arguments and creates a new AddMilestoneCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "public class AddMilestoneCommandParser implements Parser\u003cAddMilestoneCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Returns true if none of the prefixes contain empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * {@code ArgumentMultiMap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public AddMilestoneCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_INDEX, PREFIX_MILESTONE, PREFIX_RANK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_MILESTONE, PREFIX_RANK)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMilestoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        String milestoneDescription \u003d ParserUtil.parseMilestoneDescription("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                argMultimap.getValue(PREFIX_MILESTONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        String rank \u003d ParserUtil.parseRank(argMultimap.getValue(PREFIX_RANK).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        Milestone milestone \u003d new Milestone(new MilestoneDescription(milestoneDescription), new Rank(rank));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return new AddMilestoneCommand(index, milestone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 47,
      "chelseyong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddTaskCommandParser.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public AddTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_MODULE_CODE, PREFIX_TITLE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        PREFIX_PRIORITY, PREFIX_HOURS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_TITLE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                PREFIX_PRIORITY, PREFIX_HOURS)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        PriorityLevel priority \u003d ParserUtil.parsePriorityLevel(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int expectedNumOfHours \u003d ParserUtil.parseHours(argMultimap.getValue(PREFIX_HOURS).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task task \u003d new Task(moduleCode, title, description, priority, expectedNumOfHours);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "chelseyong": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Prefix PREFIX_HOURS \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MILESTONE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_RANK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final Prefix PREFIX_SORT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix (\"dd/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix (\"mm/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix (\"yyyy/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "chelseyong": 4,
      "ChanChunCheong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CompleteTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * Parses input arguments and creates a new CompleteTaskCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class CompleteTaskCommandParser implements Parser\u003cCompleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompleteTaskCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * and returns an CompleteTaskCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public CompleteTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_INDEX, PREFIX_HOURS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_HOURS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int expectedNumOfHours \u003d ParserUtil.parseHours(argMultimap.getValue(PREFIX_HOURS).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new CompleteTaskCommand(index, expectedNumOfHours);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "chelseyong": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeferDeadlineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeferDeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "//@@ChanChunCheong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeferDeadlineCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeferDeadlineCommandParser implements Parser\u003cDeferDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!arePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    String title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    PriorityLevel priority \u003d ParserUtil.parsePriorityLevel(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeferDeadlineCommand}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a {@code DeferDeadlineCommand} object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeferDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    DeferDeadlineCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String deadlineInput \u003d argMultimap.getValue(PREFIX_DEADLINE).orElse(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline deadline \u003d new Deadline(deadlineInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DeferDeadlineCommand(index, deadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "emobeany": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_INVALID_HOURS \u003d \"Hour(s) must be an integer!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author chelseyong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String hours}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * If hours is not an integer or is too big to be an integer,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static int parseHours(String hours) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String trimmedHours \u003d hours.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedHours)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_HOURS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return Integer.parseInt(trimmedHours);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String moduleCode}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static String parseModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return trimmedModuleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Parses a {@code String deadline} into an {@code Deadline}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //TODO prevent 1/1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static PriorityLevel parsePriorityLevel(String priority) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (!PriorityLevel.isValidPriorityLevel(trimmedPriority)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new ParseException(PriorityLevel.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //        return new PriorityLevel(trimmedPriority);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new PriorityLevel(trimmedPriority);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String title}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static String parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return trimmedTitle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String description}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static String parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return trimmedDescription;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //@@author emobeany"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String day}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static String parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return trimmedDay;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String month}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static String parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return trimmedMonth;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String year}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static String parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return trimmedYear;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    //@@author JeremyInElysium"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String milestoneDescription}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static String parseMilestoneDescription(String milestoneDescription) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        requireNonNull(milestoneDescription);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        String trimmedMilestoneDescription \u003d milestoneDescription.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return trimmedMilestoneDescription;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed from {@code String rank}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static String parseRank(String rank) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        requireNonNull(rank);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        String trimmedRank \u003d rank.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return trimmedRank;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 20,
      "-": 29,
      "chelseyong": 75,
      "emobeany": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectDeadlineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//@@author emobeany"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": " * Parses input arguments and creates a new SelectDeadlineCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class SelectDeadlineCommandParser implements Parser\u003cSelectDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public SelectDeadlineCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline deadlineWithoutPrefixes \u003d parseWithoutPrefixes(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        if (deadlineWithoutPrefixes !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return new SelectDeadlineCommand(deadlineWithoutPrefixes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                    SelectDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline deadline \u003d new Deadline(day, month, year);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return new SelectDeadlineCommand(deadline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Alternative parsing method:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * @param userInput without date, month and year prefixes"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * @return the parsed Deadline"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline parseWithoutPrefixes(String userInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return ParserUtil.parseDeadline(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "emobeany": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.logic.commands.SortTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "//@@ChanChunCheong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " * Parses input arguments and creates a new SortTaskCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "public class SortTaskCommandParser implements Parser\u003cSortTaskCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public SortTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SORT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    SortTaskCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        String method \u003d argMultimap.getValue(PREFIX_SORT).orElse(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        //method cannot be null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (method.equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return new SortTaskCommand(method);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanChunCheong": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskBookParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cCommandParser\u003e commands;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandsUsed and keeps them in an"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * array {@code commands} (to enforce OCP)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskBookParser(CommandParser... commandsUsed) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        for (CommandParser command: commandsUsed) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            commands.add(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Command commandToReturn \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (CommandParser command : commands) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (command.getCommandWord().equals(commandWord)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                commandToReturn \u003d command.parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (commandToReturn \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandToReturn;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "chelseyong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import seedu.address.model.task.SortTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyTaskBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Deadline PLACEHOLDER_DEADLINE \u003d new Deadline(\"1/1/2018\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Deadline currentDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyTaskBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyTaskBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task identity of {@code editedPerson} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateTask(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.setTask(target, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void completeTask(Task key, int hours) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        tasks.complete(key, hours);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author ChanChunCheong"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Defer {@code key} previous deadline with (@code deadline) from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void deferDeadline(Task key, Deadline deadline) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        tasks.defer(key, deadline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the date for Task Book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Update the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selectDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: @emobeany handle cases where year or month is not specified"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        currentDate \u003d deadline;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@ ChanChunCheong"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Sorts the Task Book based on the method chosen."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Update the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void sortTask(String method) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(method);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        SortTaskList sortList \u003d new SortTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        ObservableList\u003cTask\u003e copyList \u003d sortList.sortTask(obtainModifiableObservableList(), method);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        UniqueTaskList updateList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        updateList.setTasks(copyList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        tasks.setTasks(updateList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public boolean validDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return Deadline.isValidDeadline(deadline.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (currentDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            currentDate \u003d PLACEHOLDER_DEADLINE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return currentDate;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public ObservableList\u003cTask\u003e obtainModifiableObservableList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return tasks.obtainObservableList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tasks.equals(((AddressBook) other).tasks));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 1,
      "-": 130,
      "chelseyong": 6,
      "emobeany": 7,
      "ChanChunCheong": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyTaskBook newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyTaskBook getAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    void deferTaskDeadline(Task task, Deadline deadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task must exist in the task book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Completes the given task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task must exist in the task book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    void completeTask(Task target, int hours);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code task} must not already exist in the task book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //@@author emobeany"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /** Selects the input date as deadline.*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    void selectDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author ChanChunCheong"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    void sortTask(String method);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /** Gets deadline previously selected from the TaskBook.*/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    Deadline getDeadline();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /** Returns true if input deadline is valid.*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    boolean validDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * {@code target} must exist in the task book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    void updateTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Returns true if the model has previous task book states to restore."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    boolean canUndoTaskBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Returns true if the model has undone task book states to restore."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    boolean canRedoTaskBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Restores the model\u0027s task book to its previous state."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    void undoTaskBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Restores the model\u0027s task book to its previously undone state."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    void redoTaskBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Saves the current task book state for undo/redo."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    void commitTaskBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Updates task list to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * contain only completed tasks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void trackProductivity();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "chelseyong": 1,
      "emobeany": 5,
      "ChanChunCheong": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the task book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedTaskBook versionedTaskBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final Predicate\u003cTask\u003e predicateShowCompletedTasks \u003d Task::isCompleted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given taskBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyTaskBook taskBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(taskBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with task book: \" + taskBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTaskBook \u003d new VersionedTaskBook(taskBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedTaskBook.getTaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //initialise the a new task book with new user prefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyTaskBook newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTaskBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyTaskBook getAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedTaskBook;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateTaskBookChanged() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new TaskBookChangedEvent(versionedTaskBook));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasTask(Task person) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedTaskBook.hasTask(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author ChanChunCheong"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void deferTaskDeadline(Task target, Deadline deadline) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        versionedTaskBook.deferDeadline(target, deadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author chelseyong"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.removeTask(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void completeTask(Task target, int hours) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.completeTask(target, hours);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.addTask(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author ChanChunCheong"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void sortTask(String method) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        versionedTaskBook.sortTask(method);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTaskBook.updateTask(target, editedTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //@@author emobeany"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void selectDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        versionedTaskBook.selectDeadline(deadline);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        updateFilteredTaskList(predicateShowTasksWithSameDate(deadline));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**{@code Predicate} that returns true when the date is equal*/"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private Predicate\u003cTask\u003e predicateShowTasksWithSameDate(Deadline deadline) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return task -\u003e task.getDeadline().equals(deadline);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return versionedTaskBook.getDeadline();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public boolean validDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return versionedTaskBook.validDeadline(deadline);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedTaskBook}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTasks);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoTaskBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedTaskBook.canUndo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoTaskBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedTaskBook.canRedo();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoTaskBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTaskBook.undo();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoTaskBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTaskBook.redo();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitTaskBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedTaskBook.equals(other.versionedTaskBook)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author chelseyong"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Updates the task to completed tasks only"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * So that productivity can be correctly calculated"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void trackProductivity() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        updateFilteredTaskList(predicateShowCompletedTasks);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        indicateTaskBookChanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 136,
      "chelseyong": 31,
      "emobeany": 23,
      "ChanChunCheong": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//@@author emobeany"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "emobeany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "emobeany"
        },
        "content": " * Represents a deadline in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "emobeany"
        },
        "content": " * Guarantees: field values are validated, immutable, details are present and not null."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "emobeany"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MESSAGE_DEADLINE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        \"Deadline can only have dd/mm/yyyy format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private final String month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline(String day, String month, String year) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String[] entries \u003d deadline.split(\"/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.day \u003d entries[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.month \u003d entries[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.year \u003d entries[2];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline(String day, String month) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public String getMonth() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public String getYear() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Returns false if any fields are not within the limits (not a valid date)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String[] entries \u003d test.split(\"/\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        if (entries.length !\u003d 3) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String day \u003d entries[0];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String month \u003d entries[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String year \u003d entries[2];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Check that all the characters are numeric first."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        if (!isNumeric(day) || !isNumeric(month) || !isNumeric(year)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        } else if (Integer.parseInt(day) \u003c 1 || Integer.parseInt(day) \u003e 31) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        } else if (Integer.parseInt(month) \u003c 1 || Integer.parseInt(month) \u003e 12) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        } else if (Integer.parseInt(year) \u003c 2018 || Integer.parseInt(year) \u003e 9999) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // custom fields hashing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return Objects.hash(day, month, year);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        builder.append(getDay())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .append(getMonth())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .append(getYear());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Referenced online: Checking if String is numeric"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * @return true if String is completely numeric"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static boolean isNumeric(String s) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        //s.matches(\"[-+]?\\\\d*\\\\.?\\\\d+\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return s !\u003d null \u0026\u0026 s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        if (object \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        } else if (object instanceof Deadline) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            Deadline otherDeadline \u003d (Deadline) object;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return otherDeadline.day.equals(this.day) \u0026\u0026 otherDeadline.month.equals(this.month)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                    \u0026\u0026 otherDeadline.year.equals(this.year);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "emobeany": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Milestone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "//@@author JeremyInElysium"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " * Represents a Milestone for any Task in the TaskBook"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "public class Milestone {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private final MilestoneDescription milestoneDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private final Rank rank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public Milestone(MilestoneDescription milestoneDescription, Rank rank) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        //super(title, milestoneDescription, new PriorityLevel(\"high\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.milestoneDescription \u003d milestoneDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.rank \u003d rank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public MilestoneDescription getMilestoneDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return milestoneDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String getMilestoneDescriptionString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return milestoneDescription.milestoneDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public Rank getRank() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return rank;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String getRankString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return rank.rank;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Returns true if both tasks have the same deadline and title."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public boolean isSameMilestone(Milestone otherMilestone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (otherMilestone \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return otherMilestone !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                \u0026\u0026 otherMilestone.getMilestoneDescription().equals(getMilestoneDescription())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                \u0026\u0026 otherMilestone.getRank().equals(getRank());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    //need to edit this also"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        builder.append(\"Milestone \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                .append(getRank())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                .append(\": \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                .append(getMilestoneDescription());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 59,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/MilestoneDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "//@@author JeremyInElysium"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " * Represents a description in the milestone of a task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "public class MilestoneDescription {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MESSAGE_MILESTONEDESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            \"Milestone description can only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * The first character of the milestone description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * otherwise \" \" (a blank string) will become a valid input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MILESTONEDESCRIPTION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public final String milestoneDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Creates a constructor for the milestone description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Guarantees that the milestone description is not null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @param milestoneDescription a valid milestone description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public MilestoneDescription(String milestoneDescription) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        requireNonNull(milestoneDescription);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        //checkArgument(isValidMilestoneDescription(milestoneDescription), MESSAGE_MILESTONEDESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.milestoneDescription \u003d milestoneDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Checks whether milestone description entered by the user is valid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @param milestoneDescription"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @return true if valid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static boolean isValidMilestoneDescription(String milestoneDescription) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        //milestoneDescription.matches(MILESTONEDESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String getMilestoneDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return this.milestoneDescription;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return milestoneDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/PriorityLevel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Task\u0027s PriorityLevel in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriorityLevel(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PriorityLevel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Priority can only be of low, medium or high level\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String priorityLevel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public final int priorityLevelInt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code PriorityLevel}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param priority A valid priority."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PriorityLevel(String priority) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPriorityLevel(priority), MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        priorityLevel \u003d priority.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        //@@author ChanChunCheong"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        switch(priority) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        case (\"low\"): {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            priorityLevelInt \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        case (\"medium\"): {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            priorityLevelInt \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        case (\"high\"): {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            priorityLevelInt \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            priorityLevelInt \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static boolean isValidPriorityLevel(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        String testInLowerCase \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (testInLowerCase.equals(\"low\") || testInLowerCase.equals(\"medium\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                || testInLowerCase.equals(\"high\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return priorityLevel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                || (other instanceof PriorityLevel // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 priorityLevel.equals(((PriorityLevel) other).priorityLevel)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return priorityLevel.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ChanChunCheong": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Rank.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "//@@author JeremyInElysium"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " * Represents a description in the milestone of a task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "public class Rank {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MESSAGE_RANK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            \"Rank can only contain positive integers greater than zero, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * The input must not be a whitespace, zero or a negative integer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String RANK_VALIDATION_REGEX \u003d \"[1-9]{1,2}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public final String rank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Creates a constructor for the rank"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Guarantees that the rank is not null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @param rank a valid rank"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public Rank(String rank) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        requireNonNull(rank);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        checkArgument(isValidRank(rank), MESSAGE_RANK_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.rank \u003d rank;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Checks whether rank entered by the user is valid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @param rank"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @return true if valid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static boolean isValidRank(String rank) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return rank.matches(RANK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String getRank() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return this.rank;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return rank;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/SortTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "//@@author ChanChunCheong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " * SortTaskList is a comparator for the task book to sort according to lexicographical order"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "public class SortTaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Return 0 if self \u003d other. Return 1 if self \u003e other. Return -1 if self \u003c other."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @param internalList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @param method"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @return SortedList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public ObservableList\u003cTask\u003e sortTask(ObservableList\u003cTask\u003e internalList, String method) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        FXCollections.sort(internalList, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            public int compare(Task self, Task other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                switch(method) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    case (\"modules\"): {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                        return self.getModuleCode().toLowerCase().compareTo(other.getModuleCode().toLowerCase());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    case (\"deadlines\"): {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                        return self.getDeadline().toString().compareTo(other.getDeadline().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    case (\"priority\"): {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                        return self.getPriorityLevelInt() - other.getPriorityLevelInt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    case (\"title\"): {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                        return self.getTitle().toLowerCase().compareTo(other.getTitle().toLowerCase());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                        return 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanChunCheong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Task in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //private static final String PLACEHOLDER_MODULECODE \u003d \"A2113\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PriorityLevel priorityLevel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private boolean isCompleted \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final int expectedNumOfHours;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private int completedNumOfHours;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private final Set\u003cMilestone\u003e milestoneList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Task(Deadline deadline, String moduleCode, String title, String description, PriorityLevel priorityLevel,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                int expectedNumOfHours) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d expectedNumOfHours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public Task(Deadline deadline, String moduleCode, String title, String description, PriorityLevel priorityLevel,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                int expectedNumOfHours, int completedNumOfHours, boolean isCompleted, Set\u003cMilestone\u003e milestoneList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d expectedNumOfHours;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d completedNumOfHours;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.milestoneList.addAll(milestoneList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Task(String moduleCode, String title, String description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                PriorityLevel priorityLevel, int expectedNumOfHours) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d expectedNumOfHours;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Task(Task other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.deadline \u003d other.deadline;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.moduleCode \u003d other.moduleCode;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.title \u003d other.title;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.description \u003d other.description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.priorityLevel \u003d other.priorityLevel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.isCompleted \u003d other.isCompleted;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d other.expectedNumOfHours;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d other.completedNumOfHours;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.milestoneList.addAll(other.milestoneList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public PriorityLevel getPriorityLevel() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return priorityLevel;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author ChanChunCheong"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public int getPriorityLevelInt() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return priorityLevel.priorityLevelInt;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public int getExpectedNumOfHours() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return expectedNumOfHours;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public int getCompletedNumOfHours() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return completedNumOfHours;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks the task as completed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * setting @code {isCompleted} to true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Task completed(int hours) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task completedTask \u003d new Task(this);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        completedTask.isCompleted \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        completedTask.completedNumOfHours \u003d hours;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return completedTask;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both tasks have the same deadline and title."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author ChanChunCheong"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Defers the task to a later"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @return the new Task"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public Task deferred(Deadline deadline) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        Task deferredTask \u003d new Task(this);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        deferredTask.deadline \u003d deadline;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return deferredTask;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@JeremyInElysium"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Add a milestone to the task."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public Task addMilestone(Milestone milestone) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        Task taskWithMilestones \u003d new Task(this);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        taskWithMilestones.milestoneList.add(milestone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return taskWithMilestones;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @return list of milestones for the task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public Set\u003cMilestone\u003e getMilestoneList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return Collections.unmodifiableSet(milestoneList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Returns true if both tasks have the same data fields."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 otherTask.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 otherTask.getPriorityLevel().equals(getPriorityLevel())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 otherTask.isCompleted() \u003d\u003d isCompleted()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 otherTask.getExpectedNumOfHours() \u003d\u003d getExpectedNumOfHours()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 otherTask.getCompletedNumOfHours() \u003d\u003d getCompletedNumOfHours();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return Objects.hash(deadline, title, description, priorityLevel, expectedNumOfHours,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                completedNumOfHours, isCompleted);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(getDeadline())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                .append(\" | \")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                .append(\" : \")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                .append(getPriorityLevel());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        /*builder.append(\" Expected: \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(expectedNumOfHours);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(\" completed? \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(isCompleted);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(\" completed hours? \");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(completedNumOfHours);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(\" Module code: \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        builder.append(moduleCode);*/"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 2,
      "-": 60,
      "chelseyong": 46,
      "emobeany": 6,
      "ChanChunCheong": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    //@@author ChanChunCheong"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Defer the deadline of the task (@code target) in the list with (@code deadline)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * (@code target) must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void defer(Task target, Deadline deadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        Task deferredTask \u003d target.deferred(deadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        internalList.set(index, deferredTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * The task identity of {@code editedPerson} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void setTask(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (!target.isSameTask(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Complete a task in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void complete(Task toComplete, int hours) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(toComplete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        int index \u003d internalList.indexOf(toComplete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        Task completedTask \u003d toComplete.completed(hours);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        internalList.set(index, completedTask);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public ObservableList\u003cTask\u003e obtainObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "ChanChunCheong": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * TODO: At least 6 sets of Tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            new Task(new Deadline(\"1/1/2018\"), \"CS2113\", \"Complete code refactoring\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                    \"refer to notes\", new PriorityLevel(\"high\"), 2),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyTaskBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    //                .map(Tag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    //                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "chelseyong": 2,
      "emobeany": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends TaskBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(TaskBookChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedMilestone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.Milestone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.MilestoneDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.Rank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "//@@author JeremyInElysium"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "public class XmlAdaptedMilestone {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Milestone\u0027s %s field is missing.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private String descrip;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private String rank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public XmlAdaptedMilestone() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Constructs a {@code XmlAdaptedMilestone} with the given {@code milestone}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public XmlAdaptedMilestone(MilestoneDescription milestoneDescription, Rank rank) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.descrip \u003d milestoneDescription.getMilestoneDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        this.rank \u003d rank.getRank();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Converts a given Milestone into this class for JAXB use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public XmlAdaptedMilestone(Milestone source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        descrip \u003d source.getMilestoneDescriptionString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        rank \u003d source.getRankString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * Converts this jaxb-friendly adapted milestone object into the model\u0027s Milestone object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public Milestone toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (descrip \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, MilestoneDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (!MilestoneDescription.isValidMilestoneDescription(descrip)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            throw new IllegalValueException(MilestoneDescription.MESSAGE_MILESTONEDESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        final MilestoneDescription modelMilestoneDescription \u003d new MilestoneDescription(descrip);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (rank \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Rank.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (!Rank.isValidRank(rank)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            throw new IllegalValueException(Rank.MESSAGE_RANK_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        final Rank modelRank \u003d new Rank(rank);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return new Milestone(modelMilestoneDescription, modelRank);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        if (!(other instanceof XmlAdaptedMilestone)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        XmlAdaptedMilestone otherMilestone \u003d (XmlAdaptedMilestone) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        return Objects.equals(descrip, otherMilestone.descrip)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                \u0026\u0026 Objects.equals(rank, otherMilestone.rank);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 95,
      "chelseyong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import seedu.address.model.task.Milestone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTask {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private String priorityLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private String expectedNumOfHours;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private String completedNumOfHours;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private List\u003cXmlAdaptedMilestone\u003e milestonelist;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTask."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTask() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public XmlAdaptedTask(String deadline, String moduleCode, String title, String description, String priorityLevel,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                          String expectedNumOfHours, String completedNumOfHours,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                          boolean isCompleted, List\u003cXmlAdaptedTask\u003e milestoneList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d expectedNumOfHours;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d completedNumOfHours;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.milestonelist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (milestoneList !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            this.milestonelist \u003d new ArrayList\u003c\u003e(milestonelist);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Constructs an {@code XmlAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public XmlAdaptedTask(String deadline, String moduleCode, String title, String description, String priorityLevel,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                          String expectedNumOfHours) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d expectedNumOfHours;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d \"0\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.milestonelist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Task into this class for JAXB use."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        deadline \u003d source.getDeadline().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        moduleCode \u003d source.getModuleCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        title \u003d source.getTitle();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        priorityLevel \u003d source.getPriorityLevel().toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedNumOfHours \u003d Integer.toString(source.getExpectedNumOfHours());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        completedNumOfHours \u003d Integer.toString(source.getCompletedNumOfHours());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        isCompleted \u003d source.isCompleted();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        milestonelist \u003d source.getMilestoneList().stream().map(XmlAdaptedMilestone::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        final String modelModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Title\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final String modelTitle \u003d title;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Description\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (priorityLevel \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    PriorityLevel.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (!PriorityLevel.isValidPriorityLevel(priorityLevel)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(PriorityLevel.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        final PriorityLevel modelPriority \u003d new PriorityLevel(priorityLevel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (expectedNumOfHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                    \"Expected number of hours expected to complete\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        final int modelExpectedNumOfHours \u003d Integer.parseInt(expectedNumOfHours);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        final int modelCompletedNumOfHours;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (completedNumOfHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            //throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            //        \"Number of hours taken to complete\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            modelCompletedNumOfHours \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            modelCompletedNumOfHours \u003d Integer.parseInt(completedNumOfHours);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //Boolean cannot be checked for null --\u003e if (isCompleted \u003d\u003d null)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        final boolean modelIsCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "        final Set\u003cMilestone\u003e milestoneEntries \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (milestonelist !\u003d null \u0026\u0026 !milestonelist.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            for (XmlAdaptedMilestone entry : milestonelist) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "                milestoneEntries.add(entry.toModelType());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new Task(modelDeadline, modelModuleCode, modelTitle, modelDescription,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                modelPriority, modelExpectedNumOfHours,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                modelCompletedNumOfHours, modelIsCompleted, milestoneEntries);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTask)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(deadline, otherTask.deadline)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(title, otherTask.title)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherTask.description)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                \u0026\u0026 Objects.equals(priorityLevel, otherTask.priorityLevel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 8,
      "-": 95,
      "chelseyong": 74,
      "emobeany": 1,
      "ChanChunCheong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableTaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.AddTaskCommand.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableTaskBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTask\u003e tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableTaskBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableTaskBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableTaskBook(ReadOnlyTaskBook src) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTask p : tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d p.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasTask(task)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addTask(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableTaskBook)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.equals(((XmlSerializableTaskBook) other).tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "chelseyong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import javafx.scene.control.DatePicker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private DatePicker date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DatePicker datePicker \u003d new DatePicker();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Converts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @param date from datePicker in UI"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * @return deadline in correct parsing format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private String convertToDeadline(LocalDate date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int year \u003d date.getYear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        StringBuilder deadline \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        deadline.append(day);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        deadline.append(\"/\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        deadline.append(month);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        deadline.append(\"/\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        deadline.append(year);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return deadline.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * When user picks a date,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * that deadline will be selected,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * using selectDeadlineCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void selectDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        StringBuilder commandEntered \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        LocalDate deadlineFromInput \u003d date.getValue();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String deadlineParsed \u003d convertToDeadline(deadlineFromInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        commandEntered.append(\"select \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        commandEntered.append(deadlineParsed);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //logger.info(\"Command entered \u003d\u003d\u003d\u003d\" + commandEntered.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandEntered.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser); // feedbackToUser returns a string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser); // feedbackToUser returns a string."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 151,
      "chelseyong": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private Label moduleCodes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label priorityLevel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private Label expectedNumOfHours;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "    private FlowPane milestones;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        title.setText(task.getTitle().toUpperCase());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        deadline.setText(task.getDeadline().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        moduleCodes.setText(task.getModuleCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        description.setText(task.getDescription());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        priorityLevel.setText(task.getPriorityLevel().priorityLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedNumOfHours.setText(Integer.toString(task.getExpectedNumOfHours()) + \" hours\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        task.getMilestoneList().forEach(milestone -\u003e milestones.getChildren()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                .add(new Label(milestone.getMilestoneDescriptionString())));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        setTextForStatus(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        setColorForPriorityLevel(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private void setColorForPriorityLevel(Task task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        if (task.getPriorityLevel().priorityLevel.equals(\"high\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            priorityLevel.setStyle(\"-fx-text-fill: red;\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } else if (task.getPriorityLevel().priorityLevel.equals(\"medium\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            priorityLevel.setStyle(\"-fx-text-fill: #f45713;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            priorityLevel.setStyle(\"-fx-text-fill: orange;\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private void setTextForStatus(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.isCompleted()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            result.append(\"Completed in \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            result.append(task.getCompletedNumOfHours());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            result.append(\" hours!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            status.setText(result.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            status.setText(\"Not completed :(\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 4,
      "-": 73,
      "chelseyong": 29,
      "emobeany": 1,
      "ChanChunCheong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/application_icon.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "chelseyong": 1
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003c?import javafx.scene.control.DatePicker?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cHBox prefHeight\u003d\"25.0\" prefWidth\u003d\"855.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"25.0\" prefWidth\u003d\"731.0\" styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"25.0\" prefWidth\u003d\"695.0\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      \u003cDatePicker fx:id\u003d\"date\" onAction\u003d\"#selectDate\" prefHeight\u003d\"25.0\" prefWidth\u003d\"123.0\" promptText\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "chelseyong": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003cImage url\u003d\"@/images/application_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                    prefWidth\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "          \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"700\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "chelseyong": 4
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"140.0\" prefWidth\u003d\"351.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"LEFT\" hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"400.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"LEFT\" maxWidth\u003d\"400.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"157.33331298828125\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"35.333343505859375\" minHeight\u003d\"10.0\" prefHeight\u003d\"31.33331298828125\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"27.66668701171875\" minHeight\u003d\"10.0\" prefHeight\u003d\"21.66668701171875\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"29.666656494140625\" minHeight\u003d\"10.0\" prefHeight\u003d\"21.66668701171875\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"37.333343505859375\" minHeight\u003d\"10.0\" prefHeight\u003d\"22.33331298828125\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"45.333343505859375\" minHeight\u003d\"10.0\" prefHeight\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"48.666656494140625\" minHeight\u003d\"10.0\" prefHeight\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"0.0\" minHeight\u003d\"0.0\" prefHeight\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"0.0\" minHeight\u003d\"0.0\" prefHeight\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cminWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCodes\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCodes\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel text\u003d\"Module code:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel text\u003d\"Description:\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"priorityLevel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priorityLevel\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel text\u003d\"Priority:\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"expectedNumOfHours\" text\u003d\"\\$expectedNumOfHours\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel text\u003d\"To complete in: \" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeremyinelysium"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      \u003cHBox prefHeight\u003d\"30.0\" prefWidth\u003d\"264.0\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cLabel text\u003d\"Milestones:\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"milestones\" hgap\u003d\"10\" prefHeight\u003d\"0.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      \u003cInsets left\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jeremyinelysium": 1,
      "-": 24,
      "chelseyong": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        logic.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "chelseyong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TaskBuilder.DEFAULT_DEADLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class AddTaskCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        new AddTaskCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CommandResult commandResult \u003d new AddTaskCommand(validTask).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommand addCommand \u003d new AddTaskCommand(validTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expectMessage(AddTaskCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_taskWithZeroHourCompletion_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task validTask \u003d new TaskBuilder().withExpectedNumOfHours(0).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommand addCommand \u003d new AddTaskCommand(validTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_ZERO_HOURS_COMPLETION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_taskWithMaxHourCompletion_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task validTask \u003d new TaskBuilder().withExpectedNumOfHours(MAX_HOURS).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommand addCommand \u003d new AddTaskCommand(validTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_MAX_HOURS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task jan1st \u003d new TaskBuilder().withDeadline(\"1/1/2018\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task nov1st \u003d new TaskBuilder().withDeadline(\"1/11/2018\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommand addJan1stCommand \u003d new AddTaskCommand(jan1st);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommand addNov1stCommand \u003d new AddTaskCommand(nov1st);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(addJan1stCommand.equals(addJan1stCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommand addJan1stCommandCopy \u003d new AddTaskCommand(jan1st);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(addJan1stCommand.equals(addJan1stCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(addJan1stCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(addJan1stCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(addJan1stCommand.equals(addNov1stCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void selectDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        public void sortTask(String method) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public Deadline getDeadline() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public boolean validDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void resetData(ReadOnlyTaskBook newData) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public ReadOnlyTaskBook getAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void deferTaskDeadline(Task task, Deadline deadline) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void completeTask(Task target, int hours) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public boolean canUndoTaskBook() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public boolean canRedoTaskBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void undoTaskBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void redoTaskBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void commitTaskBook() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void trackProductivity() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void commitTaskBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            // called by {@code AddTaskCommand#execute()}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public ReadOnlyTaskBook getAddressBook() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 258,
      "ChanChunCheong": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "chelseyong": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author chelseyong"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_DEADLINE_1ST_JAN \u003d \"1/1/2018\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_DEADLINE_31ST_MARCH \u003d \"31/3/2018\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_DEADLINE_12TH_MAY \u003d \"12/5/2018\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2113 \u003d \"CS2113\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_MODULE_CODE_CG2271 \u003d \"CG2271\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_TITLE_1 \u003d \"Complete CS2113 Homework\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_TITLE_2 \u003d \"Start coding test units\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_TITLE_3 \u003d \"Prepare OP2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_DESCRIPTION_1 \u003d \"Refer to notes\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_DESCRIPTION_2 \u003d \"Do this before integration tests\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_DESCRIPTION_3 \u003d \"OP2 has high weightage\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_PRIORITY_LEVEL_LOW \u003d \"low\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_PRIORITY_LEVEL_HIGH \u003d \"high\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_PRIORITY_LEVEL_MEDIUM \u003d \"medium\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_1_HOUR \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String VALID_2_HOURS \u003d \"2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //@@author emobeany"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_DAY_AND_MONTH_0 \u003d \"0\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_DAY_1 \u003d \"1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_DAY_FOR_FEB \u003d \"28\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_DAY_FOR_LEAP_YEAR_FEB \u003d \"29\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_DAY_FOR_COMMON_YEAR_FEB \u003d \"29\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_DAY_FOR_LEAP_YEAR_FEB \u003d \"30\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_DAY_FOR_MONTHS_WITH_30_DAYS \u003d \"30\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_DAY_FOR_MONTHS_WITH_31_DAYS \u003d \"31\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_DAY_FOR_MONTHS_WITH_30_DAYS \u003d \"31\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_DAY_FOR_MONTHS_WITH_31_DAYS \u003d \"32\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_MONTH_JAN \u003d \"1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_MONTH_FEB \u003d \"2\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_MONTH_APR \u003d \"4\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_MONTH_13 \u003d \"13\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_YEAR_2018 \u003d \"2018\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_YEAR_2020 \u003d \"2020\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String VALID_YEAR_9999 \u003d \"9999\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_YEAR_PASSED_2017 \u003d \"2017\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_YEAR_10000 \u003d \"10000\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DAY_DESC_1 \u003d \" \" + PREFIX_DAY + \"1\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DAY_DESC_2 \u003d \" \" + PREFIX_DAY + \"2\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MONTH_DESC_1 \u003d \" \" + PREFIX_MONTH + \"1\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MONTH_DESC_2 \u003d \" \" + PREFIX_MONTH + \"2\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String YEAR_DESC_2018 \u003d \" \" + PREFIX_YEAR + \"2018\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String YEAR_DESC_2019 \u003d \" \" + PREFIX_YEAR + \"2019\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DEADLINE_DESC_1ST_JAN \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_1ST_JAN;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DEADLINE_DESC_31ST_MARCH \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_31ST_MARCH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DEADLINE_DESC_12TH_MAY \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_12TH_MAY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MODULE_CODE_CS2113_DESC \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_CS2113;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String MODULE_CODE_CG2271_DESC \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_CG2271;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String TITLE_DESC_1 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String TITLE_DESC_2 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String TITLE_DESC_3 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_3;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DESCRIPTION_DESC_1 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DESCRIPTION_DESC_2 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DESCRIPTION_DESC_3 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_3;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String PRIORITY_LEVEL_DESC_LOW \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LEVEL_LOW;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String PRIORITY_LEVEL_DESC_HIGH \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LEVEL_HIGH;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String PRIORITY_LEVEL_DESC_MEDIUM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LEVEL_MEDIUM;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String HOURS_DESC_1 \u003d \" \" + PREFIX_HOURS + VALID_1_HOUR;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String HOURS_DESC_2 \u003d \" \" + PREFIX_HOURS + VALID_2_HOURS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"31/2\"; // No 31st February in calendar"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_PRIORITY_LEVEL_DESC \u003d \" \" + PREFIX_PRIORITY + \"mid\"; // not a priority level"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_HOURS_DESC \u003d \" \" + PREFIX_HOURS + \"one\"; // not an integer"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final int OVERFLOW_INT \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_HOURS_OVERFLOW \u003d \" \" + PREFIX_HOURS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            + Long.toString((long) OVERFLOW_INT + 1); // integer overflow"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final int MAX_HOURS \u003d 24; // integer overflow"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String INVALID_MAX_HOURS \u003d \" \" + PREFIX_HOURS + Integer.toString(24); // integer overflow"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //Mainly for EditCommandTests --\u003e can remove"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * - the address book and the filtered task list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //{@code model}\u0027s address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        final String[] splitName \u003d task.getTitle().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s task book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "chelseyong": 44,
      "emobeany": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CompleteTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_HOURS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class CompleteTaskCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CompleteTaskCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int completedHours \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task completedTask \u003d new TaskBuilder(taskToComplete).withCompletedNumOfHours(completedHours).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeTaskCommand \u003d new CompleteTaskCommand(INDEX_FIRST_TASK, completedHours);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(CompleteTaskCommand.MESSAGE_SUCCESS, completedTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.completeTask(taskToComplete, completedHours);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandSuccess(completeTaskCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeTaskCommand \u003d new CompleteTaskCommand(outOfBoundIndex, 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(completeTaskCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_taskCompletedAlready_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int completedHours \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeTaskCommand \u003d new CompleteTaskCommand(INDEX_FIRST_TASK, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task completedTask \u003d new TaskBuilder(taskToComplete).withCompletedNumOfHours(completedHours).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.updateTask(taskToComplete, completedTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(completeTaskCommand, expectedModel, commandHistory, Messages.MESSAGE_COMPLETED_TASK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_taskCompletedZeroHours_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeTaskCommand \u003d new CompleteTaskCommand(INDEX_FIRST_TASK, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(completeTaskCommand, model, commandHistory, Messages.MESSAGE_ZERO_HOURS_COMPLETION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_taskCompletedMaxHours_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeTaskCommand \u003d new CompleteTaskCommand(INDEX_FIRST_TASK, MAX_HOURS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(completeTaskCommand, model, commandHistory, Messages.MESSAGE_MAX_HOURS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int completedNumOfHours \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeTaskCommand \u003d new CompleteTaskCommand(INDEX_FIRST_TASK, completedNumOfHours);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.completeTask(taskToComplete, completedNumOfHours);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // complete -\u003e completes first task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        completeTaskCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.undoTaskBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.redoTaskBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        int completedNumOfHours \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeFirstCommand \u003d new CompleteTaskCommand(INDEX_FIRST_TASK, completedNumOfHours);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeSecondCommand \u003d new CompleteTaskCommand(INDEX_SECOND_TASK, 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(completeFirstCommand.equals(completeFirstCommand));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        CompleteTaskCommand completeFirstCommandCopy \u003d new CompleteTaskCommand(INDEX_FIRST_TASK, completedNumOfHours);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(completeFirstCommand.equals(completeFirstCommandCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(completeFirstCommand.equals(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(completeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(completeFirstCommand.equals(completeSecondCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.undoTaskBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.redoTaskBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * 1. Deletes a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted task in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.undoTaskBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertNotEquals(taskToDelete, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // redo -\u003e deletes same second task in unfiltered task list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.redoTaskBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "chelseyong": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectDeadlineCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "emobeany"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.INVALID_32ND_JAN_2018;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_1ST_APR_2018;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_1ST_JAN_2018;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class SelectDeadlineCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        new SelectDeadlineCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void execute_deadlineAcceptedByModel_selectSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        ModelStubAcceptingDeadlineSelected modelStub \u003d new ModelStubAcceptingDeadlineSelected();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline validDeadline \u003d VALID_1ST_JAN_2018;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        CommandResult commandResult \u003d new SelectDeadlineCommand(validDeadline).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertEquals(String.format(SelectDeadlineCommand.MESSAGE_SUCCESS, validDeadline), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void execute_invalidDeadline_throwCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline invalidDeadline \u003d INVALID_32ND_JAN_2018;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        SelectDeadlineCommand selectCommand \u003d new SelectDeadlineCommand(invalidDeadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDeadline(invalidDeadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        thrown.expectMessage(SelectDeadlineCommand.MESSAGE_INVALID_DEADLINE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        selectCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline jan1st2018 \u003d VALID_1ST_JAN_2018;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline apr1st2018 \u003d VALID_1ST_APR_2018;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        SelectDeadlineCommand selectJan1st2018Command \u003d new SelectDeadlineCommand(jan1st2018);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        SelectDeadlineCommand selectApr1st2018Command \u003d new SelectDeadlineCommand(apr1st2018);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        SelectDeadlineCommand selectJan1st2018CommandCopy \u003d new SelectDeadlineCommand(jan1st2018);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(selectJan1st2018Command.equals(selectJan1st2018Command));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Same deadline -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(selectJan1st2018Command.equals(selectJan1st2018CommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(selectJan1st2018Command.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(selectJan1st2018Command.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Different deadline -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(selectJan1st2018Command.equals(selectApr1st2018Command));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void selectDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void sortTask(String method) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public Deadline getDeadline() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return new Deadline(VALID_1ST_JAN_2018.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public boolean validDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void resetData(ReadOnlyTaskBook newData) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public ReadOnlyTaskBook getAddressBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void deferTaskDeadline(Task task, Deadline deadline) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void completeTask(Task target, int hours) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public boolean canUndoTaskBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public boolean canRedoTaskBook() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void undoTaskBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void redoTaskBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void commitTaskBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void trackProductivity() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * A default model stub that contains a single task."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private class ModelStubWithDeadline extends ModelStub {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        private final Deadline deadline;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        ModelStubWithDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            requireNonNull(deadline);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public boolean validDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            requireNonNull(deadline);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return Deadline.isValidDeadline(this.deadline.toString());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * A model stub that always accepts the deadline being selected."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private class ModelStubAcceptingDeadlineSelected extends ModelStub {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public boolean validDeadline(Deadline deadlineSelected) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            requireNonNull(deadlineSelected);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return Deadline.isValidDeadline(deadlineSelected.toString());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void selectDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            requireNonNull(deadline);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public void commitTaskBook() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            // called by {@code SelectDeadlineCommand#execute()}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        public ReadOnlyTaskBook getAddressBook() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 5,
      "emobeany": 231
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TrackProductivityCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.TrackProductivityCommand.MESSAGE_NO_COMPLETED_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TrackProductivityCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_noCompletedTask_commandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        TrackProductivityCommand trackProductivityCommand \u003d new TrackProductivityCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedModel.trackProductivity();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertCommandFailure(trackProductivityCommand, expectedModel, commandHistory, MESSAGE_NO_COMPLETED_TASK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void execute_withCompletedTask_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        TrackProductivityCommand trackProductivityCommand \u003d new TrackProductivityCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task completedTask \u003d new TaskBuilder(taskToComplete).withCompletedNumOfHours(1).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.updateTask(taskToComplete, completedTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        model.trackProductivity();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        double productivity \u003d trackProductivityCommand.calculateProductivity(model.getFilteredTaskList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String prodInPercentage \u003d Integer.toString((int) (productivity * 100)) + \" %\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(TrackProductivityCommand.MESSAGE_SUCCESS, prodInPercentage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            CommandResult result \u003d trackProductivityCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTaskCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HOURS_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HOURS_DESC_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_HOURS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_HOURS_OVERFLOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_LEVEL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_CG2271_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_CS2113_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_LEVEL_DESC_HIGH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_LEVEL_DESC_LOW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_1_HOUR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_1ST_JAN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2113;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LEVEL_LOW;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccessWithDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_HOURS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class AddTaskCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddTaskCommandParserTest.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private AddTaskCommandParser parser \u003d new AddTaskCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ParserWithDate parser \u003d new ParserWithDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Deadline selectedDeadline \u003d new Deadline(VALID_DEADLINE_1ST_JAN);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CS2113_TASK_2).withDeadline(VALID_DEADLINE_1ST_JAN).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //AddTaskCommand commandWithDate \u003d new AddTaskCommand(expectedTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseSuccessWithDate(parser, selectedDeadline, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        + MODULE_CODE_CS2113_DESC + TITLE_DESC_2 + DESCRIPTION_DESC_2"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        + PRIORITY_LEVEL_DESC_HIGH + HOURS_DESC_1,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // multiple module codes - last module code accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseSuccessWithDate(parser, selectedDeadline, MODULE_CODE_CG2271_DESC + MODULE_CODE_CS2113_DESC"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + TITLE_DESC_2 + DESCRIPTION_DESC_2 + PRIORITY_LEVEL_DESC_HIGH + HOURS_DESC_1,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseSuccessWithDate(parser, selectedDeadline, MODULE_CODE_CS2113_DESC + TITLE_DESC_1 + TITLE_DESC_2"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + DESCRIPTION_DESC_2 + PRIORITY_LEVEL_DESC_HIGH + HOURS_DESC_1, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseSuccessWithDate(parser, selectedDeadline, MODULE_CODE_CS2113_DESC + TITLE_DESC_2"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + DESCRIPTION_DESC_1 + DESCRIPTION_DESC_2 + PRIORITY_LEVEL_DESC_HIGH + HOURS_DESC_1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseSuccessWithDate(parser, selectedDeadline, MODULE_CODE_CS2113_DESC + TITLE_DESC_2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + DESCRIPTION_DESC_2 + PRIORITY_LEVEL_DESC_LOW + PRIORITY_LEVEL_DESC_HIGH + HOURS_DESC_1,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // multiple hours - last hour accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseSuccessWithDate(parser, selectedDeadline, MODULE_CODE_CS2113_DESC + TITLE_DESC_2"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        + DESCRIPTION_DESC_2 + PRIORITY_LEVEL_DESC_HIGH + HOURS_DESC_2 + HOURS_DESC_1,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS2113 + VALID_TITLE_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + PRIORITY_LEVEL_DESC_LOW + HOURS_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_CS2113_DESC + VALID_TITLE_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + PRIORITY_LEVEL_DESC_LOW + HOURS_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_CS2113_DESC + TITLE_DESC_1 + VALID_DESCRIPTION_1"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + PRIORITY_LEVEL_DESC_LOW + HOURS_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // missing priority prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_CS2113_DESC + TITLE_DESC_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + VALID_PRIORITY_LEVEL_LOW + HOURS_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // missing hour prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_CS2113_DESC + TITLE_DESC_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + PRIORITY_LEVEL_DESC_LOW + VALID_1_HOUR, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // invalid Priority Level"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_CS2113_DESC + TITLE_DESC_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                + INVALID_PRIORITY_LEVEL_DESC + HOURS_DESC_1, PriorityLevel.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // invalid Hours"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_CS2113_DESC + TITLE_DESC_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        + PRIORITY_LEVEL_DESC_LOW + INVALID_HOURS_DESC, MESSAGE_INVALID_HOURS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // hours \u003e INT_MAX"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_CS2113_DESC + TITLE_DESC_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        + PRIORITY_LEVEL_DESC_LOW + INVALID_HOURS_OVERFLOW, MESSAGE_INVALID_HOURS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MODULE_CODE_CS2113_DESC + TITLE_DESC_1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        + DESCRIPTION_DESC_1 + PRIORITY_LEVEL_DESC_LOW,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Since AddTaskCommand can only work with ModelManager"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * which sets the deadline, parsing has to do the adding"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * of deadline here."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static class ParserWithDate extends AddTaskCommandParser {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * An overloading method that parses"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * @param userInput with task inputs to add"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * @param date will be set in the task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * @return AddTaskCommand"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * @throws ParseException if parsing is invalid"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public Command parse(String userInput, Deadline date) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            logger.info(userInput);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                    ArgumentTokenizer.tokenize(userInput, PREFIX_MODULE_CODE, PREFIX_TITLE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                            PREFIX_PRIORITY, PREFIX_HOURS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_TITLE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                    PREFIX_PRIORITY, PREFIX_HOURS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            String title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            PriorityLevel priority \u003d ParserUtil.parsePriorityLevel(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            int expectedNumOfHours \u003d ParserUtil.parseHours(argMultimap.getValue(PREFIX_HOURS).get());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            String moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            Task task \u003d new Task(moduleCode, title, description, priority, expectedNumOfHours);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            task.setDeadline(date);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * Parses user input with deadline into command for execution."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * @param userInput full user input string"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * @return the command based on the user input"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public Command parseCommand(String userInput, Deadline deadline) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return parse(arguments, deadline);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author chelseyong"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * by setting the deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * and the command created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Only applicable for AddTaskCommandParserTest"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static void assertParseSuccessWithDate(AddTaskCommandParserTest.ParserWithDate parser, Deadline date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                  String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            Command command \u003d parser.parse(userInput, date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "chelseyong": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "chelseyong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String INVALID_DEADLINE_1 \u003d \"31/2\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String INVALID_DEADLINE_2 \u003d \"0/1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"lowmedium\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"1/1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Do homework\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"study in library\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"low\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedName \u003d VALID_TITLE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedName \u003d VALID_TITLE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedDescription \u003d VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedDescription \u003d VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(phoneWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parsePriorityLevel_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriorityLevel((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parsePriorityLevel_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriorityLevel(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parsePriorityLevel_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        PriorityLevel expectedPriority \u003d new PriorityLevel(VALID_PRIORITY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriorityLevel(VALID_PRIORITY));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parsePriorityLevel_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        PriorityLevel expectedPriority \u003d new PriorityLevel(VALID_PRIORITY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriorityLevel(addressWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseDeadline_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE_1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE_2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Deadline expectedEmail \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseDeadline(VALID_DEADLINE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_DEADLINE + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Deadline expectedEmail \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseDeadline(emailWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "chelseyong": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectDeadlineCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "emobeany"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONTH_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONTH_DESC_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONTH_JAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_2018;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_2018;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_2019;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_1ST_JAN_2018;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.logic.commands.SelectDeadlineCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//@@author emobeany"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class SelectDeadlineCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SelectDeadlineCommandParserTest.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private SelectDeadlineCommandParser parser \u003d new SelectDeadlineCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Parser parser \u003d new SelectDeadlineCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline expectedDeadline \u003d VALID_1ST_JAN_2018;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // preamble only contains whitespace"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DAY_DESC_1 + MONTH_DESC_1 + YEAR_DESC_2018,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                new SelectDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // multiple days - last day accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseSuccess(parser, DAY_DESC_2 + DAY_DESC_1 + MONTH_DESC_1 + YEAR_DESC_2018,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                new SelectDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // multiple months - last month accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseSuccess(parser, DAY_DESC_1 + MONTH_DESC_2 + MONTH_DESC_1 + YEAR_DESC_2018,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                new SelectDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // multiple years - last year accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseSuccess(parser, DAY_DESC_1 + MONTH_DESC_1 + YEAR_DESC_2019 + YEAR_DESC_2018,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                new SelectDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // missing day prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseFailure(parser, VALID_DAY_1 + MONTH_DESC_1 + YEAR_DESC_2018, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // missing month prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseFailure(parser, DAY_DESC_1 + VALID_MONTH_JAN + YEAR_DESC_2018, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // missing year prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseFailure(parser, DAY_DESC_1 + MONTH_DESC_1 + VALID_YEAR_2018, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DAY_DESC_1 + MONTH_DESC_1 + YEAR_DESC_2018,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "emobeany"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "emobeany": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TaskBuilder.DEFAULT_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.DeferDeadlineCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.SelectDeadlineCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.TrackProductivityCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TaskBookParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final TaskBookParser parser \u003d new TaskBookParser(new AddTaskCommand(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new ClearCommand(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new CompleteTaskCommand(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new DeferDeadlineCommand(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new DeleteCommand(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new ListCommand(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new TrackProductivityCommand(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new SelectDeadlineCommand(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new HelpCommand(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new ExitCommand(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new HistoryCommand(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new UndoCommand(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                                    new RedoCommand());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommandParserTest addTaskCommandParserTest \u003d new AddTaskCommandParserTest();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommandParserTest.ParserWithDate parser \u003d new AddTaskCommandParserTest.ParserWithDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddTaskCommand command \u003d (AddTaskCommand) parser.parseCommand(TaskUtil.getAddTaskCommand(task),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new Deadline(DEFAULT_DEADLINE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(new AddTaskCommand(task), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "chelseyong": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LEVEL_HIGH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddressBook newData \u003d getTypicalTaskBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // Two tasks with the same title and deadline fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                .withPriority(VALID_PRIORITY_LEVEL_HIGH).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(CS2113_TASK_1, editedTask1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        TaskBookStub newData \u003d new TaskBookStub(newTasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.hasTask(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(addressBook.hasTask(CS2113_TASK_1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void hasTask_taskInTaskBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.addTask(CS2113_TASK_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(addressBook.hasTask(CS2113_TASK_1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void hasTask_taskWithSameTitleAndSameDeadlineInTaskBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.addTask(CS2113_TASK_1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                .withPriority(VALID_PRIORITY_LEVEL_HIGH).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(addressBook.hasTask(editedTask1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.getTaskList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * A stub ReadOnlyTaskBook whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static class TaskBookStub implements ReadOnlyTaskBook {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        TaskBookStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "chelseyong": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBookBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        modelManager.hasTask(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(modelManager.hasTask(CS2113_TASK_1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        modelManager.addTask(CS2113_TASK_1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(modelManager.hasTask(CS2113_TASK_1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        modelManager.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddressBook addressBook \u003d new TaskBookBuilder().withTask(CS2113_TASK_1).withTask(CS2113_TASK_2).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        /*// different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String[] keywords \u003d CS2113_TASK_1.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "chelseyong": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTaskBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class VersionedTaskBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final ReadOnlyTaskBook addressBookWithTask1 \u003d new TaskBookBuilder().withTask(CS2113_TASK_1).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final ReadOnlyTaskBook addressBookWithTask2 \u003d new TaskBookBuilder().withTask(CS2113_TASK_2).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final ReadOnlyTaskBook addressBookWithTask3 \u003d new TaskBookBuilder().withTask(CS2113_TASK_3).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final ReadOnlyTaskBook emptyAddressBook \u003d new TaskBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertAddressBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertAddressBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithTask1, addressBookWithTask2),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                addressBookWithTask2,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertAddressBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertAddressBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                addressBookWithTask1,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.singletonList(addressBookWithTask2));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertAddressBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Arrays.asList(addressBookWithTask1, addressBookWithTask2));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertThrows(VersionedTaskBook.NoUndoableStateException.class, versionedTaskBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertThrows(VersionedTaskBook.NoUndoableStateException.class, versionedTaskBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertAddressBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithTask1),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                addressBookWithTask2,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        versionedTaskBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertAddressBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                addressBookWithTask1,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                Collections.singletonList(addressBookWithTask2));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertThrows(VersionedTaskBook.NoRedoableStateException.class, versionedTaskBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                emptyAddressBook, addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertThrows(VersionedTaskBook.NoRedoableStateException.class, versionedTaskBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareAddressBookList(addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook copy \u003d prepareAddressBookList(addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(versionedTaskBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(versionedTaskBook.equals(versionedTaskBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithTask2, addressBookWithTask3);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                addressBookWithTask1, addressBookWithTask2);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Asserts that {@code versionedTaskBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * states before {@code versionedTaskBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * and states after {@code versionedTaskBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private void assertAddressBookListStatus(VersionedTaskBook versionedTaskBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                             List\u003cReadOnlyTaskBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                             ReadOnlyTaskBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                                             List\u003cReadOnlyTaskBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(new AddressBook(versionedTaskBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        while (versionedTaskBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            versionedTaskBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        for (ReadOnlyTaskBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedTaskBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            versionedTaskBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        for (ReadOnlyTaskBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            versionedTaskBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedTaskBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTaskBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Creates and returns a {@code VersionedTaskBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * {@code VersionedTaskBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private VersionedTaskBook prepareAddressBookList(ReadOnlyTaskBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d new VersionedTaskBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            versionedTaskBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            versionedTaskBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return versionedTaskBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Shifts the {@code versionedTaskBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTaskBook versionedTaskBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            versionedTaskBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DeadlineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "emobeany"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.INVALID_0_JAN_2018;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.INVALID_1ST_0_2018;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.INVALID_1ST_13_2018;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.INVALID_1ST_JAN_10000;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.INVALID_1ST_JAN_2017;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//import static seedu.address.testutil.TypicalDeadlines.INVALID_29TH_FEB_2018;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//import static seedu.address.testutil.TypicalDeadlines.INVALID_30TH_FEB_2020;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//import static seedu.address.testutil.TypicalDeadlines.INVALID_31ST_APR_2018;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.INVALID_32ND_JAN_2018;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_1ST_APR_2018;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_1ST_JAN_2018;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_1ST_JAN_9999;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//import static seedu.address.testutil.TypicalDeadlines.VALID_28TH_FEB_2018;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//import static seedu.address.testutil.TypicalDeadlines.VALID_29TH_FEB_2020;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//import static seedu.address.testutil.TypicalDeadlines.VALID_30TH_APR_2018;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_31ST_JAN_2018;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//@@author emobeany"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeadlineTest.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Invalid deadline with 0 day or month -\u003e Returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_0_JAN_2018.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_1ST_0_2018.toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Valid deadline -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(VALID_1ST_JAN_2018.toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        /*// Valid deadline for february -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(VALID_28TH_FEB_2018.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Invalid deadline for february in common year -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_29TH_FEB_2018.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Valid deadline for february during leap year -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(VALID_29TH_FEB_2020.toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Invalid deadline for february during leap year -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_30TH_FEB_2020.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Valid deadline for months with 30 days -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(VALID_30TH_APR_2018.toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Invalid deadline for months with 30 days -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_31ST_APR_2018.toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "emobeany"
        },
        "content": "*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Valid deadline for months with 31 days -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(VALID_31ST_JAN_2018.toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Invalid deadline for months with 31 days -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_32ND_JAN_2018.toString()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Invalid month -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_1ST_0_2018.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_1ST_13_2018.toString()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Valid month -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(VALID_1ST_APR_2018.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Valid year -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(VALID_1ST_JAN_9999.toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Invalid year -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_1ST_JAN_2017.toString()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(INVALID_1ST_JAN_10000.toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        Deadline copy1stJan2018 \u003d new DeadlineBuilder(VALID_1ST_JAN_2018).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        logger.info(\"original: \" + VALID_1ST_JAN_2018);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        logger.info(\"copy: \" + copy1stJan2018);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(VALID_1ST_JAN_2018.equals(copy1stJan2018));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertTrue(VALID_1ST_JAN_2018.equals(VALID_1ST_JAN_2018));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(VALID_1ST_JAN_2018.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Different types -\u003e return false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(VALID_1ST_JAN_2018.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Different day -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(VALID_1ST_JAN_2018.equals(VALID_31ST_JAN_2018));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Different month -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(VALID_1ST_JAN_2018.equals(VALID_1ST_APR_2018));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        // Different year -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        assertFalse(VALID_1ST_JAN_2018.equals(VALID_1ST_JAN_9999));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "emobeany": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_1ST_JAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LEVEL_HIGH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TaskTest.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(CS2113_TASK_1.isSameTask(CS2113_TASK_1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.isSameTask(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withDeadline(VALID_DEADLINE_1ST_JAN).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withTitle(VALID_TITLE_2).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same title, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                .withPriority(VALID_PRIORITY_LEVEL_HIGH).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(CS2113_TASK_1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task task1Copy \u003d new TaskBuilder(CS2113_TASK_1).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        logger.info(\"original : \" + CS2113_TASK_1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        logger.info(\"copy : \" + task1Copy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(CS2113_TASK_1.equals(task1Copy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(CS2113_TASK_1.equals(CS2113_TASK_1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.equals(CS2113_TASK_2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withDeadline(VALID_DEADLINE_1ST_JAN).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.equals(editedTask1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withTitle(VALID_TITLE_2).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.equals(editedTask1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withDescription(VALID_DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.equals(editedTask1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        // different priority level -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withPriority(VALID_PRIORITY_LEVEL_HIGH).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(CS2113_TASK_1.equals(editedTask1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LEVEL_HIGH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_TASK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(uniqueTaskList.contains(CS2113_TASK_1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(uniqueTaskList.contains(CS2113_TASK_1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void contains_taskWithSameDeadlineAndTitleInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Task editedTask1 \u003d new TaskBuilder(CS2113_TASK_1).withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                .withPriority(VALID_PRIORITY_LEVEL_HIGH).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedTask1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTask(null, CS2113_TASK_1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTask(CS2113_TASK_1, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTask(CS2113_TASK_1, CS2113_TASK_1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTask(CS2113_TASK_1, CS2113_TASK_1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedUniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.remove(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void remove_personDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.remove(CS2113_TASK_1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.remove(CS2113_TASK_1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTasks((UniqueTaskList) null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setTasks_uniquePersonList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedUniqueTaskList.add(CS2113_TASK_2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTasks((List\u003cTask\u003e) null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.add(CS2113_TASK_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(CS2113_TASK_2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        expectedUniqueTaskList.add(CS2113_TASK_2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void setTasks_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(CS2113_TASK_1, CS2113_TASK_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.setTasks(listWithDuplicateTasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        uniqueTaskList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //@Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlTaskBookStorage addressBookStorage \u003d new XmlTaskBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * {@link XmlTaskBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlTaskBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddressBook original \u003d getTypicalTaskBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        storageManager.saveTaskBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ReadOnlyTaskBook retrieved \u003d storageManager.readTaskBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertNotNull(storageManager.getTaskBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlTaskBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        storage.handleAddressBookChangedEvent(new TaskBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    class XmlTaskBookStorageExceptionThrowingStub extends XmlTaskBookStorage {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public XmlTaskBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        public void saveTaskBook(ReadOnlyTaskBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "chelseyong": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedTaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2102_HOMEWORK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class XmlAdaptedTaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"#$@(\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String INVALID_PRIORITY_LEVEL \u003d \"midhigh\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String INVALID_EXPECTED_NUM_OF_HOURS \u003d \"one\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    //private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_DEADLINE \u003d CS2102_HOMEWORK.getDeadline().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_MODULECODE \u003d CS2102_HOMEWORK.getModuleCode();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_TITLE \u003d CS2102_HOMEWORK.getTitle();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d CS2102_HOMEWORK.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_PRIORITY_LEVEL \u003d CS2102_HOMEWORK.getPriorityLevel().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final String VALID_EXPECTED_NUM_OF_HOURS \u003d Integer.toString(CS2102_HOMEWORK.getExpectedNumOfHours());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(CS2102_HOMEWORK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(CS2102_HOMEWORK, task.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new XmlAdaptedTask(INVALID_DEADLINE, VALID_MODULECODE, VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        VALID_PRIORITY_LEVEL, VALID_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_DEADLINE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(null, VALID_MODULECODE, VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                VALID_PRIORITY_LEVEL, VALID_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_invalidPriorityLevel_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new XmlAdaptedTask(VALID_DEADLINE, VALID_MODULECODE, VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        INVALID_PRIORITY_LEVEL, VALID_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d PriorityLevel.MESSAGE_PRIORITY_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_nullPriorityLevel_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask person \u003d new XmlAdaptedTask(VALID_DEADLINE, VALID_MODULECODE, VALID_TITLE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                VALID_DESCRIPTION, null, VALID_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PriorityLevel.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_invalidExpectedNumOfHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask task \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new XmlAdaptedTask(VALID_DEADLINE, VALID_MODULECODE, VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                        VALID_PRIORITY_LEVEL, INVALID_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d \"Expected number of hours have to be an integer\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, task::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_nullExpectedNumOfHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask person \u003d new XmlAdaptedTask(VALID_DEADLINE, VALID_MODULECODE, VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                VALID_PRIORITY_LEVEL, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                \"Expected number of hours expected to complete\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_DEADLINE, VALID_MODULECODE, null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                VALID_PRIORITY_LEVEL, VALID_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Title\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_DEADLINE, VALID_MODULECODE, VALID_TITLE, null,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                VALID_PRIORITY_LEVEL, VALID_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Description\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlAdaptedTask person \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                new XmlAdaptedTask(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableTaskBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class XmlSerializableTaskBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableTaskBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTaskBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTasksInTaskBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlSerializableTaskBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                XmlSerializableTaskBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d getTypicalTaskBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlSerializableTaskBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                XmlSerializableTaskBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlSerializableTaskBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                XmlSerializableTaskBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expectMessage(XmlSerializableTaskBook.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "chelseyong": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlTaskBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CG1112_HOMEWORK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CG2271_HOMEWORK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113_HOMEWORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class XmlTaskBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlTaskBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        readTaskBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskBook\u003e readTaskBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new XmlTaskBookStorage(Paths.get(filePath)).readTaskBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertFalse(readTaskBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        readTaskBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void readTaskBook_invalidTaskBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        readTaskBook(\"invalidTaskBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void readTaskBook_invalidAndValidTaskBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        readTaskBook(\"invalidAndValidTaskBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void readAndSaveTaskBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTaskBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddressBook original \u003d getTypicalTaskBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        XmlTaskBookStorage xmlTaskBookStorage \u003d new XmlTaskBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        xmlTaskBookStorage.saveTaskBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        ReadOnlyTaskBook readBack \u003d xmlTaskBookStorage.readTaskBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        original.addTask(CG2271_HOMEWORK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        original.removeTask(CS2113_HOMEWORK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        xmlTaskBookStorage.saveTaskBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        readBack \u003d xmlTaskBookStorage.readTaskBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        original.addTask(CG1112_HOMEWORK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        xmlTaskBookStorage.saveTaskBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        readBack \u003d xmlTaskBookStorage.readTaskBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void saveTaskBook_nullTaskBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        saveTaskBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private void saveTaskBook(ReadOnlyTaskBook taskBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            new XmlTaskBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                    .saveTaskBook(taskBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public void saveTaskBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        saveTaskBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeadlineBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "emobeany"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//@@author emobeany"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "emobeany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "emobeany"
        },
        "content": " * A utility class to build Deadline objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "emobeany"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class DeadlineBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DEFAULT_DAY \u003d \"1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DEFAULT_MONTH \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final String DEFAULT_YEAR \u003d \"2018\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private String year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public DeadlineBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.day \u003d DEFAULT_DAY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.month \u003d DEFAULT_MONTH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.year \u003d DEFAULT_YEAR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Initialises the DeadBuilder with the data of {@code deadlineToCopu}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public DeadlineBuilder(Deadline deadlineToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.day \u003d deadlineToCopy.getDay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.month \u003d deadlineToCopy.getMonth();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.year \u003d deadlineToCopy.getYear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Sets the {@code Day} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public DeadlineBuilder withDay(String day) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Sets the {@code Month} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public DeadlineBuilder withMonth(String month) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     * Sets the {@code Year} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public DeadlineBuilder withYear(String year) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public Deadline build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "        return new Deadline(day, month, year);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "emobeany": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TaskBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Adds a new {@code Task} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBookBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        addressBook.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "chelseyong": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Milestone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.PriorityLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"1/1/2018\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public static final String DEFAULT_MODULECODE \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Complete code refactoring\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"refer to notes\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"high\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final boolean DEFAULT_COMPLETE \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String DEFAULT_EXPECTED_NUM_OF_HOURS \u003d \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final String DEFAULT_COMPLETED_NUM_OF_HOURS \u003d \"0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Set\u003cMilestone\u003e DEFAULT_MILESTONES \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private PriorityLevel priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private int expectedNumOfHours;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private int completedNumOfHours;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private Set\u003cMilestone\u003e milestones;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.moduleCode \u003d DEFAULT_MODULECODE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.title \u003d DEFAULT_TITLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.priority \u003d new PriorityLevel(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.isCompleted \u003d DEFAULT_COMPLETE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d Integer.parseInt(DEFAULT_COMPLETED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d Integer.parseInt(DEFAULT_EXPECTED_NUM_OF_HOURS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.milestones \u003d DEFAULT_MILESTONES;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.deadline \u003d taskToCopy.getDeadline();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.moduleCode \u003d taskToCopy.getModuleCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.title \u003d taskToCopy.getTitle();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.priority \u003d taskToCopy.getPriorityLevel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.isCompleted \u003d taskToCopy.isCompleted();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d taskToCopy.getExpectedNumOfHours();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d taskToCopy.getCompletedNumOfHours();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.milestones \u003d taskToCopy.getMilestoneList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Sets the ModuleCode of the {@code Task} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    public TaskBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Sets the Title of the {@code Task} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Sets the {@code description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Sets the {@code Priority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.priority \u003d new PriorityLevel(priority);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Sets the completed status of the {@code Task} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder withCompletedNumOfHours(int hours) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.completedNumOfHours \u003d hours;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Sets the expected number of hours of the {@code Task} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder withExpectedNumOfHours(int expectedNumOfHours) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.expectedNumOfHours \u003d expectedNumOfHours;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Sets the milestones of the {@code Task} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public TaskBuilder withMilestones(Set\u003cMilestone\u003e milestones) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.milestones \u003d milestones;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * Build the task with the parameters set"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanChunCheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new Task(deadline, moduleCode, title, description, priority, expectedNumOfHours,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "                completedNumOfHours, isCompleted, milestones);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 119,
      "ChanChunCheong": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static String getAddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return AddTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE + task.getModuleCode() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        sb.append(PREFIX_TITLE + task.getTitle() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + task.getDescription() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        sb.append(PREFIX_PRIORITY + task.getPriorityLevel().priorityLevel + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        sb.append(PREFIX_HOURS + Integer.toString(task.getExpectedNumOfHours()) + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDeadlines.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "emobeany"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_AND_MONTH_0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_FOR_COMMON_YEAR_FEB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_FOR_LEAP_YEAR_FEB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_FOR_MONTHS_WITH_30_DAYS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_FOR_MONTHS_WITH_31_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONTH_13;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_10000;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_PASSED_2017;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FOR_FEB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FOR_LEAP_YEAR_FEB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FOR_MONTHS_WITH_30_DAYS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FOR_MONTHS_WITH_31_DAYS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONTH_APR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONTH_FEB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONTH_JAN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_2018;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_2020;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_9999;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "emobeany"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "emobeany"
        },
        "content": "//@@author emobeany"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "emobeany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "emobeany"
        },
        "content": " * A utility class containing a list of {@code Deadline} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "emobeany"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "emobeany"
        },
        "content": "public class TypicalDeadlines {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    // For day validity testing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_0_JAN_2018 \u003d new DeadlineBuilder().withDay(INVALID_DAY_AND_MONTH_0)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_JAN).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline VALID_1ST_JAN_2018 \u003d new DeadlineBuilder().withDay(VALID_DAY_1)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_JAN).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    // For february"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline VALID_28TH_FEB_2018 \u003d new DeadlineBuilder().withDay(VALID_DAY_FOR_FEB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_FEB).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_29TH_FEB_2018 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withDay(INVALID_DAY_FOR_COMMON_YEAR_FEB).withMonth(VALID_MONTH_JAN).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    // For leap year"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline VALID_29TH_FEB_2020 \u003d new DeadlineBuilder().withDay(VALID_DAY_FOR_LEAP_YEAR_FEB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_FEB).withYear(VALID_YEAR_2020).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_30TH_FEB_2020 \u003d new DeadlineBuilder().withDay(INVALID_DAY_FOR_LEAP_YEAR_FEB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_FEB).withYear(VALID_YEAR_2020).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    // Months with 30 days"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline VALID_30TH_APR_2018 \u003d new DeadlineBuilder().withDay(VALID_DAY_FOR_MONTHS_WITH_30_DAYS)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_APR).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_31ST_APR_2018 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withDay(INVALID_DAY_FOR_MONTHS_WITH_30_DAYS).withMonth(VALID_MONTH_APR).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    // Months with 31 days"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline VALID_31ST_JAN_2018 \u003d new DeadlineBuilder().withDay(VALID_DAY_FOR_MONTHS_WITH_31_DAYS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_JAN).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_32ND_JAN_2018 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withDay(INVALID_DAY_FOR_MONTHS_WITH_31_DAYS).withMonth(VALID_MONTH_JAN).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    // For month validity testing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline VALID_1ST_APR_2018 \u003d new DeadlineBuilder().withDay(VALID_DAY_1)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_APR).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_1ST_0_2018 \u003d new DeadlineBuilder().withDay(VALID_DAY_1)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(INVALID_DAY_AND_MONTH_0).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_1ST_13_2018 \u003d new DeadlineBuilder().withDay(VALID_DAY_1)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(INVALID_MONTH_13).withYear(VALID_YEAR_2018).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    // For year validity testing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_1ST_JAN_2017 \u003d new DeadlineBuilder().withDay(VALID_DAY_1)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_JAN).withYear(INVALID_YEAR_PASSED_2017).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline VALID_1ST_JAN_9999 \u003d new DeadlineBuilder().withDay(VALID_DAY_1)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_JAN).withYear(VALID_YEAR_9999).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    public static final Deadline INVALID_1ST_JAN_10000 \u003d new DeadlineBuilder().withDay(VALID_DAY_1)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "emobeany"
        },
        "content": "            .withMonth(VALID_MONTH_JAN).withYear(INVALID_YEAR_10000).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "emobeany"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "emobeany"
        },
        "content": "    private TypicalDeadlines() {} // prevents instantiation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "emobeany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "emobeany": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "chelseyong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_12TH_MAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_1ST_JAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_31ST_MARCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2113;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LEVEL_HIGH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LEVEL_LOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LEVEL_MEDIUM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "//@@author chelseyong"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CS2113_HOMEWORK \u003d new TaskBuilder().withDeadline(\"1/1/2018\").withModuleCode(\"CS2113\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            .withTitle(\"Complete code refactoring\").withDescription(\"Refer to notes!\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            .withPriority(\"low\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CS2101_HOMEWORK \u003d new TaskBuilder().withDeadline(\"9/10/2018\").withModuleCode(\"CS2101\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withTitle(\"Plan a OP2 meeting\").withDescription(\"OP2 is 40% of the grade\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withPriority(\"high\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CS2102_HOMEWORK \u003d new TaskBuilder().withDeadline(\"11/11/2018\").withModuleCode(\"CS2102\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withTitle(\"Set up the backend framework\").withDescription(\"Using Flask\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            .withPriority(\"medium\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CG2271_HOMEWORK \u003d new TaskBuilder().withDeadline(\"5/6/2018\").withModuleCode(\"CG2271\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withTitle(\"Implement message passing\").withDescription(\"Symmetric \u0026 indirect naming scheme\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            .withDescription(\"low\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CG1112_HOMEWORK \u003d new TaskBuilder().withDeadline(\"2/5/2018\").withModuleCode(\"CG1112\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withTitle(\"Write buffer class\").withDescription(\"refer to api\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            .withDescription(\"high\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CS2113_TASK_1 \u003d new TaskBuilder().withDeadline(VALID_DEADLINE_31ST_MARCH)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS2113).withTitle(VALID_TITLE_1).withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withPriority(VALID_PRIORITY_LEVEL_LOW).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CS2113_TASK_2 \u003d new TaskBuilder().withDeadline(VALID_DEADLINE_1ST_JAN)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS2113).withTitle(VALID_TITLE_2).withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withPriority(VALID_PRIORITY_LEVEL_HIGH).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static final Task CS2113_TASK_3 \u003d new TaskBuilder().withDeadline(VALID_DEADLINE_12TH_MAY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS2113).withTitle(VALID_TITLE_3).withDescription(VALID_DESCRIPTION_3)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        .withPriority(VALID_PRIORITY_LEVEL_MEDIUM).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    // public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static AddressBook getTypicalTaskBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2101_HOMEWORK, CS2102_HOMEWORK, CS2113_HOMEWORK));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chelseyong": 78
    }
  }
]
