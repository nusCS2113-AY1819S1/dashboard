[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d BookInventory"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/nusCS2113-AY1819S1/addressbook-level4[image:https://travis-ci.org/nusCS2113-AY1819S1/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* This is a desktop Book Inventory application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* It is specially designed just for Store Owners to keep track of their items and revenue for their shop."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Customers can also check the availability of the items they are looking for before heading down to the store."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* So what are you waiting for?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** Download it NOW!!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d Site Map (Unrelated Links will be remove later nearing the end of the project)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Original source code adapted from SE-EDU at http://github.com/se-edu/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 8,
      "-": 32
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "BookInventory was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "\u003d\u003d\u003d Koh Jun Kiat"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "image::kohjunkiat.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "{empty}[https://www.youtube.com/watch?v\u003dzWoHr_2GbY4\u0026gl\u003dSG\u0026hl\u003den-GB[homepage]] [http://github.com/kohjunkiat[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "Role: Scheduler +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "Responsibilities: Dispatching jobs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "\u003d\u003d\u003d Lee Gui Yong"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "image::leeguiyong.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "{empty}[https://github.com/guiyong96[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "\u003d\u003d\u003d Ashley Teo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "image::20170610_111528.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "{empty}[http://github.com/iashcole[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Kenneth Chua"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "image::kennethcsj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "{empty}[http://github.com/kennethcsj[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 9,
      "kennethcsj": 5,
      "-": 32,
      "guiyong96": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d BookInventory Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ":repoURL: http://github.com/CS2113-AY1819S1-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "By: `Team SE-EDU, W13-4`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "BookInventory™ is catered solely for students as well as other managerial roles such as store managers and accountant. BookInventory™ allows store managers to increase/decrease stocks for each book. Accountants will be able to check the total revenue and profits for individual books to make better decisions to improve the sales. Students will have access in checking the availability of materials related to their modules. Most importantly, BookInventory™ is optimized for those who prefer to work with Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Run the `seedu.quantity.MainApp` and try a few commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/quantity/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Note how the `Model` simply raises a `BookInventoryChangedEvent` when the Book Inventory data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/quantity/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/quantity/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "link:{repoURL}/src/main/java/seedu/quantity/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".  `Logic` uses the `BookInventoryParser` class to parse the user command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a book) and/or raise events."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/quantity/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* stores the Book Inventory data."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Book Inventory`, which `Book` can reference. This would allow `Book Inventory` to only require one `Tag` object per unique `Tag`, instead of each `Book` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/quantity/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* can save the Book Inventory data in xml format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Classes used by multiple components are in the `seedu.bookinventory.commons` package."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedBookInventory`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "It extends `BookInventory` with an undo/redo history, stored internally as an `bookInventoryStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `VersionedBookInventory#commit()` -- Saves the current quantity book state in its history."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `VersionedBookInventory#undo()` -- Restores the previous quantity book state from its history."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `VersionedBookInventory#redo()` -- Restores a previously undone quantity book state from its history."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitBookInventory()`, `Model#undoBookInventory()` and `Model#redoBookInventory()` respectively."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookInventory` will be initialized with the initial quantity book state, and the `currentStatePointer` pointing to that single quantity book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th book in the quantity book. The `delete` command calls `Model#commitBookInventory()`, causing the modified state of the quantity book after the `delete 5` command executes to be saved in the `bookInventoryStateList`, and the `currentStatePointer` is shifted to the newly inserted quantity book state."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new book. The `add` command also calls `Model#commitBookInventory()`, causing another modified quantity book state to be saved into the `bookInventoryStateList`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "If a command fails its execution, it will not call `Model#commitBookInventory()`, so the quantity book state will not be saved into the `bookInventoryStateList`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Step 4. The user now decides that adding the book was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoBookInventory()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous quantity book state, and restores the quantity book to that state."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial quantity book state, then there are no previous quantity book states to restore. The `undo` command uses `Model#canUndoBookInventory()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoBookInventory()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the quantity book to that state."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "If the `currentStatePointer` is at index `bookInventoryStateList.size() - 1`, pointing to the latest quantity book state, then there are no undone quantity book states to restore. The `redo` command uses `Model#canRedoBookInventory()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the quantity book, such as `list`, will usually not call `Model#commitBookInventory()`, `Model#undoBookInventory()` or `Model#redoBookInventory()`. Thus, the `BookInventoryStateList` remains unchanged."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitBookInventory()`. Since the `currentStatePointer` is not pointing at the end of the `BookInventoryStateList`, all quantity book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire quantity book."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of quantity book states."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedBookInventory`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// tag::sellcommand[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Sell feature"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "The sell command utilises both the `Model` and `Logic` component to fulfil its function."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "The following sequence diagram shows how the sell operation is implemented:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "image::SellSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "After SoldBook is created, the inventory book will be updated through `Model#updateBook()`, `Model#updateFilteredBookList()` and `Model#commitBookInventory()` to store the latest quantity of books left."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How sell command is implemented"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* **Alternative 1 (current choice):** Decreases quantity in the Quantity Class."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** Pros: Code is more cohesive."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** Cons: Adds more code to Quantity Class"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* **Alternative 2:** Decreases quantity in the Book Class."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** Pros: Does not need to edit Quantity Class."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** Cons: Code becomes less cohesive."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// end::sellcommand[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "// tag::Request[]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d Request feature"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "The Request command utilises both the `RequestModel` and `Logic` component to fulfil its function."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "This is accessible for all users."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Request command is implemented in a different category"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "As mentioned above, Request is called in RequestModel and RequestStorage."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "A request object consists of three objects, Isbn, Email, and Quantity."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d RequestModel component"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".Structure of the RequestModel Component"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "image::RequestModelClassDiagram.jpg[width\u003d\"800\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "The implementation is similar to 2.4. Model component."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Note that XmlAdaptedTag class is removed as request has no tags."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d RequestStorage component"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".Structure of the RequestStorage Component"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "image::RequestStorageClassDiagram.jpg[width\u003d\"800\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Likewise, this implementation is similar to 2.5. Storage component."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Request command is implemented"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".Structure of Request (High Level Sequence Diagram)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "image::HighLevelRequestSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* **Similar to Add Command**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** After request command is called by the user, it gets parsed through a RequestListParser."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** The UI also prompts to EventCenter and logs out that the Request List has changed."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Request object is created and added to the model."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** The storage then receives the request and returns message to model, which is then transferred to the UI."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** This notifies the user that the request is successfully submitted."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "// end::Request[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "// tag::stockcommand[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "\u003d\u003d\u003d Stock feature"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "The sell command utilises both the `Model` and `Logic` component to fulfil its function."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "The stock operation is similar to the sell operation, refer to sell command for sequence diagram:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How stock command is implemented"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "* **Alternative 1 (current choice):** Increases quantity in the Quantity Class."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "** Pros: Code is more cohesive."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iashcole"
        },
        "content": "** Cons: Adds more code to Quantity Class."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "* **Alternative 2:** Replace quantity in the Book Class."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "** Pros: Does not need to edit Quantity Class."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "** Cons: Code becomes less cohesive."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "// end::stockcommand[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iashcole"
        },
        "content": "\u003d\u003d\u003d Password Protection"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iashcole"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iashcole"
        },
        "content": "A password is required by the user for him/her to be able to use BookInventory."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iashcole"
        },
        "content": "A password must be secured and kept using a hashing algorithm. In other words, the password must not be in plain text in the code."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iashcole"
        },
        "content": "In order to prevent brute force, a user has up to 3 tries to key in the correct password. Failure to do so will end the application."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iashcole"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iashcole"
        },
        "content": "\u003d\u003d\u003d\u003d\u003dAspect: How hashing is done"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iashcole"
        },
        "content": "* **Alternative 1: Use existing hashing algorithms in java libraries such as `java.security.*`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iashcole"
        },
        "content": "** Pros: Easy and fast to implement."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iashcole"
        },
        "content": "** Cons: If the algorithm in the source code is easily decryptable , can be easily bruteforced."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iashcole"
        },
        "content": "* **Alternative 2: Implement own hashing algorithm"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iashcole"
        },
        "content": "** Pros: Encryption is foreign to interventions, harder to decrypt."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iashcole"
        },
        "content": "** Cons: Can be tedious and time-consuming, might risk having similar keys."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.quantity.ui` package."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `seedu.quantity.commons.StringUtilTest`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `seedu.quantity.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `seedu.quantity.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/quantity/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "A project often depends on third-party libraries. For example, Book Inventory depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all books in the list."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/quantity/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/quantity/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/quantity/logic/parser/BookInventoryParser.java[`BookInventoryParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/quantity/logic/parser/BookInventoryParser.java[`BookInventoryParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the quantity book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the quantity book."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/quantity/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/quantity/model/BookInventory.java[`BookInventory`] API need to be updated."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/quantity/model/BookInventory.java[`BookInventory`] and link:{repoURL}/src/main/java/seedu/quantity/model/book/Book.java[`Book`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/quantity/model/BookInventory.java[`BookInventory`] allows you to update a book, and link:{repoURL}/src/main/java/seedu/quantity/model/book/Book.java[`Book`] allows you to update the tags."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/quantity/model/BookInventory.java[`BookInventory`]. Loop through each book, and remove the `tag` from each book."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/quantity/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/quantity/model/ModelManager.java[`ModelManager`] should call `BookInventory#removeTag(Tag)`."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your quantity book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last book in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Use different colors for different tags inside book cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/quantity/ui/BookCard.java[the `BookCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** You can modify the existing test methods for `BookCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/quantity/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/quantity/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/quantity/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/quantity/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/quantity/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/quantity/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/quantity/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/quantity/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/BookInventorySystemTest.java[`BookInventorySystemTest#assertCommandBoxShowsDefaultStyle() and BookInventorySystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/quantity/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the quantity book."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/quantity/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the quantity book is updated."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/quantity/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of books when the application just started."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/quantity/ui/StatusBarFooter.java[`StatusBarFooter#handleBookInventoryChangedEvent(BookInventoryChangedEvent)`] to update the number of books whenever there are new changes to the BookInventory."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/BookInventorySystemTest.java[`BookInventorySystemTest`] to also verify the new total number of books status bar."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the quantity book to the cloud. However, the current implementation of the application constantly saves the quantity book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the quantity book storage."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add a new method `backupBookInventory(ReadOnlyBookInventory)`, so that the quantity book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/quantity/storage/BookInventoryStorage.java[`BookInventoryStorage`] interface."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/quantity/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/quantity/storage/XmlBookInventoryStorage.java[`XmlBookInventoryStorage`] class."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*Scenario:* You are a software maintainer for `BookInventory`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Edits the remark for a book specified in the `INDEX`. +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Edits the remark for the first book to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Removes the remark for the first book."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/quantity/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/quantity/logic/parser/BookInventoryParser.java[`BookInventoryParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/quantity/logic/parser/BookInventoryParserTest.java[`BookInventoryParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/quantity/logic/parser/BookInventoryParser.java[`BookInventoryParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/quantity/logic/parser/BookInventoryParserTest.java[`BookInventoryParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `BookCard`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/quantity/ui/BookCard.java[`BookCard`] s to display a remark for each book later."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/BookListCard.fxml[`BookListCard.fxml`]."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/quantity/ui/BookCard.java[`BookCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/BookCardHandle.java[`BookCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/quantity/model/book/Book.java[`Book`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/quantity/model/book/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Book` to support a `Remark` field"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/quantity/model/book/Book.java[`Book`]."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/quantity/model/book/Book.java[`Book`]."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the book will be created without a remark)."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/quantity/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `bookInventory.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedBook` class"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "We now have `Remark` s for `Book` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/quantity/storage/XmlAdaptedBook.java[`XmlAdaptedBook`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Fix `invalidAndValidBookBookInventory.xml`, `typicalBooksBookInventory.xml`, `validBookInventory.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `BookBuilder`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Since `Book` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/quantity/testutil/BookBuilder.java[`BookBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/quantity/model/book/Book.java[`Book`]."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/quantity/testutil/BookBuilder.java[`BookBuilder`]. This method will create a new `Remark` for the book that it is currently building."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Try and use the method on any sample `Book` in link:{repoURL}/src/test/java/seedu/quantity/testutil/TypicalBooks.java[`TypicalBooks`]."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `BookCard`"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/quantity/ui/BookCard.java[`BookCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/quantity/ui/BookCard.java[`BookCard`]\u0027s constructor to bind the `Remark` field to the `Book` \u0027s remark."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/quantity/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysBook(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a book."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* * *` |New user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* * *` |Helpful user |add/remove books |Share my knowledge with others"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* * *` |Student |Find for books related to my module |Easily access the correct materials"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* * *` |Overachiever |See peer reviews for books related to my module |Get access to helpful materials"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* *` |NSF |Find out what books are relevant to the modules I\u0027m about to take in university |Read the books during my free time"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* *` |Professor |Add rating/review to books |Recommend this book to the rest                                      people"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* *` |NUS Staff |Use the program as and when |Easily sieve out the books that i want to read"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* *` |Non-Tech Savvy User|Have a straightforward easy-to-understand help page |Search on the books i would like to find with"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* *` |Careless user |Undo/Redo my command |Easily remove/get back to the current/next state"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`* *` |User |Have an application with minimal downtime |Use the application at any point of time."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Unmotivated student |Have a colorful GUI |Have a better mood to study"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |New User |Have a user-friendly application |Use the catalogue easily"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Exchange student |Use the program in my native language |Understand the program easily"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Bookshop owner |Sell the books that people want |KNow which books are in demand"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Underachiever |Have reviews for books which are easy to understand |Grasp on concepts quickly"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Student nearing the exams |Have reviews for books which summarises the module |Recap on concepts quickly"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Teaching assistant |Have a list of recommended books |Recommend my weaker students to read on those"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Author |Have the books listed neatly and visibly under users\u0027 module selection |Help students in their studies and also help them gain an appreciation to the module/"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Passionate student willing to help others |Have a moderately long word limit for the review |Share my personal experience with this book and how this book is recommended"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |Book enthusiast |Have a review for all the books I read |Allow people to acquire knowledge."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "|`*` |user with many books in the quantity book |sort books by name |locate a book easily"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "(For all use cases below, the *System* is the `BookInventory` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d Use case: Delete book"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "1.  User requests to list books"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "2.  BookInventory shows a list of books"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "3.  User requests to delete a specific book in the list"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "4.  BookInventory deletes the book"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** 3a1. BookInventory shows an error message."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".  Should be able to hold up to 1000 books without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d Deleting a book"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ". Deleting a book while all books are listed"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ".. Prerequisites: List all books using the `list` command. Multiple books in the list."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "   Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 19,
      "kennethcsj": 30,
      "-": 839,
      "guiyong96": 190,
      "iashcole": 18
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/quantity/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/quantity/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/quantity/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/quantity/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/quantity/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/quantity/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/quantity/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/quantity/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/quantity/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/quantity/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "-": 256,
      "guiyong96": 10
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d BookInventory - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ":repoURL: http://github.com/CS2113-AY1819S1-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "By: `Team SE-EDU, W13-4`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "BookInventory is catered for a variety of users, ranging from inventory keeper, accountant to students. Inventory Keeper is able to increase/decrease stocks for each book. The accountant is able to check the total revenue and profits for individual books to make better decisions to improve the sales. Students will have access in checking the availability of materials related to their modules. Most importantly, BookInventory is optimized for those who prefer to work with Command Line Interface (CLI) while stil having the benefits of a GraphicalUser Interface (GUI). Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ".  Downloading the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Visit https://github.com/CS2113-AY1819S1-W13-4/main and click on \"Clone or download\" as circled in the screenshot below."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "image::download.png[width\u003d\"450\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* If you are a github user, clone the repository."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* However, it is encouraged that you \"Download ZIP\" in the drop-down menu."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Once it is downloaded, unzip the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iashcole"
        },
        "content": ". Key-in password"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iashcole"
        },
        "content": "* A password will be required by the application to use it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iashcole"
        },
        "content": "* If you do not know the password, please contact us using github directly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ". Input Commands"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Some example commands you can try:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** *`help`* : view all commands available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** *`list`* : list all books"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "** **`add`**`n/Harry Potter i/978-2-12-345680-3 p/60.70 q/100 c/30.90` : adds a book named `Harry Potter` to the Inventory List."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** *`clear`* : clears the entire list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "** *`exit`* : exits the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Harry Potter`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Harry Potter t/cs2113t` or as `n/Harry Potter`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Items in brackets are *required* and always *private* e.g. `q/QUANTITY (c/COST)`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Items in arrow brackets are commands that are commands available depending on the user e.g. \u003cAccountant\u003e means command only usable by accountant."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003d\u003d\u003d Adding a book: `add`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Adds a book to the inventory list +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `add n/NAME i/ISBN13 p/PRICE q/QUANTITY (c/COST) [t/TAG]...`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "A book can have any number of tags (including 0)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `add n/Harry Potter i/978-2-12-345680-3 p/60.70 q/100 c/30.90 t/difficult`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `add n/Lord of the Rings i/978-2-12-345123-3 p/59.90 q/271 c/20.99`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Listing all books : `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Shows a list of all books in the inventory list. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Locating book by iSBN13: `find`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Finds book with the iSBN13 from the inventory. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `find i/iSBN13`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `find i/978-2-12-345680-3`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Locating book by tags: `search`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Search for books by tags from the inventory"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `search TAG`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* `search cs2113t`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* The search is case insensitive. e.g `cs2113t` will match `CS2113T`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Only the tag is searched."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Only full words will be matched e.g. `cs2113` will not match `cs2113t`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Decrease Book Quantity (Items Sold) : `sell`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Decrease an existing book quantity in the inventory list. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `sell INDEX QUANTITY` OR `sell ISBN13 QUANTITY`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Decrease the quantity at the specified `INDEX`. The index refers to the index number shown in the displayed inventory list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Existing quantity will be decrease by the input value."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "`sell 1 5` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Decrease the quantity available of the 1st book by 5."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `sell 978-2-12-345680-3 4` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Decrease the quantity available for the book with the corresponding ISBN13 by 4."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Increase Book Quantity (Ordered more books): `stock`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Increase an existing book quantity in the inventory list. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `stock INDEX QUANTITY` OR `stock ISBN13 QUANTITY`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Increase the stock at the specified `INDEX`. The index refers to the index number shown in the displayed inventory list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* Existing quantity will be increase by the input value."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "`stock 2 6` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Increase the quantity available of the 2nd book by 6."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `stock 978-2-12-345680-3 5` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Increase the quantity available for the book with the corresponding ISBN13 by 5."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Check Inventory: `check`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Finds books with quantity less than or equal to the given input value."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `check QUANTITY`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* `check 4` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Displays list of all books with quantity less than or equal to 4."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Deleting a book : `delete`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Deletes the specified book from the inventory list. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `delete i/ISBN13`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `delete i/978-2-12-345680-3` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Deletes the book with the corresponding iSBN13 from the inventory list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Requesting for a book : `request`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Requests to buy a book in the inventory. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `request i/ISBN13 e/EMAIL q/QUANTITY`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* The price is for inventory keeper to confirm order with requester."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `request i/978-2-12-345680-3 e/johnd@gmail.com q/5` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Requests for 5 same books with the corresponding iSBN13 with requester\u0027s price johnd@gmail.com"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Viewing of Requests : `viewrequests`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Views all the requests for books. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `viewrequests`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Restores the inventory book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Undoable commands: those commands that modify the inventory book\u0027s content (`add`, `delete`, `increase`, `decrease` and `clear`)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `delete i/978-2-12-345680-3` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "`undo` (reverses the `delete i/978-2-12-345680-3` command) +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* `check 4` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `delete i/978-2-12-345680-3` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "`undo` (reverses the `delete i/978-2-12-345680-3` command) +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `delete i/978-2-12-345680-3` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "`undo` (reverses the `delete i/978-2-12-345680-3` command) +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "`redo` (reapplies the `delete i/978-2-12-345680-3` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `delete i/978-2-12-345680-3` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "* `delete i/978-2-12-345680-3` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "`undo` (reverses the `delete i/978-2-12-345680-3` command) +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "`redo` (reapplies the `delete i/978-2-12-345680-3` command) +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Display account data : `showdata`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Displays accounting data"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `showdata`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Next Page : `next`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Displays next set of accounting data. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `next`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "\u003d\u003d\u003d Previous Page : `previous`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Displays the previous set of accounting data. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "Format: `previous`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Clears all entries from the BookInventory. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "BookInventory data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your          previous Inventory Book folder. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "*Q*: How to install Java? +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*A*: Visit https://docs.oracle.com/javase/10/install/overview-jdk-10-and-jre-10-installation.html for more information +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "*Q*: How do I get the latest version? +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "*A*: Watch us on github [https://github.com/CS2113-AY1819S1-W13-4] to get the latest updates"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Add* : `add n/NAME i/ISBN13 p/PRICE q/QUANTITY (c/COST) [t/TAG]...` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `add n/Harry Potter i/978-2-12-345680-3 p/60.70 q/100 c/30/90 t/difficult`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Find* : `find i/ISBN13` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `find i/978-2-12-345680-3`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Search* : `search TAG` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "e.g. `search cs2113t`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Sell* : `sell INDEX QUANTITY` OR `sell i/ISBN13 QUANTITY` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `sell 1 8` OR `sell i/978-2-12-345680-3 8`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "* *Stock* : `stock INDEX QUANTITY` OR `stock i/ISBN13 QUANTITY` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `stock 1 8` OR `stock i/978-2-12-345680-3 8`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Check* : `check QUANTITY` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "e.g. `check 4`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Request* : `request i/ISBN13 e/EMAIL q/QUANTITY` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `request i/978-2-12-345680-3 e/johnd@gmail.com q/5`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *View Request* : `viewrequests`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Display data* : `showdata`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Next* : `next`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Delete* : `delete i/ISBN13` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "e.g. `delete i/978-2-12-345680-3`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 5,
      "kennethcsj": 109,
      "-": 166,
      "guiyong96": 33,
      "iashcole": 4
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Runs all tests in the `seedu.quantity.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "Runs all non-GUI tests in the `seedu.quantity`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "guiyong96": 2
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "AddressBook - Level 4 is a desktop quantity book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.RequestList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.RequestModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.RequestModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.BookInventoryStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.InventoryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.InventoryStorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.RequestListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.RequestListStorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.RequestStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.XmlBookInventoryStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.storage.XmlRequestListStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import seedu.address.ui.SubmitBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * The main entry point to the application. Besties"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    protected InventoryStorage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    protected RequestStorage requestStorage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    protected RequestModel requestModel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    protected SubmitBox submitBox;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BookInventory ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventoryStorage bookInventoryStorage \u003d new XmlBookInventoryStorage(userPrefs.getBookInventoryFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        storage \u003d new InventoryStorageManager(bookInventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        RequestListStorage requestListStorage \u003d new XmlRequestListStorage(userPrefs.getRequestListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestStorage \u003d new RequestListStorageManager(requestListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestModel \u003d initModelManager(requestStorage, userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        logic \u003d new LogicManager(model, requestModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s BookInventory and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * The data from the sample inventory book will be used instead if {@code storage}\u0027s inventory book is not found,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * or an empty inventory book will be used instead if errors occur when reading {@code storage}\u0027s inventory book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Model initModelManager(InventoryStorage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Optional\u003cReadOnlyBookInventory\u003e addressBookOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        ReadOnlyBookInventory initialData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookInventory\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookInventory\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            initialData \u003d new BookInventory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookInventory\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            initialData \u003d new BookInventory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Returns a {@code RequestModelManager} with the data from"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * {@code requestStorage}\u0027s request list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * The data from the sample request list will be used instead if {@code requestStorage}\u0027s request list is not found,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * or an empty request list will be used instead if errors occur when reading {@code storage}\u0027s request list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private RequestModel initModelManager(RequestListStorage requestStorage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Optional\u003cReadOnlyRequests\u003e requestListOptional;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        ReadOnlyRequests initialData;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requestListOptional \u003d requestStorage.readRequestList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            if (!requestListOptional.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookInventory\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            initialData \u003d requestListOptional.orElseGet(SampleDataUtil::getSampleRequestList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookInventory\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            initialData \u003d new RequestList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookInventory\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            initialData \u003d new RequestList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new RequestModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookInventory\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        logger.info(\"Starting BookInventory \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        primaryStage.setOnCloseRequest(e -\u003e {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            final boolean exited \u003d SubmitBox.display(\"Exit BookInventory\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    \"Are you sure you want to exit BookInventory?\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            if (!exited) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                e.consume();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                stop();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        });"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping BookInventory ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requestStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 35,
      "-": 180,
      "guiyong96": 36,
      "iashcole": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private String appTitle \u003d \"BookInventory\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_SIMILARITY_FOUND \u003d \"Do you mean \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "-": 12,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/BookInventoryChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/** Indicates the BookInventory in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookInventoryChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public final ReadOnlyBookInventory data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookInventoryChangedEvent(ReadOnlyBookInventory data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return \"number of books \" + data.getBookList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 3,
      "-": 13,
      "guiyong96": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/RequestListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/** Indicates the BookInventory in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public final ReadOnlyRequests dataRequest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestListChangedEvent(ReadOnlyRequests dataRequest) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.dataRequest \u003d dataRequest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return \"number of persons \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a selection change in the Book List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Book newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public PersonPanelSelectionChangedEvent(Book newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Book getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "guiyong96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/RequestPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a selection change in the Book List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Request newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestPanelSelectionChangedEvent(Request newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Request getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    ObservableList\u003cRequest\u003e getFilteredRequestList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "guiyong96": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.DiceCoefficient.diceCoefficient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.parser.BookInventoryParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.parser.DiceCoefficient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.CommandSecondary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.RequestListParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.RequestModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.ViewRequestCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static DiceCoefficient diceCoefficient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static final double DICE_COEFFICIENT_THRESHOLD \u003d 0.5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final RequestModel requestModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final BookInventoryParser bookInventoryParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final RequestListParser requestListParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public LogicManager(Model model, RequestModel requestModel) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.requestModel \u003d requestModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookInventoryParser \u003d new BookInventoryParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestListParser \u003d new RequestListParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        diceCoefficient \u003d new DiceCoefficient();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String[] string \u003d commandText.trim().split(\"\\\\s+\", 8);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (diceCoefficient(string[0], RequestCommand.COMMAND_WORD) \u003e DICE_COEFFICIENT_THRESHOLD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            || diceCoefficient(string[0], ViewRequestCommand.COMMAND_WORD) \u003e DICE_COEFFICIENT_THRESHOLD) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            CommandSecondary command \u003d requestListParser.parseCommandRequest(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return command.execute(requestModel, history);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                Command command \u003d bookInventoryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                return command.execute(model, history);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ObservableList\u003cRequest\u003e getFilteredRequestList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestModel.getFilteredRequestList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "kennethcsj": 8,
      "-": 47,
      "guiyong96": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Adds a book to the BookInventory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the inventory list. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_ISBN + \"ISBN \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_NAME + \"The Five People You Meet In Heaven \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_ISBN + \"978-3-16-148410-0 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_PRICE + \"19.99 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_COST + \"15.00 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_QUANTITY + \"50 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_TAG + \"Mitch \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_TAG + \"Albom\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the inventory list\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public AddCommand(Book book) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.commitBookInventory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 19,
      "-": 43,
      "guiyong96": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.QuantityContainsNumberPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Finds and lists all books in BookInventory with quantity less than or equal to given number"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"check\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks all book with quantity less than or \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"equal to the quantity specified and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"Parameters: NUMBER\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 4\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final QuantityContainsNumberPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public CheckCommand(QuantityContainsNumberPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                || (other instanceof CheckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 predicate.equals(((CheckCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Clears the BookInventory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Quantity book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        model.resetData(new BookInventory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.commitBookInventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "kennethcsj": 4,
      "-": 20,
      "guiyong96": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the BookInventory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \": Deletes the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.commitBookInventory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 4,
      "-": 45,
      "guiyong96": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Edits the details of an existing book in the inventory book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \"[\" + PREFIX_ISBN + \"ISBN] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \"[\" + PREFIX_COST + \"COST] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_ISBN + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_PRICE + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the quantity book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private final EditBookDescriptor editBookDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param index of the book in the filtered book list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * @param editBookDescriptor details to edit the book with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public EditCommand(Index index, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        requireNonNull(editBookDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book editedBook \u003d createEditedPerson(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (!bookToEdit.isSameBook(editedBook) \u0026\u0026 model.hasBook(editedBook)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.commitBookInventory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * edited with {@code editBookDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private static Book createEditedPerson(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Name updatedName \u003d editBookDescriptor.getName().orElse(bookToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Isbn updatedIsbn \u003d editBookDescriptor.getIsbn().orElse(bookToEdit.getIsbn());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Price updatedPrice \u003d editBookDescriptor.getPrice().orElse(bookToEdit.getPrice());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Cost updatedCost \u003d editBookDescriptor.getCost().orElse(bookToEdit.getCost());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Quantity updatedQuantity \u003d editBookDescriptor.getQuantity().orElse(bookToEdit.getQuantity());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editBookDescriptor.getTags().orElse(bookToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new Book(updatedName, updatedIsbn, updatedPrice, updatedCost, updatedQuantity, updatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Stores the details to edit the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static class EditBookDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        private Isbn isbn;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        private Cost cost;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public EditBookDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public EditBookDescriptor(EditBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            setIsbn(toCopy.isbn);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, isbn, price, quantity, tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void setIsbn(Isbn isbn) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public Optional\u003cIsbn\u003e getIsbn() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return Optional.ofNullable(isbn);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public void setCost(Cost cost) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public Optional\u003cCost\u003e getCost() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return Optional.ofNullable(cost);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            if (!(other instanceof EditBookDescriptor)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            EditBookDescriptor e \u003d (EditBookDescriptor) other;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    \u0026\u0026 getIsbn().equals(e.getIsbn())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    \u0026\u0026 getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 34,
      "kennethcsj": 22,
      "-": 157,
      "guiyong96": 30,
      "iashcole": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Quantity Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Finds and lists all persons in BookInventory whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all books whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" biology world science\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 2,
      "-": 37,
      "guiyong96": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Lists all books in the book inventory to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all books\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Reverts the {@code model}\u0027s BookInventory to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "-": 28,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Selects a book identified using it\u0027s displayed index from the BookInventory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \": Selects the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Book: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        List\u003cBook\u003e filteredBookList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredBookList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "-": 50,
      "guiyong96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SellCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Decrease the quantity of an existing book in the inventory book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class SellCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sell\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Decrease the quantity of book identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"Existing values will be subtracted by the input value.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + PREFIX_QUANTITY + \"5\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_SELL_BOOK_SUCCESS \u003d \"Sold Book: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_NOT_SOLD \u003d \"Quantity sold must be specified.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANTITY \u003d \"Quantity of books left cannot be less than 0.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_SOLD_VALUE \u003d \"Quantity sold must be positive\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final DecreaseQuantity decreaseQuantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param index of the book int he filtered book list to edit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param decreaseQuantity details to sell the book with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public SellCommand(Index index, DecreaseQuantity decreaseQuantity) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(decreaseQuantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.decreaseQuantity \u003d new DecreaseQuantity(decreaseQuantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Book bookToSell \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        String originalQuantity \u003d bookToSell.getQuantity().getValue();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Book sellBook \u003d createSoldBook(bookToSell, decreaseQuantity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (originalQuantity \u003d\u003d sellBook.getQuantity().getValue()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        model.updateBook(bookToSell, sellBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        model.commitBookInventory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELL_BOOK_SUCCESS, sellBook));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToSell}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * edited with {@code decreaseQuantity}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static Book createSoldBook(Book bookToSell, DecreaseQuantity decreaseQuantity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assert bookToSell !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Name name \u003d bookToSell.getName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Isbn isbn \u003d bookToSell.getIsbn();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Price price \u003d bookToSell.getPrice();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Cost cost \u003d bookToSell.getCost();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Quantity updatedQuantity \u003d bookToSell.deductQuantity(decreaseQuantity.getQuantity());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Set\u003cTag\u003e tags \u003d bookToSell.getTags();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new Book(name, isbn, price, cost, updatedQuantity, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!(other instanceof SellCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        SellCommand s \u003d (SellCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return index.equals(s.index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 decreaseQuantity.equals(s.decreaseQuantity);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Stores the quantity to edit the book with. Quantity of book will be subtracted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static class DecreaseQuantity {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public DecreaseQuantity() {}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public DecreaseQuantity(DecreaseQuantity toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public boolean isQuantityFieldSpecified() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return CollectionUtil.isAnyNonNull(quantity);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public Quantity getQuantity() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return quantity;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            if (!(other instanceof DecreaseQuantity)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            DecreaseQuantity s \u003d (DecreaseQuantity) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return getQuantity().equals(s.getQuantity());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StockCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * Stocks the details of an existing book in the quantity book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class StockCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stock\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Stocks the book identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            + \"Parameters: INDEX(must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            + PREFIX_QUANTITY + \"5\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String MESSAGE_STOCK_PERSON_SUCCESS \u003d \"Stocked Book: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String MESSAGE_NOT_STOCKED \u003d \"Increase to stock quantity must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This book already exists in the book inventory.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private final StockBookDescriptor stockBookDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * @param index of the book in the filtered book list to stock"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * @param stockBookDescriptor details to stock the book with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public StockCommand(Index index, StockBookDescriptor stockBookDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        requireNonNull(stockBookDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        this.stockBookDescriptor \u003d new StockBookDescriptor(stockBookDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookToStock \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book stockedBook \u003d createStockedBook(bookToStock, stockBookDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (!bookToStock.isSameBook(stockedBook) \u0026\u0026 model.hasBook(stockedBook)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateBook(bookToStock, stockedBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.commitBookInventory();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_STOCK_PERSON_SUCCESS, stockedBook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToStock}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * stocked with {@code stockBookDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private static Book createStockedBook(Book bookToStock, StockBookDescriptor stockBookDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assert bookToStock !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Name updatedName \u003d (bookToStock.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Isbn updatedIsbn \u003d (bookToStock.getIsbn());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Price updatedPrice \u003d stockBookDescriptor.getPrice().orElse(bookToStock.getPrice());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Cost updatedCost \u003d bookToStock.getCost();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Quantity updatedQuantity \u003d bookToStock.increaseQuantity(stockBookDescriptor.getQuantity());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d (bookToStock.getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new Book(updatedName, updatedIsbn, updatedPrice, updatedCost, updatedQuantity, updatedTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (!(other instanceof StockCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        StockCommand e \u003d (StockCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                \u0026\u0026 stockBookDescriptor.equals(e.stockBookDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Stores the details to stock the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static class StockBookDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        private Isbn isbn;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        private Cost cost;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public StockBookDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public StockBookDescriptor(StockBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            setIsbn(toCopy.isbn);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * Returns true if at least one field is stocked."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public boolean isAnyFieldStocked() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, isbn, price, quantity, tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public void setIsbn(Isbn isbn) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public Optional\u003cIsbn\u003e getIsbn() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return Optional.ofNullable(isbn);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        public void setCost(Cost cost) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public Quantity getQuantity() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return quantity;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            if (!(other instanceof StockBookDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            StockBookDescriptor e \u003d (StockBookDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    \u0026\u0026 getIsbn().equals(e.getIsbn())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 205,
      "kennethcsj": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Reverts the {@code model}\u0027s BookInventory to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "-": 28,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_PRICE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                        PREFIX_COST, PREFIX_QUANTITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_QUANTITY, PREFIX_ISBN, PREFIX_PRICE, PREFIX_COST)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Isbn isbn \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Book book \u003d new Book(name, isbn, price, cost, quantity, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new AddCommand(book);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 15,
      "-": 45,
      "guiyong96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BookInventoryParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SIMILARITY_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.parser.DiceCoefficient.diceCoefficient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.StockCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.ui.BookListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookInventoryParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static DiceCoefficient diceCoefficient;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static final double DICE_COEFFICIENT_THRESHOLD \u003d 0.5;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        diceCoefficient \u003d new DiceCoefficient();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(SellCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(StockCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        commandList.add(CheckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        case SellCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return new SellCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        case StockCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return new StockCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        case CheckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return new CheckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            for (String command : commandList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                if (diceCoefficient(commandWord, command) \u003e DICE_COEFFICIENT_THRESHOLD) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    throw new ParseException(MESSAGE_SIMILARITY_FOUND + command + \"?\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 15,
      "-": 92,
      "guiyong96": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.QuantityContainsNumberPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Parses input arguments and creates a new CheckCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class CheckCommandParser implements Parser\u003cCheckCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Parse the given {@code String} of arguments in the context of the CheckCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public CheckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        List\u003cString\u003e quantities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Integer number \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        for (Integer i \u003d number; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            quantities.add(Integer.toString(i));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new CheckCommand(new QuantityContainsNumberPredicate(quantities));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Prefix PREFIX_ISBN \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 4,
      "-": 11,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiceCoefficient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Sets the degree of comparisons between words"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class DiceCoefficient {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adapted from https://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Dice%27s_coefficient"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //Note that this implementation is case-sensitive!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static double diceCoefficient(String s1, String s2) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Set\u003cString\u003e nx \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Set\u003cString\u003e ny \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (int i \u003d 0; i \u003c s1.length() - 1; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            char x1 \u003d s1.charAt(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            char x2 \u003d s1.charAt(i + 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            String tmp \u003d \"\" + x1 + x2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            nx.add(tmp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (int j \u003d 0; j \u003c s2.length() - 1; j++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            char y1 \u003d s2.charAt(j);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            char y2 \u003d s2.charAt(j + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            String tmp \u003d \"\" + y1 + y2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            ny.add(tmp);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Set\u003cString\u003e intersection \u003d new HashSet\u003cString\u003e(nx);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        intersection.retainAll(ny);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        double totcombigrams \u003d intersection.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return (2 * totcombigrams) / (nx.size() + ny.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Here\u0027s an optimized version of the dice coefficient calculation. It takes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * advantage of the fact that a bigram of 2 chars can be stored in 1 int, and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * applies a matching algorithm of O(n*log(n)) instead of O(n*n)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * \u003cp\u003eNote that, at the time of writing, this implementation differs from the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * other implementations on this page. Where the other algorithms incorrectly"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * store the generated bigrams in a set (discarding duplicates), this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * implementation actually treats multiple occurrences of a bigram as unique."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The correctness of this behavior is most easily seen when getting the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * similarity between \"GG\" and \"GGGGGGGG\", which should obviously not be 1."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @author Jelle Fresen"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param s The first string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param t The second String"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @return The dice coefficient between the two input strings. Returns 0 if one"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *         or both of the strings are {@code null}. Also returns 0 if one or both"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *         of the strings contain less than 2 characters and are not equal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static double diceCoefficientOptimized(String s, String t) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // Verifying the input:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (s \u003d\u003d null || t \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // Quick check to catch identical objects:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (s.equals(t)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // avoid exception for single character searches"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (s.length() \u003c 2 || t.length() \u003c 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // Create the bigrams for string s:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final int n \u003d s.length() - 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final int[] sPairs \u003d new int[n];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d n; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                sPairs[i] \u003d s.charAt(i) \u003c\u003c 16;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else if (i \u003d\u003d n) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                sPairs[i - 1] |\u003d s.charAt(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                sPairs[i] \u003d (sPairs[i - 1] |\u003d s.charAt(i)) \u003c\u003c 16;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // Create the bigrams for string t:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final int m \u003d t.length() - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final int[] tPairs \u003d new int[m];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d m; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                tPairs[i] \u003d t.charAt(i) \u003c\u003c 16;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else if (i \u003d\u003d m) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                tPairs[i - 1] |\u003d t.charAt(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                tPairs[i] \u003d (tPairs[i - 1] |\u003d t.charAt(i)) \u003c\u003c 16;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // Sort the bigram lists:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Arrays.sort(sPairs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Arrays.sort(tPairs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // Count the matches:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        int matches \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        while (i \u003c n \u0026\u0026 j \u003c m) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            if (sPairs[i] \u003d\u003d tPairs[j]) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                matches +\u003d 2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else if (sPairs[i] \u003c tPairs[j]) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return (double) matches / (n + m);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 26,
      "guiyong96": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_PRICE, PREFIX_QUANTITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor editBookDescriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            editBookDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ISBN).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            editBookDescriptor.setIsbn(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_ISBN).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            editBookDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            editBookDescriptor.setCost(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            editBookDescriptor.setQuantity(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editBookDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (!editBookDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return new EditCommand(index, editBookDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 7,
      "kennethcsj": 9,
      "-": 67,
      "guiyong96": 3,
      "iashcole": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses a {@code String phone} into a {@code Isbn}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Isbn parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Isbn.isValidIsbn(trimmedPhone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            throw new ParseException(Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Isbn(trimmedPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses a {@code String address} into an {@code Quantity}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Quantity parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedAddress)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Quantity(trimmedAddress);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses a {@code String email} into an {@code Price}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            throw new ParseException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Parses a {@code String cost} into an {@code Cost}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @throws ParseException if the given {@code cost} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static Cost parseCost(String cost) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        String trimmedCost \u003d cost.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!Cost.isValidCost(trimmedCost)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new ParseException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new Cost(trimmedCost);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 22,
      "-": 103,
      "guiyong96": 13,
      "iashcole": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SellCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.SellCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.SellCommand.DecreaseQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Parses input arguments and creates a new SellCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class SellCommandParser implements Parser\u003cSellCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Parses the given (@code String} of arguments in the context of the SellCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * and returns a SellCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @throw ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public SellCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        DecreaseQuantity decreaseQuantity \u003d new DecreaseQuantity();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            Quantity quantity \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            if (Integer.valueOf(quantity.getValue()) \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                throw new ParseException(SellCommand.MESSAGE_NEGATIVE_SOLD_VALUE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                decreaseQuantity.setQuantity(quantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!decreaseQuantity.isQuantityFieldSpecified()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new ParseException(SellCommand.MESSAGE_NOT_SOLD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new SellCommand(index, decreaseQuantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StockCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.StockCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.StockCommand.StockBookDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * Parses input arguments and creates a new StockCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class StockCommandParser implements Parser\u003cStockCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StockCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * and returns an StockCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public StockCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ISBN, PREFIX_PRICE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                        PREFIX_COST, PREFIX_QUANTITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StockCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        StockCommand.StockBookDescriptor stockBookDescriptor \u003d new StockBookDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            stockBookDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ISBN).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            stockBookDescriptor.setIsbn(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_ISBN).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            stockBookDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            stockBookDescriptor.setCost(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            stockBookDescriptor.setQuantity(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        parseTagsForStock(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(stockBookDescriptor::setTags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (!stockBookDescriptor.isAnyFieldStocked()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            throw new ParseException(StockCommand.MESSAGE_NOT_STOCKED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return new StockCommand(index, stockBookDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForStock(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 74,
      "kennethcsj": 12,
      "iashcole": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BookInventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * Duplicates are not allowed (by .isSameBook comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class BookInventory implements ReadOnlyBookInventory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final UniqueBookList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        persons \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookInventory() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Creates an BookInventory using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookInventory(ReadOnlyBookInventory toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the contents of the book list with {@code books}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.persons.setPersons(books);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Resets the existing data of this {@code BookInventory} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void resetData(ReadOnlyBookInventory newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        setPersons(newData.getBookList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //// book-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the BookInventory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean hasPerson(Book book) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return persons.contains(book);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adds a book to the BookInventory."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The book must not already exist in the BookInventory."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void addBook(Book p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code target} must exist in the BookInventory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the BookInventory."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void updatePerson(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        persons.setPerson(target, editedBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Removes {@code key} from this {@code BookInventory}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code key} must exist in the BookInventory."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void removePerson(Book key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                || (other instanceof BookInventory // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 persons.equals(((BookInventory) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 8,
      "-": 84,
      "guiyong96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void resetData(ReadOnlyBookInventory newData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /** Returns the BookInventory */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    ReadOnlyBookInventory getBookInventory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the BookInventory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The book must exist in the BookInventory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code book} must not already exist in the BookInventory."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code target} must exist in the BookInventory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the BookInventory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void updateBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /** Returns an unmodifiable view of the filtered book list */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if the model has previous BookInventory states to restore."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if the model has undone BookInventory states to restore."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the model\u0027s BookInventory to its previous state."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the model\u0027s BookInventory to its previously undone state."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Saves the current BookInventory state for undo/redo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void commitBookInventory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 9,
      "kennethcsj": 1,
      "-": 51,
      "guiyong96": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.BookInventoryChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents the in-memory model of the BookInventory data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final VersionedBookInventory versionedAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Initializes a ModelManager with the given bookInventory and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ModelManager(ReadOnlyBookInventory bookInventory, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(bookInventory, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + bookInventory + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedAddressBook \u003d new VersionedBookInventory(bookInventory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        filteredBooks \u003d new FilteredList\u003c\u003e(versionedAddressBook.getBookList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this(new BookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void resetData(ReadOnlyBookInventory newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ReadOnlyBookInventory getBookInventory() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        raise(new BookInventoryChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return versionedAddressBook.hasPerson(book);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedAddressBook.addBook(book);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void updateBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Book List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Book} backed by the internal list of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredBooks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void commitBookInventory() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 filteredBooks.equals(other.filteredBooks);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 9,
      "kennethcsj": 2,
      "-": 117,
      "guiyong96": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBookInventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Unmodifiable view of an BookInventory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public interface ReadOnlyBookInventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "-": 13,
      "guiyong96": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Path bookInventoryFilePath \u003d Paths.get(\"data\" , \"bookinventory.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Path requestListFilePath \u003d Paths.get(\"data\" , \"requestlist.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Path getBookInventoryFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return bookInventoryFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Path getRequestListFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestListFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setBookInventoryFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.bookInventoryFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 Objects.equals(bookInventoryFilePath, o.bookInventoryFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return Objects.hash(guiSettings, bookInventoryFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + bookInventoryFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "guiyong96": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedBookInventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * {@code BookInventory} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class VersionedBookInventory extends BookInventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private final List\u003cReadOnlyBookInventory\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public VersionedBookInventory(ReadOnlyBookInventory initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        addressBookStateList.add(new BookInventory(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Saves a copy of the current {@code BookInventory} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        addressBookStateList.add(new BookInventory(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the BookInventory to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the BookInventory to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if {@code undo()} has BookInventory states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if {@code redo()} has BookInventory states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!(other instanceof VersionedBookInventory)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory otherVersionedAddressBook \u003d (VersionedBookInventory) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "kennethcsj": 8,
      "-": 96,
      "guiyong96": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Book.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a Book in the quantity book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class Book {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private final Isbn isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public Book(Name name, Isbn isbn, Price price, Cost cost, Quantity quantity, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireAllNonNull(name, isbn, price, cost, quantity, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public Isbn getIsbn() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return isbn;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param amount number of books stock"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @return the updated quantity for books"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public Quantity increaseQuantity(Quantity amount) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.quantity.increase(amount.toInteger());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * checks if quantity sold is valid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param selling quantity of books sold"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @return updated quantity"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public Quantity deductQuantity(Quantity selling) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.quantity.decrease(selling.toInteger());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public boolean isSameBook(Book otherBook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (otherBook \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return otherBook !\u003d null"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 otherBook.getIsbn().equals(getIsbn());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return otherBook.getName().equals(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 otherBook.getIsbn().equals(getIsbn())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 otherBook.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 otherBook.getCost().equals(getCost())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 otherBook.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 otherBook.getTags().equals(getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return Objects.hash(name, isbn, price, cost, quantity, tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                .append(\" Isbn: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                .append(getIsbn())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                .append(\" Cost: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 8,
      "kennethcsj": 34,
      "guiyong96": 22,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Cost.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Represents a book\u0027s cost price in the book inventory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Guarantee: immutable; is a valid as declared in (@link #isValidCost(String)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String COST_CONSTRAINTS \u003d \"Price should be of the format 19.99 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"1. The first 2 characters should only contain digits\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + \"2. This is followed by a \u0027.\u0027 and then 2 digits. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    // digits"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static final String DOLLAR_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static final String CENT_REGEX \u003d \"\\\\d{2,}\"; // digits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String COST_VALIDATION_REGEX \u003d DOLLAR_REGEX + \".\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            + CENT_REGEX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Constructs an {@code Cost}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param cost A valid cost"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        checkArgument(isValidCost(cost), COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        value \u003d cost;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Returns if a given string is a valid cost"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return test.matches(COST_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Isbn.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a Book\u0027s phone number in the BookInventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIsbn(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class Isbn {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static final String MESSAGE_ISBN_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            \"ISBN should be a valid 10-digit or 13-digit number (with hyphens).\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    // A 13-digit ISBN should start with either 978 or 979. A 10-digit ISBN would omit the first 3 char."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static final String ISBN10_VALIDATION_REGEX \u003d \"\\\\d{10}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static final String ISBN13_VALIDATION_REGEX \u003d \"(978|979)\\\\d{10}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Constructs a {@code Isbn}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     * @param isbn A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Isbn(String isbn) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(isbn);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        checkArgument(isValidIsbn(isbn), MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        value \u003d isbn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     * Returns true if the last digit (check digit) of a 10-digit ISBN is correct"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    private static boolean isValidCheckIsbn10(String str) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        int[] arr \u003d {10, 9, 8, 7, 6, 5, 4, 3, 2};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        boolean isCorrect \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        for (int i \u003d 0; i \u003c 9; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            sum +\u003d arr[i] * (str.charAt(i) - \u00270\u0027);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        System.out.print(sum);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        sum %\u003d 11;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        if (sum !\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            sum \u003d 11 - sum;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (sum !\u003d str.charAt(9) - \u00270\u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            isCorrect \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (sum \u003d\u003d 10 \u0026\u0026 (str.charAt(9) \u003d\u003d \u0027X\u0027 || str.charAt(9) \u003d\u003d \u0027x\u0027)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            isCorrect \u003d true; //Special case of X"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        return isCorrect;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     * Returns true if the last digit (check digit) of a 13-digit ISBN is correct"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    private static boolean isValidCheckIsbn13(String str) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        int[] arr \u003d {1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        boolean isCorrect \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            sum +\u003d arr[i] * (str.charAt(i) - \u00270\u0027);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        sum %\u003d 10;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        if (sum !\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            sum \u003d 10 - sum;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (sum !\u003d str.charAt(12) - \u00270\u0027) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            isCorrect \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        return isCorrect;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     * Returns true if a given string is a valid isbn number."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static boolean isValidIsbn(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        test \u003d test.replace(\"-\", \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        return (test.matches(ISBN10_VALIDATION_REGEX) \u0026\u0026 isValidCheckIsbn10(test))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                || (test.matches(ISBN13_VALIDATION_REGEX) \u0026\u0026 isValidCheckIsbn13(test));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || (other instanceof Isbn // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 value.equals(((Isbn) other).value)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 9,
      "guiyong96": 11,
      "-": 35,
      "iashcole": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a Book\u0027s name in the BookInventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     * The title should not be more than 200 characters and can contain any character."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \".{0,200}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 2,
      "-": 54,
      "iashcole": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Price.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Represents a Book\u0027s price in the book inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            \"Prices should be numerical and in 2 decimal places or none at all\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            + \"E.g. $4, $3.02\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    // \"$\" can be omitted and is optional, prices can be in 2 decimal places or none at all"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    // e.g. $4 or $3.02 is accepted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static final String PRICE_VALIDATION_REGEX \u003d \"(\\\\$)?\\\\d+(\\\\.\\\\d{2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Constructs an {@code Price}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Returns if a given string is a valid price."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return test.matches(PRICE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 6,
      "kennethcsj": 5,
      "guiyong96": 5,
      "-": 35,
      "iashcole": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Quantity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Represents a Book\u0027s quantity in the inventory book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            \"Quantity can only take positive values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     * Quantity only accepts from 0 to 999"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static final String QUANTITY_VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Constructs an {@code Quantity}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        value \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public void increase(int amount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        this.value \u003d Integer.toString(Integer.parseInt(value) + amount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Ensures quantity remains above 0 and stores the remaining quantity of books"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param selling quantity of books sold"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public void decrease(int selling) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Integer after \u003d Integer.parseInt(value) - selling;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (after \u003e\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            this.value \u003d Integer.toString(Integer.parseInt(value) - selling);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public int toInteger() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public void setValue(String value) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iashcole"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        return test.matches(QUANTITY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 value.equals(((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 7,
      "kennethcsj": 25,
      "guiyong96": 12,
      "-": 35,
      "iashcole": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/QuantityContainsNumberPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Quantity} matches any of the quantities given"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "public class QuantityContainsNumberPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final List\u003cString\u003e quantities;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public QuantityContainsNumberPredicate(List\u003cString\u003e quantities) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.quantities \u003d quantities;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return quantities.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                .anyMatch(quantity -\u003e StringUtil.containsWordIgnoreCase(book.getQuantity().getValue(), quantity));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                || (other instanceof QuantityContainsNumberPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 quantities.equals(((QuantityContainsNumberPredicate) other).quantities)); // state checks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueBookList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * A book is considered unique by comparing using {@code Book#isSameBook(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * persons uses Book#isSameBook(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * @see Book#isSameBook(Book)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        if (!target.isSameBook(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the contents of this list with {@code books}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!personsAreUnique(books)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private boolean personsAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                if (books.get(i).isSameBook(books.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 6,
      "kennethcsj": 1,
      "guiyong96": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/CommandSecondary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public abstract class CommandSecondary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param requestModel {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public abstract CommandResult execute(RequestModel requestModel, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 3,
      "guiyong96": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a Request\u0027s email in the BookInventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 6,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/ReadOnlyRequests.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Unmodifiable view of an BookInventory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public interface ReadOnlyRequests {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    ObservableList\u003cRequest\u003e getRequestList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/Request.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a Request in the BookInventory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class Request {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Isbn isbn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Request(Isbn isbn, Email email, Quantity quantity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Isbn getIsbn() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return isbn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * compares request made with existing request"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param otherRequest request made by the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @return boolean by comparing results"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean isSameRequest(Request otherRequest) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (otherRequest \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return otherRequest !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 otherRequest.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 (otherRequest.getIsbn().equals(getIsbn()) || otherRequest.getQuantity().equals(getQuantity()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Request request \u003d (Request) o;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return Objects.equals(isbn, request.isbn)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 Objects.equals(email, request.email)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 Objects.equals(quantity, request.quantity);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return Objects.hash(isbn, email, quantity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return \"Request{\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + \"isbn\u003d\" + isbn"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + \", email\u003d\" + email"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + \", quantity\u003d\" + quantity"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 21,
      "guiyong96": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Adds a request to the BookInventory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestCommand extends CommandSecondary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"request\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Request a book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_ISBN + \"ISBN \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_ISBN + \"9783161484100 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_QUANTITY + \"42 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New request added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This request already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Request toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Creates an RequestCommand to add the specified {@code Request}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestCommand(Request request) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(request);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        toAdd \u003d request;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public CommandResult execute(RequestModel requestModel, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(requestModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        //if (requestModel.hasRequest(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        //    throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestModel.addRequest(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestModel.commitRequests();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || (other instanceof RequestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RequestCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 5,
      "guiyong96": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Parses input arguments and creates a new RequestCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestCommandParser implements RequestParser\u003cRequestCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RequestCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * and returns an RequestCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ISBN, PREFIX_QUANTITY, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ISBN, PREFIX_QUANTITY, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RequestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Isbn isbn \u003d RequestParserUtil.parseIsbn(argMultimap.getValue(PREFIX_ISBN).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Quantity quantity \u003d RequestParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Email email \u003d RequestParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Request request \u003d new Request(isbn, email, quantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new RequestCommand(request);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 11,
      "guiyong96": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Duplicates are not allowed (by .isSameRequest comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestList implements ReadOnlyRequests {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final UniqueRequestList requestList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestList \u003d new UniqueRequestList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestList() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Creates an RequestList using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestList(ReadOnlyRequests toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the contents of the request list with {@code requestList}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code requestList} must not contain duplicate requestList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setRequestList(List\u003cRequest\u003e requestList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.requestList.setRequests(requestList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Resets the existing data of this {@code RequestList} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void resetData(ReadOnlyRequests newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        setRequestList(newData.getRequestList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //// request-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if a request with the same identity as {@code request} exists in the BookInventory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean hasRequest(Request request) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(request);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestList.contains(request);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adds a request to the BookInventory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The request must not already exist in the BookInventory."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void addRequest(Request p) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestList.add(p);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the given request {@code target} in the list with {@code editedRequest}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code target} must exist in the BookInventory."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * The request identity of {@code editedRequest} must not be the same as"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * another existing request in the BookInventory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void updateRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(editedRequest);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestList.setRequest(target, editedRequest);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Removes {@code key} from this {@code RequestList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code key} must exist in the BookInventory."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void removeRequest(Request key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestList.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestList.asUnmodifiableObservableList().size() + \" requestList\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ObservableList\u003cRequest\u003e getRequestList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || (other instanceof RequestList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 requestList.equals(((RequestList) other).requestList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 3,
      "guiyong96": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/** Indicates the BookInventory in the model has changed*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public final ReadOnlyRequests data;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestListChangedEvent(ReadOnlyRequests data) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return \"number of persons \" + data.getRequestList().size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestListParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SIMILARITY_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.parser.DiceCoefficient.diceCoefficient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.parser.DiceCoefficient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestListParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static DiceCoefficient diceCoefficient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static final double DICE_COEFFICIENT_THRESHOLD \u003d 0.5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public CommandSecondary parseCommandRequest(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        diceCoefficient \u003d new DiceCoefficient();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(ViewRequestCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandList.add(RequestCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        case RequestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return new RequestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        case ViewRequestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return new ViewRequestCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            for (String command : commandList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                if (diceCoefficient(commandWord, command) \u003e DICE_COEFFICIENT_THRESHOLD) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    throw new ParseException(MESSAGE_SIMILARITY_FOUND + command + \"?\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 6,
      "guiyong96": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * The API of the RequestModel component."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public interface RequestModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    Predicate\u003cRequest\u003e PREDICATE_SHOW_ALL_REQUESTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /** Clears existing backing requestModel and replaces with the provided new data. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void resetData(ReadOnlyRequests newData);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /** Returns the RequestList */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    ReadOnlyRequests getRequestList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if a request with the same identity as {@code request} exists in the BookInventory."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    boolean hasRequest(Request request);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Deletes the given request."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The request must exist in the BookInventory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void deleteRequest(Request target);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adds the given request."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code request} must not already exist in the BookInventory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void addRequest(Request request);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the given request {@code target} with {@code editedRequest}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code target} must exist in the BookInventory."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * The request identity of {@code editedRequest} must not be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * the same as another existing request in the BookInventory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void updateRequest(Request target, Request editedRequest);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /** Returns an unmodifiable view of the filtered request list */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    ObservableList\u003cRequest\u003e getFilteredRequestList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Updates the filter of the filtered request list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void updateFilteredRequestList(Predicate\u003cRequest\u003e predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if the requestModel has previous BookInventory states to restore."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    boolean canUndoRequests();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if the requestModel has undone BookInventory states to restore."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    boolean canRedoRequests();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the requestModel\u0027s BookInventory to its previous state."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void undoRequests();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the requestModel\u0027s BookInventory to its previously undone state."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void redoRequests();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Saves the current BookInventory state for undo/redo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void commitRequests();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 3,
      "guiyong96": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents the in-memory requestModel of the BookInventory data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestModelManager extends ComponentManager implements RequestModel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(RequestModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final VersionedRequestList versionedRequestList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final FilteredList\u003cRequest\u003e filteredRequests;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Initializes a RequestModelManager with the given requestList and userPrefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestModelManager(ReadOnlyRequests requestList, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(requestList, userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + requestList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList \u003d new VersionedRequestList(requestList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        filteredRequests \u003d new FilteredList\u003c\u003e(versionedRequestList.getRequestList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestModelManager() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this(new RequestList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void resetData(ReadOnlyRequests newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        indicateRequestListChanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ReadOnlyRequests getRequestList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return versionedRequestList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /** Raises an event to indicate the requestModel has changed */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void indicateRequestListChanged() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        raise(new RequestListChangedEvent(versionedRequestList));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean hasRequest(Request request) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(request);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return versionedRequestList.hasRequest(request);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void deleteRequest(Request target) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList.removeRequest(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        indicateRequestListChanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void addRequest(Request request) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList.addRequest(request);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        updateFilteredRequestList(PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        indicateRequestListChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void updateRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(target, editedRequest);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList.updateRequest(target, editedRequest);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        indicateRequestListChanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Request List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Request} backed by the internal list of"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code versionedRequestList}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ObservableList\u003cRequest\u003e getFilteredRequestList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredRequests);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void updateFilteredRequestList(Predicate\u003cRequest\u003e predicate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        filteredRequests.setPredicate(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean canUndoRequests() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return versionedRequestList.canUndo();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean canRedoRequests() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return versionedRequestList.canRedo();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void undoRequests() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList.undo();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        indicateRequestListChanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void redoRequests() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList.redo();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        indicateRequestListChanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void commitRequests() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        versionedRequestList.commit();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(obj instanceof RequestModelManager)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        RequestModelManager other \u003d (RequestModelManager) obj;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return versionedRequestList.equals(other.versionedRequestList)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 filteredRequests.equals(other.filteredRequests);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 6,
      "guiyong96": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public interface RequestParser\u003cT extends CommandSecondary\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/RequestParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Isbn parseIsbn(String isbn) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(isbn);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String trimmedIsbn \u003d isbn.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Isbn.isValidIsbn(trimmedIsbn)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Isbn(trimmedIsbn);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses a {@code String phone} into a {@code NumberRequested}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "guiyong96": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/UniqueRequestList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * A request is considered unique by comparing using {@code Request#isSameRequest(Request)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * As such, adding and updating of persons uses Request#isSameRequest(Request) for equality"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * so as to ensure that the request being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * the UniqueRequestList. However, the removal of a request uses Request#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * as to ensure that the request with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * @see Request#isSameRequest(Request)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class UniqueRequestList implements Iterable\u003cRequest\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final ObservableList\u003cRequest\u003e internalRequestList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if the list contains an equivalent request as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean contains(Request toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return internalRequestList.stream().anyMatch(toCheck::isSameRequest);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adds a request to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The request must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void add(Request toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalRequestList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the request {@code target} in the list with {@code editedRequest}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * The request identity of {@code editedRequest} must not be the same as another existing request in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setRequest(Request target, Request editedRequest) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(target, editedRequest);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        int index \u003d internalRequestList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!target.isSameRequest(editedRequest) \u0026\u0026 contains(editedRequest)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalRequestList.set(index, editedRequest);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setRequest(UniqueRequestList replacement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalRequestList.setAll(replacement.internalRequestList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Replaces the contents of this list with {@code requests}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code requests} must not contain duplicate requests."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setRequests(List\u003cRequest\u003e requests) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireAllNonNull(requests);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!requestsAreUnique(requests)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            //    throw new BookNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        internalRequestList.setAll(requests);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Removes the equivalent request from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * The request must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public void remove(Request toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!internalRequestList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ObservableList\u003cRequest\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalRequestList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Iterator\u003cRequest\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return internalRequestList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                || (other instanceof UniqueRequestList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                        \u0026\u0026 internalRequestList.equals(((UniqueRequestList) other).internalRequestList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return internalRequestList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if {@code requests} contains only unique requests."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private boolean requestsAreUnique(List\u003cRequest\u003e requests) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (int i \u003d 0; i \u003c requests.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            for (int j \u003d i + 1; j \u003c requests.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                if (requests.get(i).isSameRequest(requests.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 19,
      "guiyong96": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/VersionedRequestList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * {@code RequestList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class VersionedRequestList extends RequestList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final List\u003cReadOnlyRequests\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public VersionedRequestList(ReadOnlyRequests initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        addressBookStateList.add(new RequestList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Saves a copy of the current {@code RequestList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        addressBookStateList.add(new RequestList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the BookInventory to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Restores the BookInventory to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if {@code undo()} has BookInventory states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if {@code redo()} has BookInventory states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof VersionedRequestList)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        VersionedRequestList otherVersionedAddressBook \u003d (VersionedRequestList) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 14,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/request/ViewRequestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.request;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.model.request.RequestModel.PREDICATE_SHOW_ALL_REQUESTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Lists all persons in the BookInventory to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class ViewRequestCommand extends CommandSecondary {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewrequests\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public CommandResult execute(RequestModel requestModel, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(requestModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestModel.updateFilteredRequestList(PREDICATE_SHOW_ALL_REQUESTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 3,
      "guiyong96": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Represents a Tag in the BookInventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Contains utility methods for populating {@code BookInventory} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * Sample data taken from https://www.abebooks.com/books/Textbooks/index.shtml"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Book[] getSamplePersons() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            new Book(new Name(\"Biology: A Global Approach\"), new Isbn(\"9780321775658\"), new Price(\"73.76\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    new Cost(\"19.99\"), new Quantity(\"4\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            new Book(new Name(\"Elementary Statistics: Picturing the World\"), new Isbn(\"9780321693624\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    new Price(\"58.98\"), new Cost(\"19.99\"), new Quantity(\"11\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            new Book(new Name(\"Essentials of Sociology, A Down-to-Earth Approach (9th Edition)\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    new Isbn(\"9780205763122\"), new Price(\"59.99\"), new Cost(\"19.99\"), new Quantity(\"7\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            new Book(new Name(\"World of Art, A (6th Edition)\"), new Isbn(\"9780205677207\"), new Price(\"15.19\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    new Cost(\"19.99\"), new Quantity(\"22\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            new Book(new Name(\"Chemistry: A Molecular Approach (2nd US Edition)\"), new Isbn(\"9780321651785\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    new Price(\"6.58\"), new Cost(\"19.99\"), new Quantity(\"29\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Request[] getSampleRequests() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Request[] {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            new Request(new Isbn(\"978-3-16-148410-0\"), new Email(\"testing@gmail.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    new Quantity(\"2\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            new Request(new Isbn(\"978-3-16-148410-0\"), new Email(\"testing1@gmail.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    new Quantity(\"3\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static ReadOnlyBookInventory getSampleAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        BookInventory sampleAb \u003d new BookInventory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (Book sampleBook : getSamplePersons()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            sampleAb.addBook(sampleBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static ReadOnlyRequests getSampleRequestList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        RequestList requestAb \u003d new RequestList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (Request sampleRequest : getSampleRequests()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requestAb.addRequest(sampleRequest);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestAb;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 16,
      "-": 32,
      "guiyong96": 25,
      "iashcole": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BookInventoryStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Represents a storage for {@link BookInventory}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public interface BookInventoryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Returns BookInventory data as a {@link ReadOnlyBookInventory}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    Optional\u003cReadOnlyBookInventory\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    Optional\u003cReadOnlyBookInventory\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Saves the given {@link ReadOnlyBookInventory} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void saveAddressBook(ReadOnlyBookInventory addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyBookInventory)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void saveAddressBook(ReadOnlyBookInventory addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * BookInventory can be saved in a fixed temporary place"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    void backupInventoryBook(ReadOnlyBookInventory addressBook) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 7,
      "kennethcsj": 7,
      "-": 35,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.BookInventoryChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * API of the InventoryStorage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public interface InventoryStorage extends BookInventoryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    Optional\u003cReadOnlyBookInventory\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    void saveAddressBook(ReadOnlyBookInventory addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Saves the current version of the Quantity Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void handleAddressBookChangedEvent(BookInventoryChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "-": 31,
      "guiyong96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.BookInventoryChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Manages storage of BookInventory data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class InventoryStorageManager extends ComponentManager implements InventoryStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InventoryStorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private BookInventoryStorage bookInventoryStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public InventoryStorageManager(BookInventoryStorage bookInventoryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.bookInventoryStorage \u003d bookInventoryStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookInventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return bookInventoryStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public Optional\u003cReadOnlyBookInventory\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return readAddressBook(bookInventoryStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public Optional\u003cReadOnlyBookInventory\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return bookInventoryStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void saveAddressBook(ReadOnlyBookInventory addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        saveAddressBook(addressBook, bookInventoryStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void saveAddressBook(ReadOnlyBookInventory addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookInventoryStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public void backupInventoryBook(ReadOnlyBookInventory addressBook) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        bookInventoryStorage.backupInventoryBook(addressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void handleAddressBookChangedEvent(BookInventoryChangedEvent event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 5,
      "kennethcsj": 7,
      "-": 74,
      "guiyong96": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RequestListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Represents a storage for {@link RequestListStorage}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public interface RequestListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    Path getRequestListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns RequestList data as a {@link ReadOnlyRequests}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    Optional\u003cReadOnlyRequests\u003e readRequestList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @see #readRequestList(Path) ()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    Optional\u003cReadOnlyRequests\u003e readRequestList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Saves the given {@link ReadOnlyRequests} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param requestList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void saveRequestList(ReadOnlyRequests requestList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @see #saveRequestList(ReadOnlyRequests)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void saveRequestList(ReadOnlyRequests requestList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 5,
      "guiyong96": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RequestListStorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.RequestListChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Manages storage of RequestList data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestListStorageManager extends ComponentManager implements RequestStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(RequestListStorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private RequestListStorage requestListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestListStorageManager(RequestListStorage requestListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.requestListStorage \u003d requestListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RequestList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Path getRequestListFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestListStorage.getRequestListFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Optional\u003cReadOnlyRequests\u003e readRequestList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return readRequestList(requestListStorage.getRequestListFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Optional\u003cReadOnlyRequests\u003e readRequestList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestListStorage.readRequestList(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void saveRequestList(ReadOnlyRequests addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        saveRequestList(addressBook, requestListStorage.getRequestListFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void saveRequestList(ReadOnlyRequests requestList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestListStorage.saveRequestList(requestList, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void handleRequestListChangedEvent(RequestListChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            saveRequestList(event.dataRequest);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "guiyong96": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RequestStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.RequestListChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * API of the RequestStorage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public interface RequestStorage extends RequestListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    Path getRequestListFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    Optional\u003cReadOnlyRequests\u003e readRequestList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void saveRequestList(ReadOnlyRequests requestList) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Saves the current version of the BookInventory to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void handleRequestListChangedEvent(RequestListChangedEvent rlce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 4,
      "guiyong96": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * JAXB-friendly version of the Book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlAdaptedBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private String isbn;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private String price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private String cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private String quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Constructs an XmlAdaptedBook."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlAdaptedBook() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Constructs an {@code XmlAdaptedBook} with the given book details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public XmlAdaptedBook(String name, String isbn, String price,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                          String cost, String quantity, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Converts a given Book into this class for JAXB use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        isbn \u003d source.getIsbn().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        cost \u003d source.getCost().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        quantity \u003d source.getQuantity().getValue();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Converts this jaxb-friendly adapted book object into the model\u0027s Book object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (isbn \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Isbn.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!Isbn.isValidIsbn(isbn)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            throw new IllegalValueException(Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        final Isbn modelIsbn \u003d new Isbn(isbn);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new IllegalValueException(Cost.COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new Book(modelName, modelIsbn, modelPrice, modelCost, modelQuantity, modelTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof XmlAdaptedBook)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook otherPerson \u003d (XmlAdaptedBook) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 Objects.equals(isbn, otherPerson.isbn)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 Objects.equals(price, otherPerson.price)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 Objects.equals(cost, otherPerson.cost)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 Objects.equals(quantity, otherPerson.quantity)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 45,
      "-": 89,
      "guiyong96": 18,
      "iashcole": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedRequest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        .Request;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * JAXB-friendly version of the Request."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlAdaptedRequest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Request\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private String isbn;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private String quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Constructs an XmlAdaptedRequest."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlAdaptedRequest() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Constructs an {@code XmlAdaptedRequest} with the given request details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlAdaptedRequest(String isbn, String quantity, String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.isbn \u003d isbn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Converts a given Request into this class for JAXB use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedRequest"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlAdaptedRequest(Request source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        isbn \u003d source.getIsbn().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        quantity \u003d source.getQuantity().getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Converts this jaxb-friendly adapted request object into the requestModel\u0027s Request object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted request"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Request toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (isbn \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Isbn.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Isbn.isValidIsbn(isbn)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(isbn.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final Isbn modelIsbn \u003d new Isbn(isbn);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(quantity.trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new Request(modelIsbn, modelEmail, modelQuantity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof XmlAdaptedRequest)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedRequest otherPerson \u003d (XmlAdaptedRequest) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return Objects.equals(isbn, otherPerson.isbn)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 Objects.equals(quantity, otherPerson.quantity)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 9,
      "guiyong96": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlBookInventoryStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * A class to access BookInventory data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlBookInventoryStorage implements BookInventoryStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlBookInventoryStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlBookInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public Optional\u003cReadOnlyBookInventory\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public Optional\u003cReadOnlyBookInventory\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            logger.info(\"BookInventory file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlSerializableBookInventory xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void saveAddressBook(ReadOnlyBookInventory addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyBookInventory)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void saveAddressBook(ReadOnlyBookInventory addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableBookInventory(addressBook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public void backupInventoryBook(ReadOnlyBookInventory addressBook) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 6,
      "kennethcsj": 8,
      "-": 67,
      "guiyong96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableBookInventory addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * saves request to the filr"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param file storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param requestList list of request in storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @throws FileNotFoundException unable to find found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static void saveRequestToFile(Path file, XmlSerializableRequestList requestList)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            XmlUtil.saveDataToFile(file, requestList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns BookInventory in the file or an empty BookInventory"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static XmlSerializableBookInventory loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableBookInventory.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns BookInventory in the file or an empty BookInventory"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static XmlSerializableRequestList loadRequestsFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableRequestList.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 4,
      "-": 37,
      "guiyong96": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlRequestListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * A class to access RequestList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlRequestListStorage implements RequestListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlRequestListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlRequestListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Path getRequestListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Optional\u003cReadOnlyRequests\u003e readRequestList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return readRequestList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Similar to {@link #readRequestList()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Optional\u003cReadOnlyRequests\u003e readRequestList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            logger.info(\"RequestList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlSerializableRequestList xmlAddressBook \u003d XmlFileStorage.loadRequestsFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void saveRequestList(ReadOnlyRequests requestList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        saveRequestList(requestList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Similar to {@link #saveRequestList(ReadOnlyRequests)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void saveRequestList(ReadOnlyRequests requestList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(requestList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlFileStorage.saveRequestToFile(filePath, new XmlSerializableRequestList(requestList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 6,
      "guiyong96": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableBookInventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * An Immutable BookInventory that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "@XmlRootElement(name \u003d \"bookinventory\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlSerializableBookInventory {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Book Inventory list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private List\u003cXmlAdaptedBook\u003e books;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Creates an empty XmlSerializableBookInventory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlSerializableBookInventory() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlSerializableBookInventory(ReadOnlyBookInventory src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        books.addAll(src.getBookList().stream().map(XmlAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code BookInventory} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code XmlAdaptedBook}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookInventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        BookInventory bookInventory \u003d new BookInventory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (XmlAdaptedBook p : books) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            Book book \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            if (bookInventory.hasPerson(book)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            bookInventory.addBook(book);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return bookInventory;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof XmlSerializableBookInventory)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return books.equals(((XmlSerializableBookInventory) other).books);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 6,
      "-": 47,
      "guiyong96": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableRequestList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.ReadOnlyRequests;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * An Immutable RequestList that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "@XmlRootElement(name \u003d \"requestlist\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlSerializableRequestList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate request(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private List\u003cXmlAdaptedRequest\u003e requests;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Creates an empty XmlSerializableRequestList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlSerializableRequestList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public XmlSerializableRequestList(ReadOnlyRequests src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requests.addAll(src.getRequestList().stream().map(XmlAdaptedRequest::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Converts this addressbook into the requestModel\u0027s {@code RequestList} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code XmlAdaptedRequest}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        RequestList requestList \u003d new RequestList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (XmlAdaptedRequest p : requests) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            Request request \u003d p.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            if (requestList.hasRequest(request)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requestList.addRequest(request);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requestList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof XmlSerializableRequestList)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return requests.equals(((XmlSerializableRequestList) other).requests);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 6,
      "guiyong96": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AlertBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iashcole"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Alerts user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iashcole"
        },
        "content": "public class AlertBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Displays Alert Box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param title Header for Alert Box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param message Message under header"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    protected static void display(String title, String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Stage window \u003d new Stage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setTitle(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.resizableProperty().setValue(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setMinWidth(300);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        label.setText(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Button closeButton \u003d new Button(\"Close Window\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        closeButton.setOnAction(e -\u003e window.close());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        layout.getChildren().addAll(label, closeButton);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.showAndWait();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iashcole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 16,
      "iashcole": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String FXML \u003d \"BookListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on BookInventory level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        isbn.setText(book.getIsbn().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        quantity.setText(book.getQuantity().getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        price.setText(book.getPrice().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        book.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "-": 51,
      "guiyong96": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        setConnections(bookList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void setConnections(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                        logger.fine(\"Selection in book list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Scrolls to the {@code BookCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            bookListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            bookListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "guiyong96": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /*public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            \"https://www.amazon.com/s/ref\u003dnb_sb_noss?url\u003dsearch-alias%3Dstripbooks\u0026field-keywords\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void loadPersonPage(Book book) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + book.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 1,
      "-": 67,
      "guiyong96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CheckPassword.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iashcole"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * Copyright (c) 2011, 2012 Oracle and/or its affiliates."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * All rights reserved. Use is subject to license terms."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * This file is available and licensed under the following license:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * Redistribution and use in source and binary forms, with or without"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * modification, are permitted provided that the following conditions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * are met:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *  - Redistributions of source code must retain the above copyright"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *    notice, this list of conditions and the following disclaimer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *  - Redistributions in binary form must reproduce the above copyright"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *    notice, this list of conditions and the following disclaimer in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *    the documentation and/or other materials provided with the distribution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *  - Neither the name of Oracle nor the names of its"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *    contributors may be used to endorse or promote products derived"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *    from this software without specific prior written permission."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iashcole"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iashcole"
        },
        "content": " * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iashcole"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iashcole"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iashcole"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Checks if password is correct"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iashcole"
        },
        "content": "public class CheckPassword {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    private static int count \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    private static Label message \u003d new Label(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * displays enter password box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static void display() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Stage window \u003d new Stage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Group root \u003d new Group();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Scene scene \u003d new Scene(root, 260, 80);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setTitle(\"Enter Password\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setOnCloseRequest(e -\u003e System.exit(2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.resizableProperty().setValue(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        VBox vb \u003d new VBox();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        vb.setPadding(new Insets(10, 0, 0, 10));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        vb.setSpacing(10);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        HBox hb \u003d new HBox();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        hb.setSpacing(10);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        hb.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Label label \u003d new Label(\"Password\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        final PasswordField pb \u003d new PasswordField();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        // to be omitted @@author iashcole"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        // ~start~"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        pb.setText(\"owner\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        // ~end~"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        pb.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            public void handle(ActionEvent e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                if (pb.getText().equals(\"password\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    message.setText(\"Your password has been confirmed\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    message.setTextFill(Color.web(\"black\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    AlertBox.display(\"Welcome\", \"Welcome, student!\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                            + \" If you encounter any problems using the app, press F1 for help!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    window.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                } else if (pb.getText().equals(\"owner\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    message.setText(\"Your password has been confirmed\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    message.setTextFill(Color.web(\"black\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    AlertBox.display(\"Welcome Owner\", \"Welcome back, you have administrative rights.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    window.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    message.setText(\"Your password is incorrect!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    message.setTextFill(Color.web(\"red\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    //Maximum try of 3 counts"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    if (count \u003d\u003d 3) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                        AlertBox.display(\"Maximum Tries Exceeded\", \"Please try again later.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                        System.exit(2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                pb.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        hb.getChildren().addAll(label, pb);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        vb.getChildren().addAll(hb, message);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        scene.setRoot(vb);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.showAndWait();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iashcole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 6,
      "iashcole": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private List\u003cString\u003e commands;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private int commandHistoryPointer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        commands \u003d commandHistory.getHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        commandHistoryPointer \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        commands.add(\"add n/Hello World i/9783161484100 p/19.99 c/15.00 q/50 t/cs2113t t/coding\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        commands.add(\"request i/9783161484100 q/42 e/johnd@example.com \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            if (commands.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            if (commands.size() \u003d\u003d commandHistoryPointer) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                commandHistoryPointer \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            commandTextField.setText(commands.get(commandHistoryPointer));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            commandHistoryPointer++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 7,
      "-": 149,
      "guiyong96": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    private CheckPassword checkPassword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private RequestListPanel requestListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private StackPane requestListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        //helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Fills up all the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        personListPanelPlaceholder.getChildren().addAll(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestListPanel \u003d new RequestListPanel(logic.getFilteredRequestList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestListPanelPlaceholder.getChildren().addAll(requestListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getBookInventoryFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    void showBookList () {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        personListPanelPlaceholder.getChildren().addAll(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        checkPassword.display();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public RequestListPanel getRequestListPanel() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return requestListPanel;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 4,
      "-": 195,
      "guiyong96": 20,
      "iashcole": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RequestCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String FXML \u003d \"RequestCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on BookInventory level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public final Request request;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label isbn;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestCard(Request request, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        this.request \u003d request;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        //id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        name.setText(\"Request No. \" + displayedIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        isbn.setText(\"Isbn : \" + request.getIsbn().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        quantity.setText(\"Number in demand: \" + request.getQuantity().getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        email.setText(\"Student\u0027s Email: \" + request.getEmail().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!(other instanceof RequestCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        RequestCard card \u003d (RequestCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 request.equals(card.request);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RequestListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.ui.RequestPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.Request;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String FXML \u003d \"RequestListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RequestListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private ListView\u003cRequest\u003e requestListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public RequestListPanel(ObservableList\u003cRequest\u003e requestList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        setConnections(requestList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void setConnections(ObservableList\u003cRequest\u003e requestList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestListView.setItems(requestList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestListView.setCellFactory(listView -\u003e new RequestListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        requestListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                        logger.fine(\"Selection in book list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                        raise(new RequestPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Scrolls to the {@code BookCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requestListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requestListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    class RequestListViewCell extends ListCell\u003cRequest\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        protected void updateItem(Request request, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            super.updateItem(request, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            if (empty || request \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                setGraphic(new RequestCard(request, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 3,
      "guiyong96": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.BookInventoryChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void handleAddressBookChangedEvent(BookInventoryChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "guiyong96": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SubmitBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iashcole"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * Submits user data"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iashcole"
        },
        "content": "public class SubmitBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static boolean isYes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * displays submit box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param title submit box header"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @param message submit box message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * @return boolean isYes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    public static boolean display(String title, String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Stage window \u003d new Stage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setTitle(title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.resizableProperty().setValue(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setMinWidth(300);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Button yesButton \u003d new Button(\"Yes\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        yesButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            window.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            isYes \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Button noButton \u003d new Button(\"No\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        noButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            window.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iashcole"
        },
        "content": "            isYes \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        label.setText(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        layout.getChildren().addAll(label, yesButton, noButton);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        window.showAndWait();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iashcole"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        return isYes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iashcole"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iashcole"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 18,
      "iashcole": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/resources/view/BookListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "      \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "      \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "      \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "guiyong96": 3
    }
  },
  {
    "path": "src/main/resources/view/BookListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "guiyong96": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "          \u003cVBox fx:id\u003d\"bookList\" minWidth\u003d\"240\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"100\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "          \u003cVBox fx:id\u003d\"requestList\" minWidth\u003d\"240\" prefWidth\u003d\"240\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            \u003cStackPane fx:id\u003d\"requestListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "guiyong96": 9
    }
  },
  {
    "path": "src/main/resources/view/RequestCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "      \u003cLabel fx:id\u003d\"isbn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isbn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "      \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "guiyong96": 3
    }
  },
  {
    "path": "src/main/resources/view/RequestListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "  \u003cListView fx:id\u003d\"requestListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 8
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c!-- Valid Book --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e9482424\u003c/isbn\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003ehans@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c!-- Book with invalid Isbn field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e948asdf2424\u003c/isbn\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003ehans@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "guiyong96": 12
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c!-- Book with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e9482424\u003c/isbn\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003ehans@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "guiyong96": 6
    }
  },
  {
    "path": "src/test/data/XmlSerializableBookInventoryTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e94351253\u003c/isbn\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003ealice@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003e123, Jurong West Ave 6, #08-111\u003c/quantity\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c!-- Book with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e94351253\u003c/isbn\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003epauline@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "guiyong96": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableBookInventoryTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c!-- Book with invalid price field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e9482424\u003c/isbn\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/price\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "guiyong96": 6
    }
  },
  {
    "path": "src/test/data/XmlSerializableBookInventoryTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c!-- BookInventory save file which contains the same Book values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e94351253\u003c/isbn\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003ealice@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003e123, Jurong West Ave 6, #08-111\u003c/quantity\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e98765432\u003c/isbn\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003ejohnd@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003e311, Clementi Ave 2, #02-25\u003c/quantity\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e95352563\u003c/isbn\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003eheinz@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003ewall street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e87652533\u003c/isbn\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003ecornelia@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003e10th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e9482224\u003c/isbn\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003ewerner@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003emichegan ave\u003c/quantity\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e9482427\u003c/isbn\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003elydia@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003elittle tokyo\u003c/quantity\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn\u003e9482442\u003c/isbn\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice\u003eanna@example.com\u003c/price\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "guiyong96": 36
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidBookField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c!-- Book with an invalid Isbn field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003cbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cisbn\u003e9482asf424\u003c/isbn\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cprice\u003e5.90\u003c/price\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003ccost\u003e4.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cquantity\u003e4\u003c/quantity\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c/book\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "guiyong96": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingBookField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c!-- Book with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003cbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cisbn\u003e9482424\u003c/isbn\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cprice\u003e4.90\u003c/price\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003ccost\u003e3.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cquantity\u003e4\u003c/quantity\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c/book\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "guiyong96": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempBookInventory.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "guiyong96": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003cbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cisbn\u003e978-3-16-148410-0\u003c/isbn\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cprice\u003e6.90\u003c/price\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003ccost\u003e4.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cquantity\u003e4\u003c/quantity\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c/book\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "guiyong96": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validBookInventory.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e81th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003ewall street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e10th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003emichegan ave\u003c/quantity\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003elittle tokyo\u003c/quantity\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003e4th street\u003c/quantity\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003elittle india\u003c/quantity\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003cbooks\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cisbn isPrivate\u003d\"false\"\u003e978-1-56619-909-4\u003c/isbn\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e7.90\u003c/price\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e7.90\u003c/cost\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        \u003cquantity isPrivate\u003d\"false\"\u003echicago ave\u003c/quantity\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    \u003c/books\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 66
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Provides a handle to a book card in the book list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String QUANTITY_FIELD_ID \u003d \"#quantity\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String ISBN_FIELD_ID \u003d \"#isbn\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String PRICE_FIELD_ID \u003d \"#price\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Label quantityLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Label isbnLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Label priceLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        quantityLabel \u003d getChildNode(QUANTITY_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        isbnLabel \u003d getChildNode(ISBN_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        priceLabel \u003d getChildNode(PRICE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public String getQuantity() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return quantityLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return isbnLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public String getPrice() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return priceLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if this handle contains {@code book}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public boolean equals(Book book) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return getName().equals(book.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 getQuantity().equals(book.getQuantity().getValue())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                \u0026\u0026 getPhone().equals(book.getIsbn().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 getPrice().equals(book.getPrice().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(book.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 1,
      "-": 64,
      "guiyong96": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * Provides a handle for {@code BookListPanel} containing the list of {@code BookCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cBook\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#bookListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Optional\u003cBook\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cBook\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        List\u003cBook\u003e selectedBookList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (selectedBookList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new AssertionError(\"Book list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedBookList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        List\u003cBook\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Navigates the listview to display {@code book}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void navigateToCard(Book book) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        if (!getRootNode().getItems().contains(book)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new IllegalArgumentException(\"Book does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            getRootNode().scrollTo(book);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Selects the {@code BookCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the book card handle of a book associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Book getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Remembers the selected {@code BookCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns true if the selected {@code BookCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 136,
      "guiyong96": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.storage.XmlSerializableBookInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    protected Supplier\u003cReadOnlyBookInventory\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyBookInventory\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            createDataFileWithData(new XmlSerializableBookInventory(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        userPrefs.setBookInventoryFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns a defensive copy of the BookInventory data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookInventory readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return new BookInventory(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            throw new AssertionError(\"Data is not in the BookInventory format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            throw new AssertionError(\"InventoryStorage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model copy \u003d new ModelManager((model.getBookInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredBookList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 4,
      "kennethcsj": 4,
      "-": 106,
      "guiyong96": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : BookInventory\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "guiyong96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.storage.XmlAdaptedBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.storage.XmlSerializableBookInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookInventoryBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validBookInventory.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingBookField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validBook.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempBookInventory.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String INVALID_ISBN \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_ISBN \u003d \"978-3-16-148410-0\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static final String VALID_COST \u003d \"19.99\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_PRICE \u003d \"29.99\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_QUANTITY \u003d \"4\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlUtil.getDataFromFile(null, BookInventory.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, BookInventory.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, BookInventory.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        BookInventory dataFromFile \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                VALID_FILE, XmlSerializableBookInventory.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(9, dataFromFile.getBookList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedBookWithRootElement.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook expectedPerson \u003d new XmlAdaptedBook("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                null, VALID_ISBN, VALID_PRICE, VALID_COST, VALID_QUANTITY, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedBookWithRootElement.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook expectedPerson \u003d new XmlAdaptedBook("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                VALID_NAME, INVALID_ISBN, VALID_PRICE, VALID_COST, VALID_QUANTITY, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedBookWithRootElement.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook expectedPerson \u003d new XmlAdaptedBook("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                VALID_NAME, VALID_ISBN, VALID_PRICE, VALID_COST, VALID_QUANTITY, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlUtil.saveDataToFile(null, new BookInventory());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new BookInventory());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlSerializableBookInventory dataToWrite \u003d new XmlSerializableBookInventory(new BookInventory());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlSerializableBookInventory dataFromFile \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                TEMP_FILE, XmlSerializableBookInventory.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventoryBuilder builder \u003d new BookInventoryBuilder(new BookInventory());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        dataToWrite \u003d new XmlSerializableBookInventory("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                builder.withBook(new BookBuilder().build()).build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableBookInventory.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedBook}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @XmlRootElement(name \u003d \"book\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static class XmlAdaptedBookWithRootElement extends XmlAdaptedBook {}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 17,
      "-": 99,
      "guiyong96": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private RequestModel requestModel \u003d new RequestModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Logic logic \u003d new LogicManager(model, requestModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        logic.getFilteredBookList().remove(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     *      - {@code expectedModel}\u0027s BookInventory was saved to the storage file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "-": 118,
      "guiyong96": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertCommandSuccess(new AddCommand(validBook), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book bookInList \u003d model.getBookInventory().getBookList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertCommandFailure(new AddCommand(bookInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 3,
      "-": 36,
      "guiyong96": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void constructor_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBook).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBook), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book alice \u003d new BookBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book bob \u003d new BookBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void resetData(ReadOnlyBookInventory newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public ReadOnlyBookInventory getBookInventory() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void updateBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void commitBookInventory() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * A Model stub that contains a single book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        ModelStubWithPerson(Book book) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return this.book.isSameBook(book);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * A Model stub that always accept the book being added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final ArrayList\u003cBook\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            return personsAdded.stream().anyMatch(book::isSameBook);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            personsAdded.add(book);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void commitBookInventory() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public ReadOnlyBookInventory getBookInventory() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            return new BookInventory();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 17,
      "kennethcsj": 3,
      "-": 159,
      "guiyong96": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        expectedModel.resetData(new BookInventory());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 2,
      "-": 30,
      "guiyong96": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_ISBN_AMY \u003d \"978-3-16-148410-0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_ISBN_BOB \u003d \"978-1-56619-909-4\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_PRICE_AMY \u003d \"19.97\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_PRICE_BOB \u003d \"98.21\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_COST_AMY \u003d \"19.60\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_COST_BOB \u003d \"98.01\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_QUANTITY_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String VALID_QUANTITY_BOB \u003d \"8\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String ISBN_DESC_AMY \u003d \" \" + PREFIX_ISBN + VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String ISBN_DESC_BOB \u003d \" \" + PREFIX_ISBN + VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String PRICE_DESC_AMY \u003d \" \" + PREFIX_PRICE + VALID_PRICE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String PRICE_DESC_BOB \u003d \" \" + PREFIX_PRICE + VALID_PRICE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String COST_DESC_AMY \u003d \" \" + PREFIX_COST + VALID_COST_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String COST_DESC_BOB \u003d \" \" + PREFIX_COST + VALID_COST_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String QUANTITY_DESC_AMY \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String QUANTITY_DESC_BOB \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String INVALID_ISBN_DESC \u003d \" \" + PREFIX_ISBN + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        DESC_AMY \u003d new EditBookDescriptorBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withIsbn(VALID_ISBN_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withPrice(VALID_PRICE_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withCost(VALID_COST_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withQuantity(VALID_QUANTITY_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        DESC_BOB \u003d new EditBookDescriptorBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withPrice(VALID_PRICE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withCost(VALID_COST_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * - the BookInventory and the filtered book list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventory expectedBookInventory \u003d new BookInventory(actualModel.getBookInventory());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            assertEquals(expectedBookInventory, actualModel.getBookInventory());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code model}\u0027s BookInventory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        final String[] splitName \u003d book.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Deletes the first book in {@code model}\u0027s filtered list from {@code model}\u0027s BookInventory."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.deleteBook(firstBook);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.commitBookInventory();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 12,
      "kennethcsj": 5,
      "-": 97,
      "guiyong96": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of BookInventory list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookInventory().getBookList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // delete -\u003e first book deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered book list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // redo -\u003e same first book deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // execution failed -\u003e BookInventory state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // single BookInventory state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * 1. Deletes a {@code Book} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted book in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the book object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // delete -\u003e deletes second book in unfiltered book list / first book in filtered book list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered book list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertNotEquals(bookToDelete, model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // redo -\u003e deletes same second book in unfiltered book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 20,
      "kennethcsj": 1,
      "-": 134,
      "guiyong96": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class EditBookDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditCommand.EditBookDescriptor descriptorWithSameValues \u003d new EditCommand.EditBookDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        EditCommand.EditBookDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                new EditBookDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withPrice(VALID_PRICE_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withQuantity(VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 5,
      "-": 45,
      "guiyong96": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookInventory(model.getBookInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.updateBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book lastBook \u003d model.getFilteredBookList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookBuilder personInList \u003d new BookBuilder(lastBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedBook \u003d personInList.withName(VALID_NAME_BOB).withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookInventory(model.getBookInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.updateBook(lastBook, editedBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditBookDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book editedBook \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookInventory(model.getBookInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookInFilteredList \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedBook \u003d new BookBuilder(bookInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookInventory(model.getBookInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.updateBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(firstBook).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // edit book in filtered list into a duplicate in BookInventory"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book bookInList \u003d model.getBookInventory().getBookList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                new EditBookDescriptorBuilder(bookInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * but smaller than size of BookInventory"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of BookInventory list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookInventory().getBookList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookToEdit \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookInventory(model.getBookInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.updateBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // edit -\u003e first book edited"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered book list to show all persons"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // redo -\u003e same first book edited again"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // execution failed -\u003e BookInventory state not added into model"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // single BookInventory state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * 1. Edits a {@code Book} from a filtered list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited book in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the book object regardless of indexing."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookInventory(model.getBookInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Book bookToEdit \u003d model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.updateBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.commitBookInventory();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // edit -\u003e edits second book in unfiltered book list / first book in filtered book list"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered book list to show all persons"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertNotEquals(model.getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased()), bookToEdit);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // redo -\u003e edits same second book in unfiltered book list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor copyDescriptor \u003d new EditCommand.EditBookDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 44,
      "kennethcsj": 2,
      "-": 168,
      "guiyong96": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredBookList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 7,
      "-": 73,
      "guiyong96": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "guiyong96": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "guiyong96": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of BookInventory list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getBookInventory().getBookList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 4,
      "kennethcsj": 1,
      "-": 108,
      "guiyong96": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalBookInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "guiyong96": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + COST_DESC_BOB + QUANTITY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + COST_DESC_BOB + QUANTITY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_AMY + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + COST_DESC_BOB + QUANTITY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_AMY + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + COST_DESC_BOB + QUANTITY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB + COST_DESC_BOB + QUANTITY_DESC_AMY"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + QUANTITY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book expectedBookMultipleTags \u003d new BookBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB + COST_DESC_BOB + QUANTITY_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedBookMultipleTags));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertParseSuccess(parser, NAME_DESC_AMY + ISBN_DESC_AMY + PRICE_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // + COST_DESC_AMY + QUANTITY_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB + COST_DESC_BOB + QUANTITY_DESC_BOB,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_ISBN_BOB + PRICE_DESC_BOB + COST_DESC_BOB + QUANTITY_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + VALID_PRICE_BOB + QUANTITY_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB + VALID_QUANTITY_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_ISBN_BOB + VALID_PRICE_BOB + VALID_QUANTITY_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertParseFailure(parser, INVALID_NAME_DESC + ISBN_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // + PRICE_DESC_BOB + COST_DESC_BOB + QUANTITY_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // invalid isbn"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_ISBN_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + PRICE_DESC_BOB + QUANTITY_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + INVALID_PRICE_DESC + QUANTITY_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iashcole"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + PRICE_DESC_BOB + COST_DESC_BOB + INVALID_QUANTITY_DESC"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Quantity.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + ISBN_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                + PRICE_DESC_BOB + COST_DESC_BOB + QUANTITY_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ISBN_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                        + PRICE_DESC_BOB + COST_DESC_BOB + INVALID_QUANTITY_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + QUANTITY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "kennethcsj": 33,
      "-": 75,
      "guiyong96": 29,
      "iashcole": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BookInventoryParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class BookInventoryParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final BookInventoryParser parser \u003d new BookInventoryParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BookUtil.getAddCommand(book));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(new AddCommand(book), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(book).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + BookUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            assertNotEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 5,
      "-": 127,
      "guiyong96": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                \"1\" + INVALID_ISBN_DESC, Isbn.MESSAGE_ISBN_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_PRICE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                Quantity.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ISBN_DESC + PRICE_DESC_AMY, Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertParseFailure(parser, \"1\" + ISBN_DESC_BOB + INVALID_ISBN_DESC, Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Book} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_PRICE_DESC + VALID_QUANTITY_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // + VALID_ISBN_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + PRICE_DESC_AMY + QUANTITY_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withIsbn(VALID_ISBN_BOB).withPrice(VALID_PRICE_AMY).withQuantity(VALID_QUANTITY_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_BOB + PRICE_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withPrice(VALID_PRICE_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withPrice(VALID_PRICE_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withQuantity(VALID_QUANTITY_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_AMY + QUANTITY_DESC_AMY + PRICE_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + TAG_DESC_FRIEND + ISBN_DESC_AMY + QUANTITY_DESC_AMY + PRICE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + ISBN_DESC_BOB + QUANTITY_DESC_BOB + PRICE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                .withPrice(VALID_PRICE_BOB).withQuantity(VALID_QUANTITY_BOB).withTags("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                        VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ISBN_DESC + ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_BOB + INVALID_ISBN_DESC + QUANTITY_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                + ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_BOB).withPrice(VALID_PRICE_BOB)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 7,
      "kennethcsj": 18,
      "-": 152,
      "guiyong96": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "guiyong96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String INVALID_ISBN \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"1e\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_ISBN \u003d \"978-3-16-148410-0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_QUANTITY \u003d \"5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_PRICE \u003d \"1.99\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_ISBN));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Isbn expectedIsbn \u003d new Isbn(VALID_ISBN);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedIsbn, ParserUtil.parsePhone(VALID_ISBN));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_ISBN + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Isbn expectedIsbn \u003d new Isbn(VALID_ISBN);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedIsbn, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_QUANTITY));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseAddress(VALID_QUANTITY));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_QUANTITY + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePrice((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrice(INVALID_PRICE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(VALID_PRICE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_PRICE + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 4,
      "-": 178,
      "guiyong96": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BookInventoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class BookInventoryTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private final BookInventory bookInventory \u003d new BookInventory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(Collections.emptyList(), bookInventory.getBookList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        bookInventory.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventory newData \u003d getTypicalBookInventory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        bookInventory.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertEquals(newData, bookInventory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // Two books with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withQuantity(VALID_QUANTITY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventoryStub newData \u003d new BookInventoryStub(newBooks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        bookInventory.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        bookInventory.hasPerson(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(bookInventory.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookInventory.addBook(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(bookInventory.hasPerson(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookInventory.addBook(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withQuantity(VALID_QUANTITY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(bookInventory.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookInventory.getBookList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * A stub ReadOnlyBookInventory whose books list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private static class BookInventoryStub implements ReadOnlyBookInventory {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventoryStub(Collection\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 11,
      "kennethcsj": 1,
      "-": 76,
      "guiyong96": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookInventoryBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        modelManager.hasBook(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(modelManager.hasBook(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        modelManager.addBook(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(modelManager.hasBook(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        modelManager.getFilteredBookList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventory bookInventory \u003d new BookInventoryBuilder().withBook(ALICE).withBook(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        BookInventory differentBookInventory \u003d new BookInventory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        modelManager \u003d new ModelManager(bookInventory, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(bookInventory, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        // different bookInventory -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentBookInventory, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        modelManager.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(bookInventory, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        modelManager.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        differentUserPrefs.setBookInventoryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(bookInventory, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 16,
      "kennethcsj": 1,
      "-": 63,
      "guiyong96": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedBookInventoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookInventoryBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class VersionedBookInventoryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final ReadOnlyBookInventory addressBookWithAmy \u003d new BookInventoryBuilder().withBook(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final ReadOnlyBookInventory addressBookWithBob \u003d new BookInventoryBuilder().withBook(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final ReadOnlyBookInventory addressBookWithCarl \u003d new BookInventoryBuilder().withBook(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final ReadOnlyBookInventory emptyAddressBook \u003d new BookInventoryBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertThrows(VersionedBookInventory.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertThrows(VersionedBookInventory.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertThrows(VersionedBookInventory.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertThrows(VersionedBookInventory.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory differentAddressBookList \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private void assertAddressBookListStatus(VersionedBookInventory versionedAddressBook,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                                             List\u003cReadOnlyBookInventory\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                                             ReadOnlyBookInventory expectedCurrentState,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "                                             List\u003cReadOnlyBookInventory\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(new BookInventory(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        for (ReadOnlyBookInventory expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            assertEquals(expectedAddressBook, new BookInventory(versionedAddressBook));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        for (ReadOnlyBookInventory expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            assertEquals(expectedAddressBook, new BookInventory(versionedAddressBook));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Creates and returns a {@code VersionedBookInventory} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * {@code VersionedBookInventory#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private VersionedBookInventory prepareAddressBookList(ReadOnlyBookInventory... addressBookStates) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        VersionedBookInventory versionedAddressBook \u003d new VersionedBookInventory(addressBookStates[0]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedBookInventory versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 9,
      "kennethcsj": 37,
      "-": 248,
      "guiyong96": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        book.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(ALICE.isSameBook(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(ALICE.isSameBook(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).withPrice(VALID_PRICE_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withPrice(VALID_PRICE_BOB).withQuantity(VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).withQuantity(VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertFalse(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withQuantity(VALID_QUANTITY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(ALICE.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book aliceCopy \u003d new BookBuilder(ALICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withPrice(VALID_PRICE_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withQuantity(VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 8,
      "kennethcsj": 5,
      "guiyong96": 18,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withName(\"Alice\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withIsbn(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withPrice(\"alice@email.com\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .withQuantity(\"Main Street\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "guiyong96": 15,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 4,
      "guiyong96": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/PriceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertFalse(Price.isValidPrice(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertTrue(Price.isValidPrice(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 27,
      "kennethcsj": 2,
      "guiyong96": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/QuantityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "guiyong96": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueBookListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(uniqueBookList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(uniqueBookList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withQuantity(VALID_QUANTITY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(uniqueBookList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        expectedUniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALICE).withQuantity(VALID_QUANTITY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        expectedUniqueBookList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPersons((UniqueBookList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPersons(expectedUniqueBookList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPersons((List\u003cBook\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPersons(bookList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        expectedUniqueBookList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.setPersons(listWithDuplicateBooks);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uniqueBookList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 1,
      "guiyong96": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsRequestStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class JsonUserPrefsRequestStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        userPrefs.setBookInventoryFilePath(Paths.get(\"addressbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "-": 130,
      "guiyong96": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/RequestStorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.BookInventoryChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class RequestStorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private InventoryStorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlBookInventoryStorage addressBookStorage \u003d new XmlBookInventoryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        storageManager \u003d new InventoryStorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "         * Note: This is an integration test that verifies the InventoryStorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsRequestStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "         * Note: This is an integration test that verifies the InventoryStorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "         * {@link XmlBookInventoryStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "         * {@link XmlBookInventoryRequestStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventory original \u003d getTypicalBookInventory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        ReadOnlyBookInventory retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(original, new BookInventory(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // Create a InventoryStorageManager while injecting a stub that throws an"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // exception when the save method is called"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        InventoryStorage storage \u003d new InventoryStorageManager("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                new XmlBookInventoryStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        storage.handleAddressBookChangedEvent(new BookInventoryChangedEvent(new BookInventory()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    class XmlBookInventoryStorageExceptionThrowingStub extends XmlBookInventoryStorage {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        public XmlBookInventoryStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        public void saveAddressBook(ReadOnlyBookInventory addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 8,
      "-": 81,
      "guiyong96": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.storage.XmlAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlAdaptedBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private static final String VALID_COST \u003d \"19.99\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getIsbn().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getPrice().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getQuantity().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook person \u003d new XmlAdaptedBook(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                new XmlAdaptedBook(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COST, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlAdaptedBook person \u003d new XmlAdaptedBook(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                VALID_COST, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                new XmlAdaptedBook(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                        VALID_COST, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String expectedMessage \u003d Isbn.MESSAGE_ISBN_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlAdaptedBook person \u003d new XmlAdaptedBook(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                VALID_COST, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Isbn.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook person \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                new XmlAdaptedBook(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_COST, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iashcole"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlAdaptedBook person \u003d new XmlAdaptedBook(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                VALID_COST, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook person \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                new XmlAdaptedBook(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COST, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        XmlAdaptedBook person \u003d new XmlAdaptedBook(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COST, null, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlAdaptedBook person \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                new XmlAdaptedBook(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COST, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 18,
      "-": 75,
      "guiyong96": 18,
      "iashcole": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlBookInventoryRequestStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookInventory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class XmlBookInventoryRequestStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlBookInventoryRequestStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private java.util.Optional\u003cReadOnlyBookInventory\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return new XmlBookInventoryStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventory original \u003d getTypicalBookInventory();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlBookInventoryStorage xmlAddressBookStorage \u003d new XmlBookInventoryStorage(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        ReadOnlyBookInventory readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(original, new BookInventory(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        original.addBook(HOON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(original, new BookInventory(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        original.addBook(IDA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(original, new BookInventory(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private void saveAddressBook(ReadOnlyBookInventory addressBook, String filePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            new XmlBookInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        saveAddressBook(new BookInventory(), null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 4,
      "kennethcsj": 10,
      "-": 99,
      "guiyong96": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableBookInventoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class XmlSerializableBookInventoryTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableBookInventoryTest\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlSerializableBookInventory dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                XmlSerializableBookInventory.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        BookInventory bookInventoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventory typicalPersonsBookInventory \u003d TypicalBooks.getTypicalBookInventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(bookInventoryFromFile, typicalPersonsBookInventory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlSerializableBookInventory dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                XmlSerializableBookInventory.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlSerializableBookInventory dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                XmlSerializableBookInventory.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        thrown.expectMessage(XmlSerializableBookInventory.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 4,
      "-": 31,
      "guiyong96": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alices Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final String DEFAULT_ISBN \u003d \"978-3-16-148410-0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"9.99\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"5.99\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Isbn isbn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        isbn \u003d new Isbn(DEFAULT_ISBN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        name \u003d bookToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        isbn \u003d bookToCopy.getIsbn();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        price \u003d bookToCopy.getPrice();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        cost \u003d bookToCopy.getCost();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        quantity \u003d bookToCopy.getQuantity();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bookToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Sets the {@code Name} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Sets the {@code Isbn} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookBuilder withIsbn(String isbn) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.isbn \u003d new Isbn(isbn);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Sets the {@code Price} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Sets the {@code Cost} of the {@code Book} that we are building"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        return new Book(name, isbn, price, cost, quantity, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 24,
      "-": 53,
      "guiyong96": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookInventoryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " *     {@code BookInventory ab \u003d new BookInventoryBuilder().withBook(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookInventoryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    private BookInventory bookInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookInventoryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        bookInventory \u003d new BookInventory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookInventoryBuilder(BookInventory bookInventory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        this.bookInventory \u003d bookInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Adds a new {@code Book} to the {@code BookInventory} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public BookInventoryBuilder withBook(Book book) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookInventory.addBook(book);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    public BookInventory build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return bookInventory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 4,
      "-": 20,
      "guiyong96": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns an add command string for adding the {@code book}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static String getAddCommand(Book book) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getBookDetails(book);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the part of command string for the given {@code book}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static String getBookDetails(Book book) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        sb.append(PREFIX_NAME + book.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        sb.append(PREFIX_ISBN + book.getIsbn().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        sb.append(PREFIX_PRICE + book.getPrice().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        sb.append(PREFIX_COST + book.getCost().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        sb.append(PREFIX_QUANTITY + book.getQuantity().getValue() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        book.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Returns the part of command string for the given {@code EditBookDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.getIsbn().ifPresent(isbn -\u003e sb.append(PREFIX_ISBN).append(isbn.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.getPrice().ifPresent(price -\u003e sb.append(PREFIX_PRICE).append(price.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.getCost().ifPresent(cost -\u003e sb.append(PREFIX_PRICE).append(cost.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        descriptor.getQuantity().ifPresent("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            quantity -\u003e sb.append(PREFIX_QUANTITY).append(quantity.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "kennethcsj": 10,
      "-": 37,
      "guiyong96": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBookDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Cost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": " * A utility class to help with building EditBookDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class EditBookDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private EditCommand.EditBookDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public EditBookDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        descriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public EditBookDescriptorBuilder(EditCommand.EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditBookDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Returns an {@code EditBookDescriptor} with fields containing {@code book}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public EditBookDescriptorBuilder(Book book) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        descriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setName(book.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        descriptor.setIsbn(book.getIsbn());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setPrice(book.getPrice());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setCost(book.getCost());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setQuantity(book.getQuantity());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setTags(book.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public EditBookDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Sets the {@code Isbn} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public EditBookDescriptorBuilder withIsbn(String isbn) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setIsbn(new Isbn(isbn));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Sets the {@code Price} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public EditBookDescriptorBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setPrice(new Price(price));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Sets the {@code Cost} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public EditBookDescriptorBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setCost(new Cost(cost));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Sets the {@code Quantity} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public EditBookDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        descriptor.setQuantity(new Quantity(quantity));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditBookDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public EditBookDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public EditCommand.EditBookDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 20,
      "kennethcsj": 5,
      "-": 52,
      "guiyong96": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the middle index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the last index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns the book in the {@code model}\u0027s book list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static Book getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 3,
      "-": 47,
      "guiyong96": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBooks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": " * A utility class containing a list of {@code Book} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book ALICE \u003d new BookBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withName(\"Biology: A Global Approach\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9780748137992\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withPrice(\"73.76\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withCost(\"19.99\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withQuantity(\"4\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book BENSON \u003d new BookBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withName(\"Elementary Statistics: Picturing the World\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9781401309572\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withPrice(\"58.98\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withCost(\"19.99\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withQuantity(\"11\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book CARL \u003d new BookBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9780062294432\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(\"6.66\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(\"6.66\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(\"111\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book DANIEL \u003d new BookBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9780062472601\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(\"5.55\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(\"6.66\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(\"10\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book ELLE \u003d new BookBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9780767905923\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(\"4.44\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(\"6.66\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book FIONA \u003d new BookBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9781401310462\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(\"3.33\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(\"6.66\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(\"2\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book GEORGE \u003d new BookBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9781401312855\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(\"2.22\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(\"6.66\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(\"4\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book HOON \u003d new BookBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9781401308582\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(\"1.11\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(\"6.66\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(\"2\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book IDA \u003d new BookBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            .withIsbn(\"9780062294449\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(\"0.11\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(\"6.66\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    // Manually added - Book\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book AMY \u003d new BookBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withIsbn(VALID_ISBN_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(VALID_PRICE_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(VALID_COST_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(VALID_QUANTITY_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static final Book BOB \u003d new BookBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withIsbn(VALID_ISBN_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withPrice(VALID_PRICE_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withCost(VALID_COST_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withQuantity(VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "     * Returns an {@code BookInventory} with all the typical persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static BookInventory getTypicalBookInventory() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookInventory bi \u003d new BookInventory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            bi.addBook(book);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return bi;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "kennethcsj": 32,
      "-": 27,
      "guiyong96": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BookCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book bookWithNoTags \u003d new BookBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookCard bookCard \u003d new BookCard(bookWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uiPartRule.setUiPart(bookCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertCardDisplay(bookCard, bookWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book bookWithTags \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        bookCard \u003d new BookCard(bookWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uiPartRule.setUiPart(bookCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertCardDisplay(bookCard, bookWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookCard bookCard \u003d new BookCard(book, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // same book, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookCard copy \u003d new BookCard(book, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(bookCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(bookCard.equals(bookCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(bookCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(bookCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // different book, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Book differentBook \u003d new BookBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(bookCard.equals(new BookCard(differentBook, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // same book, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertFalse(bookCard.equals(new BookCard(book, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Asserts that {@code bookCard} displays the details of {@code expectedBook} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void assertCardDisplay(BookCard bookCard, Book expectedBook, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(bookCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guiyong96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // verify book details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertCardDisplaysPerson(expectedBook, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guiyong96": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BookListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBooks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.storage.XmlSerializableBookInventory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "public class BookListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final ObservableList\u003cBook\u003e TYPICAL_BOOKS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            FXCollections.observableList(getTypicalBooks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        initUi(TYPICAL_BOOKS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_BOOKS.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_BOOKS.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            Book expectedBook \u003d TYPICAL_BOOKS.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            assertCardDisplaysPerson(expectedBook, actualCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        initUi(TYPICAL_BOOKS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code BookListPanel} requires lesser than"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        ObservableList\u003cBook\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        }, \"Creation and deletion of book cards exceeded time limit\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code BookListPanel}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private ObservableList\u003cBook\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        XmlSerializableBookInventory xmlAddressBook \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableBookInventory.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getBookList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code BookListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code BookListPanel}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private void initUi(ObservableList\u003cBook\u003e backingList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        BookListPanel bookListPanel \u003d new BookListPanel(backingList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        uiPartRule.setUiPart(bookListPanel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(bookListPanel.getRoot(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "-": 95,
      "guiyong96": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // associated web page of a book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "kennethcsj": 1,
      "-": 44,
      "guiyong96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        RequestModel requestModel \u003d new RequestModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Logic logic \u003d new LogicManager(model, requestModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        // assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 1,
      "-": 155,
      "guiyong96": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * A GUI unit test class for BookInventory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.request.RequestModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "                    new ModelManager(), new RequestModelManager()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "-": 82,
      "guiyong96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.commons.events.model.BookInventoryChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final BookInventoryChangedEvent EVENT_STUB \u003d new BookInventoryChangedEvent(new BookInventory());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        // after BookInventory is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 1,
      "-": 73,
      "guiyong96": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 2,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedCard.getQuantity(), actualCard.getQuantity());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedCard.getPrice(), actualCard.getPrice());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedBook}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static void assertCardDisplaysPerson(Book expectedBook, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedBook.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "        assertEquals(expectedBook.getIsbn().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedBook.getPrice().value, actualCard.getPrice());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedBook.getQuantity().getValue(), actualCard.getQuantity());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(expectedBook.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code books} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Book... books) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        for (int i \u003d 0; i \u003c books.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "            assertCardDisplaysPerson(books[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code books} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertListMatching(personListPanelHandle, books.toArray(new Book[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 1,
      "-": 57,
      "guiyong96": 16
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.ALICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.CARL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.HOON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.IDA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class AddCommandSystemTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* ------------------------ Perform add operations on the shown unfiltered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// ----------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: add a book without tags to a non-empty BookInventory, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Book toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + ISBN_DESC_AMY + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + PRICE_DESC_AMY + \"   \" + COST_DESC_AMY + \" \" + QUANTITY_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        model.addBook(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: add a book with all fields same as another book in the BookInventory except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        toAdd \u003d new BookBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + ISBN_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + PRICE_DESC_AMY + COST_DESC_AMY + QUANTITY_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: add a book with all fields same as another book in the BookInventory except phone and email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        toAdd \u003d new BookBuilder(AMY).withIsbn(VALID_ISBN_BOB).withPrice(VALID_PRICE_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d BookUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: add to empty BookInventory -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: add a book with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + ISBN_DESC_BOB + QUANTITY_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + TAG_DESC_HUSBAND + PRICE_DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: add a book, missing tags -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* -------------------------- Perform add operation on the shown filtered list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// ------------------------------ */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: filters the book list before adding -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* ------------------------ Perform add operation while a book card is selected --------------------------- */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: selects first card in the book list, add a book -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* ----------------------------------- Perform invalid add operations"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// --------------------------------------- */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: add a duplicate book -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d BookUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: add a duplicate book except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        toAdd \u003d new BookBuilder(HOON).withIsbn(VALID_ISBN_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d BookUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: add a duplicate book except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        toAdd \u003d new BookBuilder(HOON).withPrice(VALID_PRICE_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d BookUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: add a duplicate book except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        toAdd \u003d new BookBuilder(HOON).withQuantity(VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d BookUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: add a duplicate book except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d BookUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + ISBN_DESC_AMY + PRICE_DESC_AMY + QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PRICE_DESC_AMY + QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ISBN_DESC_AMY + QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ISBN_DESC_AMY + PRICE_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d \"adds \" + BookUtil.getBookDetails(toAdd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + ISBN_DESC_AMY + PRICE_DESC_AMY + QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_ISBN_DESC + PRICE_DESC_AMY + QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ISBN_DESC_AMY + INVALID_PRICE_DESC + QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ISBN_DESC_AMY + PRICE_DESC_AMY + INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, Quantity.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ISBN_DESC_AMY + PRICE_DESC_AMY + QUANTITY_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. {@code InventoryStorage} and {@code BookListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(Book toAdd) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(BookUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(Book)}. Executes {@code command}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * instead."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see AddCommandSystemTest#assertCommandSuccess(Book)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Book toAdd) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedModel.addBook(toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Book)} except asserts that"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. {@code InventoryStorage} and {@code BookListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see AddCommandSystemTest#assertCommandSuccess(String, Book)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. {@code InventoryStorage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 247,
      "guiyong96": 4
    }
  },
  {
    "path": "src/test/java/systemtests/BookInventorySystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": " * A system test class for BookInventory, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "public abstract class BookInventorySystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "    protected BookInventory getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        return TypicalBooks.getTypicalBookInventory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Displays all persons in the BookInventory."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(getModel().getBookInventory().getBookList().size(), getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertTrue(getModel().getFilteredBookList().size() \u003c getModel().getBookInventory().getBookList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Selects the book at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Deletes all persons in the BookInventory."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(0, getModel().getBookInventory().getBookList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same book objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * and the book list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        assertEquals(new BookInventory(expectedModel.getBookInventory()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredBookList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * of the previously selected book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the book in the book list panel at"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the book list panel remain unchanged."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredBookList());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 4,
      "kennethcsj": 3,
      "-": 272,
      "guiyong96": 13
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class ClearCommandSystemTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: clear non-empty BookInventory, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: undo clearing BookInventory -\u003e original BookInventory restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: redo clearing BookInventory -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: selects first card in book list and clears BookInventory -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        executeCommand(UndoCommand.COMMAND_WORD); // restores the original BookInventory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: filters the book list before clearing -\u003e entire BookInventory cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        executeCommand(UndoCommand.COMMAND_WORD); // restores the original BookInventory"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: clear empty BookInventory -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 93,
      "guiyong96": 8
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class DeleteCommandSystemTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* ----------------- Performing delete operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: delete the first book in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Book deletedBook \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: delete the last book in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: undo deleting the last book in the list -\u003e last book restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: redo deleting the last book in the list -\u003e last book deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: delete the middle book in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* ------------------ Performing delete operation while a filtered list is being shown"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// ---------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: filtered book list, delete index within bounds of BookInventory and book list -\u003e deleted */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: filtered book list, delete index within bounds of BookInventory but out of bounds of book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e rejected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        int invalidIndex \u003d getModel().getBookInventory().getBookList().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* --------------------- Performing delete operation while a book card is selected ------------------------ */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: delete the selected book -\u003e book list panel selects the book before the deleted book */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showAllPersons();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        deletedBook \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* --------------------------------- Performing invalid delete operation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// ------------------------------------ */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                getModel().getBookInventory().getBookList().size() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//     * Removes the {@code Book} at the specified {@code index} in {@code model}\u0027s BookInventory."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @return the removed book"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private Book removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Book targetBook \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        model.deleteBook(targetBook);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        return targetBook;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Deletes the book at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Book deletedBook \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// except that the browser url"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * and selected card are expected to update accordingly depending on the card"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 196,
      "guiyong96": 3
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Isbn;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Price;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Quantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class EditCommandSystemTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* ----------------- Performing edit operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// ---------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e edited"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + ISBN_DESC_BOB + \" \" + PRICE_DESC_BOB + \"  \" + QUANTITY_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Book editedBook \u003d new BookBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: undo editing the last book in the list -\u003e last book restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: redo editing the last book in the list -\u003e last book edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        model.updateBook("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                getModel().getFilteredBookList().get(INDEX_FIRST_PERSON.getZeroBased()), editedBook);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as another book\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertTrue(getModel().getBookInventory().getBookList().contains(BOB));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertNotEquals(getModel().getFilteredBookList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_AMY + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        editedBook \u003d new BookBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as another book\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e edited"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_BOB + ISBN_DESC_AMY + PRICE_DESC_AMY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        editedBook \u003d new BookBuilder(BOB).withIsbn(VALID_ISBN_AMY).withPrice(VALID_PRICE_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Book bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        editedBook \u003d new BookBuilder(bookToEdit).withTags().build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* ------------------ Performing edit operation while a filtered list is being shown"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// ------------------------ */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: filtered book list, edit index within bounds of BookInventory and book list -\u003e edited */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        editedBook \u003d new BookBuilder(bookToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: filtered book list, edit index within bounds of BookInventory but out of bounds of book list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e rejected"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        int invalidIndex \u003d getModel().getBookInventory().getBookList().size();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* --------------------- Performing edit operation while a book card is selected -------------------------- */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: selects first card in the book list, edit a book -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * browser url changes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showAllPersons();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        selectPerson(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_AMY + ISBN_DESC_AMY + PRICE_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // browser\u0027s url is updated to reflect the new book\u0027s name"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* --------------------------------- Performing invalid edit operation"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// -------------------------------------- */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        invalidIndex \u003d getModel().getFilteredBookList().size() + 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ISBN_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                Isbn.MESSAGE_ISBN_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PRICE_DESC,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// INDEX_FIRST_PERSON.getOneBased() + INVALID_QUANTITY_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                Quantity.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as another book\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(BookUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertTrue(getModel().getBookInventory().getBookList().contains(BOB));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertFalse(getModel().getFilteredBookList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as another book\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as another book\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as another book\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_BOB + ISBN_DESC_AMY + PRICE_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: edit a book with new values same as another book\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// + NAME_DESC_BOB + ISBN_DESC_BOB + PRICE_DESC_AMY"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                + QUANTITY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Index, Book, Index)} except that"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Book, Index)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Index toEdit, Book editedBook) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, toEdit, editedBook, null);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Asserts that the model related components are updated to reflect the book at index {@code toEdit} being"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * updated to values specified {@code editedBook}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Index toEdit, Book editedBook,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedModel.updateBook(expectedModel.getFilteredBookList().get(toEdit.getZeroBased()), editedBook);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 311,
      "guiyong96": 2
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class ErrorDialogGuiTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 34
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class FindCommandSystemTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find multiple persons in BookInventory, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: repeat previous find command where book list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: find book where book list is not displaying the book we are finding -\u003e 1 book found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find multiple persons in BookInventory, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find multiple persons in BookInventory, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find multiple persons in BookInventory, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find multiple persons in BookInventory, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find same persons in BookInventory after deleting 1 of them -\u003e 1 book found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertFalse(getModel().getBookInventory().getBookList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find book in BookInventory, keyword is same as name but of different case -\u003e 1 book found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find book in BookInventory, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find book in BookInventory, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find book not in BookInventory -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find phone number of book in BookInventory -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getIsbn().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find address of book in BookInventory -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getQuantity().getValue();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find email of book in BookInventory -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPrice().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find tags of book in BookInventory -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: find while a book is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: find book in empty BookInventory -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredBookList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 180,
      "guiyong96": 15
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "///**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "// */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class HelpCommandSystemTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertListMatching(getPersonListPanel(), getModel().getFilteredBookList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 107
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static final Predicate\u003cBook\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cBook\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "        Optional\u003cPredicate\u003cBook\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "        model.updateFilteredBookList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    public static void setFilteredList(Model model, Book... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Book} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "    private static Predicate\u003cBook\u003e getPredicateMatching(Book other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 1,
      "-": 31,
      "guiyong96": 7
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.BookInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class SampleDataTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    protected BookInventory getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Book[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 51
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//public class SelectCommandSystemTest extends BookInventorySystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: select the first card in the book list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: select the last card in the book list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: select the middle card in the book list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: filtered book list, select index within bounds of BookInventory but out of bounds of book list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        int invalidIndex \u003d getModel().getBookInventory().getBookList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: filtered book list, select index within bounds of BookInventory and book list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        invalidIndex \u003d getModel().getFilteredBookList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "//        /* Case: select from empty BookInventory -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code expectedSelectedCardIndex} of the selected book.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. {@code InventoryStorage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 4. {@code InventoryStorage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * {@code BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     * @see BookInventorySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kennethcsj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "kennethcsj": 148,
      "-": 3,
      "guiyong96": 3
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "import seedu.address.model.ReadOnlyBookInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohjunkiat"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyBookInventory\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohjunkiat": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003c?import seedu.quantity.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "guiyong96": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guiyong96"
        },
        "content": "\u003cfx:root type\u003d\"seedu.quantity.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "guiyong96": 1
    }
  }
]
