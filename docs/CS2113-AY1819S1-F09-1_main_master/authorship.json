[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d NUSSU Connect"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-F09-1/main[image:https://travis-ci.org/CS2113-AY1819S1-F09-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/Chocological/main-64rse[image:https://ci.appveyor.com/api/projects/status/rge5q76v8xnskc7p/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-F09-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-F09-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "NUSSU-Connect is an application for executive committee (exco) members of the NUS Student Union (NUSSU) to help them perform their daily tasks including managing recruitment, contacts, budgets and projects efficiently."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* The original source of the code is https://github.com/se-edu/[AddressBook-Level4] project created by SE-EDU initiative."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ladderinc": 4,
      "Chocological": 1,
      "-": 28
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    archiveName \u003d \u0027NUSSU-Connect.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chocological"
        },
        "content": "//allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        \u0027site-name\u0027: \u0027NUSSU Connect\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-F09-1/NUSSU-Connect\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 3,
      "Chocological": 1,
      "-": 243
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::NUSSU-ConnectPNGBanner.png[width\u003d\"680\", align\u003dcenter\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "NUSSU-Connect is an application developed to help NUSSU manage people and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "related functions relating to HR and Finance needs. It is currently a work in progress."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "https://se-edu.github.io/docs/Team.html[F09-1] team. +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d Boon Jun"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::ladderinc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "{empty}[http://github.com/ladderinc[github]]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Role: Scheduling and Tracking, Deliverables and deadlines +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Responsibilities: Search Pruning + Advanced Search and filter feature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Melvin Tan"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::chocological.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "{empty}[http://github.com/Chocological[github]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Role: Integration and Testing +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Responsibilities: Login System"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "\u003d\u003d\u003d Jonathan Ng"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::derpyplops.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "{empty}[http://github.com/derpyplops[github]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Role: Documentation and Team Lead +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Responsibilities: HR \u0026 Roles"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Sanjukta Saha"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::sanjukta99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "{empty}[http://github.com/sanjukta99[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Responsibilities: Budgeting functionality for NUSSU and club treasurers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 14,
      "Chocological": 2,
      "derpyplops": 5,
      "-": 25,
      "sanjukta99": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "﻿\u003d NUSSU Connect - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-1/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "By: `Team F09-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Chocological"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Login system feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chocological"
        },
        "content": "The login mechanism utilizes an existing Java library, `FilteredList`, in order to filter out the relevant"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chocological"
        },
        "content": "account that is associated with an instance of a successful login. An object belonging to the `FilteredList` class, called"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chocological"
        },
        "content": "`filteredLoginDetails`, is instantiated at the start of the application. The `filteredLoginDetails` object initially"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chocological"
        },
        "content": "contains a complete list of all existing accounts stored in `LoginBook`. There is one crucial operation in `FilteredList`,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Chocological"
        },
        "content": "which is often used:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `FilteredList#setPredicate(predicate)` -- Filters the list of accounts in `filteredLoginDetails` according to the"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chocological"
        },
        "content": "predicates determined after the user inputs their login credentials."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Chocological"
        },
        "content": "The operation above is called when the method, `updateFilteredLoginDetailsList(Predicate\u003cLoginDetails\u003e predicate)`, is"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Chocological"
        },
        "content": "called in `ModelManager`. `ModelManager` implements `updateFilteredLoginDetailsList(Predicate\u003cLoginDetails\u003e predicate)` and"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Chocological"
        },
        "content": "`getFilteredLoginDetailsList()` found in the `Model` interface. `getFilteredLoginDetailsList()` is called when the"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Chocological"
        },
        "content": "list of accounts in `LoginBook` is filtered to the extent where only one or no account remains in the list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Given below is an example usage scenario and how the login mechanism behaves at each step. The sequence diagram below"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Chocological"
        },
        "content": "demonstrates the flow of operation and interaction between the `Logic` and `Model` component in the login mechanism."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Specifically, the diagram shows what happens when the user inputs the correct login credentials."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::LoginSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 1. The user launches the application for the first time. The `filteredLoginDetails` object will be initialized with"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Chocological"
        },
        "content": "a list of all the accounts in `LoginBook`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::InitialLoginBookList.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 2. The user executes `login A1234567M zaq1xsw2cde3 member` command in the input box that matches an account in"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Chocological"
        },
        "content": "`LoginBook`. `LogicManager` then calls `ParseCommand(login A1234568M zaq1xsw2cde3 member)` in `AddressBookParser`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::CorrectIdPasswordRole.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 3. `AddressBookParser` instantiates the `LoginUserIdPasswordRoleCommandParser` object and simultaneously calls the `parse(args)` method, returning"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Chocological"
        },
        "content": "an `LoginUserIdPasswordRoleCommand` object with the user input, parsed, to `AddressBookParser` and `LogicManager`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 4. `LogicManager` calls the `execute()` method in `LoginUserIdPasswordRoleCommand`. Next, `LoginUserIdPasswordRoleCommand`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Chocological"
        },
        "content": "calls `updateFilteredLoginDetailsList(updatedIdPredicate)` in `Model` with the computed predicate from user ID field input."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 5. `Model` calls `setPredicate(updatedIdPredicate)` in `FilteredList`, which then filters out accounts whose user Id is a"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Chocological"
        },
        "content": "mismatch with updatedIdPredicate. `filteredLoginDetails` is updated as shown below."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::ParseCorrectLoginDetailList.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 6. `LoginUserIdPasswordRoleCommand` calls `updateFilteredLoginDetailsList(updatedPasswordPredicate)` in `Model` with the"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Chocological"
        },
        "content": "computed predicate from user password field input."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 7. `Model` calls `setPredicate(updatedPasswordPredicate)` in `FilteredList`, which then further filters out accounts"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Chocological"
        },
        "content": "whose password is a mismatch with updatedPasswordPredicate. `filteredLoginDetails` is further updated as shown below."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::ParseCorrectLoginDetailList.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 8. `LoginUserIdPasswordRoleCommand` calls `updateFilteredLoginDetailsList(updatedRolePredicate)` in `Model` with the"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Chocological"
        },
        "content": "computed predicate from user role field input."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Step 9. `Model` calls `setPredicate(updatedRolePredicate)` in `FilteredList`, which then further filters out accounts"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Chocological"
        },
        "content": "whose role is a mismatch with updatedRolePredicate. `filteredLoginDetails` is further updated as shown below."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::ParseCorrectLoginDetailList.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Chocological"
        },
        "content": "In step 2, if the user executes `login A1234566M zaq1xsw2cde janitor` command instead, the application will continue with steps"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Chocological"
        },
        "content": "2 to 7, but instead of one account remaining at the end of the filtering process, there will be no account in the updated"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Chocological"
        },
        "content": "list as shown in the image below."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::WrongIdPasswordRole.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::WrongIdOrPasswordOrRoleList.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Chocological"
        },
        "content": "In all cases where the user inputs either the wrong ID, password, role, any combination of two or all three, there will"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Chocological"
        },
        "content": "be no account left in the account list when `getFilteredLoginDetailsList` method in `Model` is called. The"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Chocological"
        },
        "content": "`isLoginSuccessful` boolean in `LoginManager` will be set to false via the setter method, `setIsLoginSuccessful`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Chocological"
        },
        "content": "in `LoginManager`. This is done by the `checkUpdatedAccountListSetLoginCondition` method in `LoginUserIdPasswordRoleCommand`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Chocological"
        },
        "content": "The `initializeLoginProcess` method in `MainWindow` will be called repeatedly until `isLoginSuccessful` is set to true."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Chocological"
        },
        "content": "The sequence diagram below shows the high level workflow of the login mechanism."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::RepeatLoginSequenceDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Chocological"
        },
        "content": "The activity diagram below shows the overall picture of how the login mechanism works."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::LoginActivityDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::LoginExtendedActivityDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How login data is stored"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* **Alternative 1 (current choice):** Saves login credentials in loginbook.xml in XML format."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Pros: Easier to read, and versioning is possible."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Cons: XML data file takes up more storage space."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* **Alternative 2:** Saves login credentials using JSON."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Pros: Does not take up a lot of space."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Cons: Harder to read."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Chocological"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "//tag::budget[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Budgeting Feature"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "This feature has been implemented through 3 separate commands, each dealing with a separate stage in the calculation and"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "subsequent allocation of budgets by the NUSSU Executive Committee to all the clubs that submit the data required to"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "calculate the budget. The three commands are: `budget` - which handles the submission of data by the club treasurer required to calculate the"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "calculate the budget for that club, `calculatebudget` - which is to be used only by the NUSSU Executive Committee members"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "in order to calculate the budgets for each club and `viewbudget` - which lists the final budgets of all the clubs."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d Submission of Data"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Given below is an example usage scenario and the behaviour at each step of the `budget` command."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Step 1. The user launches the application for the first time. \u0027filteredClubBudgets\u0027 will be initialised with an empty list"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "of all the club budgets in the address book."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Step 2. The user (a club\u0027s treasurer) executes `budget c/Computing Club t/200 e/5` command in order to"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "submit the data for the calculation of her club\u0027s budget. The \u0027LogicManager\u0027 then calls the \u0027parseCommand\u0027 in the"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u0027AddressBookParser\u0027."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::BudgetCommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Step 3. The \u0027AddressBookParser\u0027 then returns a new \u0027BudgetCommandParser\u0027, which then parses the command to be executed and"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "creates a \u0027ClubBudgetElements\u0027 object called \u0027club\u0027 with the club\u0027s name, the expected turnout and the number of events."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Finally the \u0027BudgetCommand\u0027 is called with \u0027club\u0027 as the parameter."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Step 4. The \u0027BudgetCommand\u0027 checks whether the \u0027club\u0027 is a duplicate and it is not, the \u0027BudgetCommand\u0027 calls the \u0027addClub\u0027"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "command in \u0027Model\u0027 with \u0027club\u0027 as the parameter."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Step 5. \u0027Model\u0027 calls \u0027addClub\u0027 in \u0027ReadOnlyAddressBook\u0027 and indicates that the address book\u0027s status has changed."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Step 6. \u0027ReadOnlyAddressBook\u0027 calls the \u0027addClubBudget\u0027 command on an object \u0027clubs\u0027 of the \u0027UniqueClubsList\u0027 class, thus"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "adding the required club\u0027s data to the address book."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Step 7. Finally a success message is displayed with the details that have been entered by the user."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::ExecuteBudgetCommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "In Step 4, had the user entered a club name that already existed in the list of clubs in the address book, then a duplicate"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "message would be shown, prompting the user to edit their entered command and try again. Execution of subsequent steps would be stopped until the"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "user entered a unique club name"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::DuplicateBudget.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The image below is the sequence diagram for the functioning of the `budget` command:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::BudgetCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "//end::budget[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d Search Pruning Feature"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "The Search Pruning mechanism is facilitated by the `SearchHistoryManager`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Within `SearchHistoryManager` is `searchHistoryStack`, storing `Predicate` objects."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "The `Predicate` objects are used to filter `filteredListPerson` in ModelManager."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "A main `SearchHistoryManager` object named `searchHistoryManager` is stored within `ModelManager` and you could access `searchHistoryManager` by calling the"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "getter method `getSearchHistoryManager()`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "IMPORTANT: `searchHistoryManger` is only meant for the filtering of"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "`Person` objects and Predicates irrelevant to the filtering of `Person` objects could not be stored in it."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "If you want to utilize `SearchHistoryManager` for your own use case, you can initialize a new SearchHistoryManager object"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "by calling its default constructor."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "The main implementation behind SearchHistoryManager is a Stack Data Structure and the following 3 methods of `SearchHistoryManager` are exposed for your usage +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* `executeNewSearch(Predicate\u003cT\u003e predicate)` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "updates system search logic to the next state and returns a `Predicate` object storing the system search logic after the update."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* `revertLastSearch()` +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "reverts system search logic to the previous state and returns a `Predicate` object storing"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                       the system search logic after revert."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* `clearSearchHistory()` +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "clears all system search logic from in-app memory. +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Given below are illustrations to help you understand how each method works internally"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " In the diagrams, UP is the short-form for User Predicate and SP is the short-form for System Predicate."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " . User Predicate stores the logic specified by the user. This will not be used directly to filter the"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "   list."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " . System Predicate stores the search logic for the system which will be used to filter the list."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "NOTE: User Predicate and System Predicate are not actual Classes, they are simply there to help simplify the explanation."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "In the actual implementation, there is no way to differentiate one Predicate from the other"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "`executeNewSearch(Predicate\u003cT\u003e predicate)` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Upon calling this method, there will be two different situations +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* Situation 1: `searchHistoryStack` is empty +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Upon receiving a new User Predicate, SearchHistoryManager will simply push the new Predicate into `searchHistoryStack`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "as a System Predicate which will be used to filter the list."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::executeNewSearchEmptyStack.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* Situation 2: `searchHistoryStack` is not empty +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Before pushing the new `Predicate` into the stack, `SearchHistoryManager` will first retrieve the System Predicate object at the top of the stack."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "After retrieving it, it will call the `and()` method with the User Predicate, creating a new System Predicate which will then be pushed into the top"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "of the stack."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::executeNewSearchNonEmptyStack.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "`revertLastSearch()` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "This method will pop the System Predicate at the top of the stack. +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "In the event that the stack is already empty, this method will throw `EmptyStackException`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::undoSearchHistoryStack.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "`clearSearchHistory()` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "This method will simply empty the stack."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::clearSearchHistoryStack.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "The following sequence diagrams shows you how `find` and `undosearch` commands utilize `SearchHistoryManager` to perform Search Pruning."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " - `find` command +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::SearchPruningSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " - `undosearch` command +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::undoSearchSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Aspect: What data is stored in search history stack +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* **Alternative 1(current choice):**  Save a Stack of Predicates"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    . Does not need to store the data in search history explicitly which saves memory +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    . Any form of Search Pruning done with Predicates can reuse `SearchHistoryManager` class +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ". Need to understand how `Predicate` works before utilizing this Class."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ". `Predicate` objects by itself does not perform the Search Pruning. In NUSSU Connect, we have to pass the `Predicate`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "   into a `FilteredList\u003cT\u003e` object to do the Search Pruning."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* ** Alternative 2: ** Save a Stack of Lists containing Person objects in search history"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    . It is easy to understand that we are filtering according to Person objects from `SearchHistoryManager` class"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    . More memory is required as Person objects has to be duplicated multiple times into a new List."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    . Class is inextensible to store other objects other than those from a Person classes."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "\u003d\u003d\u003d Add Skill Level Command"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "The add skill mechanism builds on the `addressBookParser`. This as well"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "as it\u0027s subclass `addSkillCommandParser` ensures that the correct number of arguments"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "is given to the command."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "The following shows how the application handles the request to change a skill in one particular scenario."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Step 1. The user launches the application. The application boots up and lists all members."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Step 2. The user locates the person he wants to add on at Index 4. They execute the `asl 4 s/Photography l/60` command."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Step 3.\u0027LogicManager\u0027 calls the \u0027parseCommand\u0027 in the \u0027AddressBookParser\u0027, which calls `AddSkillCommandParser` to"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "parse it."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Step 4. After parsing, the command is sent to the `Model` which alters the `Person` object by modifying their"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "`Skill` and `SkillLevel` properties."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Step 5. The result is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Before executing the command:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "image::aslbefore.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "After executing the command:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "image::aslafter.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "\u003d\u003d\u003d\u003d Alternate implementations"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "We considered two different ways to implement the Skill Class."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "* **Alternative 1**: Combining both Skill and SkillLevel properties together into a single class."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "** Pros: Resembles the real world, as there is a one-to-one mapping of Skill to SkillLevel."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "** Cons: Harder to test, and violates Single Responsiblity Principle."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "* **Alternative 2 (Current Choice)**: Separating the Skill and SkillLevel classes into different classes."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "** Pros: Easier to test."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "** Cons: Adds to the number of classes unnecessarily."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "\u003d\u003d\u003d\u003d Possible extensions"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "* One possiblilty is to enhance the add command such that skills can be added together with the rest of the"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "information during addition of personal information."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "* Another is to enhance the edit command, possibly depreciating the use of the add skill level command."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "* Another is to enhance the storage such that multiple skills can be added per person."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |executive officer of NUSSU |view which other committees my applicant has applied for |deconflict with the other members of the Executive Committee"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |executive officer of NUSSU |view the number of applicants with the relevant skills |assign them to the relevant subcommittees"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |member of NUSSU |find out how to contact another member within NUSSU |work more efficiently with them"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |someone that takes charge of sponsors for events hosted by NUSSU |filter my search such that I would be only looking at the list of sponsors |not need to look through the whole list of contact details"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |event organizer that is trying to find the contact details of some very specific group of people |have a search and filter function that is flexible enough |find all the search requirements can be done on the application without needing me to look through the whole list"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |any user trying to filter the list of contact details|have an intuitive way to filter a large list of people|so that I can get the information that I want easily and quickly"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |forgetful user utilizing the newly implemented search pruning feature|keep track of my past search commands|so that I would not need to commit what I typed to memory"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |member of the NUSSU treasury |have a budgeting function |fairly allocate budgets to the different clubs/projects"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |treasurer of a club |view the budget allocated to our club |discuss with my teammates and seek more funds if necessary"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |treasurer of a club |be able to store the data about how many members there are in my club, how many events we are planning to hold, and the expected turn out |be allocated a fair budget by the NUSSU treasury"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |treasurer of a club |use a budgeting function |plan the internal events of my club efficiently"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* * *` |member of the NUSSU treasury |view requests for grants from the clubs |allocate them the grant if the request is accepted by the NUSSU"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|`* * *` |executive member of NUSSU |log into the application |gain secure access to the application"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|`* * *` |executive member of NUSSU |create a new account for the application with my relevant role |gain access to certain features of the application relevant to my role when I log in using the created account details"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|`* * *` |executive member of NUSSU |log into the application specific to my role |gain access to certain features of the application relevant to my role when I log in"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* *` |general secretary of NUSSU |have the option to backup all, or even specific segments of application data into a data file |recover the required segments of data when there is an accidental deletion of data"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "**Others** +"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "**Must haves**"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an executive officer of NUSSU, I would like to view which other committees my applicant has applied for so that I deconflict with the other members of the Executive Committee."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an executive officer of NUSSU, I can log into the app with the required credentials, so that I can access certain functionalities of the app exclusive to my credentials only."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an executive member of NUSSU, I can create a new account for myself to log into the app, so that I can access the functionalities of the app."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As a member of NUSSU, I would like to find out how to contact another member within NUSSU so that I can work more efficiently with them."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As someone that is looking for the contact information of someone in else in a committee, I would like to filter my search such that I would only be looking through the lists of that specific committee so that I will not need to look through the whole list of NUSSU members."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As someone that takes charge of sponsors for events hosted by NUSSU, I would like to filter my search such that I would be only looking at the list of sponsors so that I will not need to look through the whole list of addressbook."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the organizer of events, I would like to keep track of the contact information for all the helpers for that event so that I can keep them updated on the progress of the events."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an organizer of an event, I would like to remove all users that helped with the event from my contact list so that the address book will be less cluttered."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As a member of the NUSSU treasury I would like to have a budgeting function so that I can fairly allocate budgets to the different clubs/projects"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the treasurer of a club I would like to view the budget allocated to our club so I can discuss with my teammates and seek more funds if necessary."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the treasurer of a club I would like to be able to store the data about how many members there are in my club, how many events we are planning to hold, and the expected turn out so that we can be allocated a fair budget by the NUSSU treasury."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the treasurer of a club I would like to use a budgeting function so that I can plan the internal events of my club efficiently."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As a member of the NUSSU treasury I would like to view requests for grants from the clubs so that I can allocate them the grant if the request is accepted by the NUSSU."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an event organizer that is trying to find the contact details of some very specific group of people, I would like to have a search and filter function that is flexible enough so that all the search requirements can be done on the application without needing me to look through the whole list."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "**Nice to have**"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the general secretary of NUSSU, I would like to have the option to backup all, or even specific segments of application data into a data file, so that in the event where accidental deletion or corruption of data occurs, I can recover the required segments of data."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the general secretary of NUSSU, I would like to view a list of dates reserved for committee meetings planned beforehand, so that i can prepare for the meetings adequately."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an executive member of NUSSU, I can pitch in proposal ideas into the proposal suggestions section through the community proposal voting system, so that I can find out just how popular my proposals are through the number of upvotes it receives."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an executive member of NUSSU, I can edit current proposal ideas in the proposals section, so that i can have the option to refine current proposals."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As an executive member of NUSSU, I can delete selected proposal ideas in the proposals section, so that i can have the option to remove irrelevant proposals."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As a student in the student union of NUSSU, I want to view the list of proposals currently suggested in the proposals section and upvote those that I like, so that I can find out more about the current proposals in place and express my favor in a particular proposal."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As a student in the student union of NUSSU, I would like to be able to filter and search for proposal ideas based on keywords, so that I do not have to waste time searching through all the proposals just to find the one I want."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the student welfare secretary of NUSSU, I would like to view statistics showing the number of students who signed up for student welfare packs, so that logistically wise, I can plan student welfare goodie events better."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the general secretary of NUSSU, I would like to keep track of a register containing details of all members serving in the union."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As the student life secretary of NUSSU, I would like to keep track of updated statistics showing the number of students in each faculty, so that i can plan and balance the events geared towards a specific faculty, logistically and relevancy wise."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As someone that keeps track of the finances for hosting events, I would like an application that helps me simplify the process(Excel) so that I can do my work efficiently."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As someone that records what was discussed in a meeting, I would like to be able to keep a record of what everyone said, so that we can use it as a future reference for further discussion."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "As someone that constantly sends email to other members of NUSSU/ Sponsors/ Public, I would like to have an access to multiple different templates of emails so that I can focus more on writing the content of the email instead of spending too much time on crafting the overall structure."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Use case: Sort by suitability by skill"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Chocological"
        },
        "content": "1.  User indicates he wants to sort by skills"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Chocological"
        },
        "content": "2.  NUSSU-Connect lists available skills, asks the user what he wants to sort by."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Chocological"
        },
        "content": "3.  User indicates what he wants by selecting"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Chocological"
        },
        "content": "4.  NUSSU-Connect all skills."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* 2a. User can sort by ascending or descending order"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* 2b. User can see all above a certain threshold"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Use case: Add Skill"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Chocological"
        },
        "content": "1.  User indicates he wants to add skill"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Chocological"
        },
        "content": "2.  NUSSU-Connect lists available persons"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Chocological"
        },
        "content": "3.  User indicates person, skill, and skill level to add"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Chocological"
        },
        "content": "4.  NUSSU-Connect confirms addition"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d Use case: Intuitive Filtering of Large Number of Contacts"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "System: NUSSU Connect Application +"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Actor: Typical NUSSU member +"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "1.  User requests application to display list of contacts"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "2.  System returns list of contacts"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "3.  User requests to find a specific group of people from list of contacts"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "4.  System returns new List of Contacts filtered according to previous List +"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Steps 3 - 4 are repeated until user found the desired group of people"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "5. User found the group of people that he/she is looking for"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* 4a. User makes an error and request to revert to previous List"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "** 4a1. System reverts and displays the previous List"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Use case resumes at Step 3."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* 3b. User request to revert List to initial state before filtering"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "** 3b1. System reverts List to initial state."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d Use case: Excluding specific people from Search List"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "System: NUSSU Connect Application +"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Actor: Typical NUSSU member +"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "1.  User requests application to display list of contacts"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "2.  System returns list of contacts"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "3.  User requests to exclude a specific group of people from list of contacts"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "4.  System returns new List of contacts according to the criteria set by the user +"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d Use case: Enforced criteria in Search List"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "System: NUSSU Connect Application +"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Actor: Typical NUSSU member +"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "1.  User requests application to display list of contacts"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "2.  System returns list of contacts"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "3.  User requests System to display a list of users that MUST follow a certain criteria"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "4.  System returns new List of contacts according to the criteria set by the user +"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Use case: Log into system"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Chocological"
        },
        "content": "1.  NUSSU-Connect prompts user to login first by entering login credentials"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Chocological"
        },
        "content": "2.  User types in login credentials along with the login command"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Chocological"
        },
        "content": "3.  NUSSU-Connect queries against login book and authorizes the user full access to NUSSU-Connect"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* 2a. User types in wrong password or user ID"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** 2a1. NUSSU-Connect continues to prompt user for login credentials before giving access to user"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Use case: Create new user accounts"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Chocological"
        },
        "content": "1.  User types in command to create a new account with chosen user ID and password"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Chocological"
        },
        "content": "2.  NUSSU prompts user to type in master password for creation of new account"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Chocological"
        },
        "content": "3.  User types in the correct master password"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Chocological"
        },
        "content": "4.  NUSSU-Connect creates new account with chosen login details, and shows successful execution message"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* 1a. User creates a new account with a user ID which already exists"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** 1a1. NUSSU-Connect shows error message to user and does not create a new account"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* 3a. User types in the wrong master password"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** 3a1. NUSSU-Connect shows error message to user and and does not create a new account"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Chocological"
        },
        "content": "+"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Chocological"
        },
        "content": ".  Must be able to accommodate the contact details of everyone in NUSSU + 1000 extra contact details."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "Chocological"
        },
        "content": ".  All exco members of NUSSU should be able to create an account."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Chocological"
        },
        "content": ".  Passwords must be salted and hashed with md5."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "Chocological"
        },
        "content": ".  All commands must be completed within 1 second."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "Chocological"
        },
        "content": ".  The single and multi-input commands phrases should be easy to remember and intuitive to understand what they mean."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 189,
      "Chocological": 211,
      "derpyplops": 52,
      "-": 972,
      "sanjukta99": 52
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "derpyplops": 1,
      "-": 266
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "﻿\u003d NUSSU Connect - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "By: `Team F09-1`      Since: `Sept 2018`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "NUSSU-Connect is an application for executive committee (exco) members of the NUS Student Union (NUSSU) to help them perform their daily tasks including managing recruitment, contacts, budgets and projects efficiently."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Logging into system: `login`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Logs into application using relevant credentials. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Format: `login USERID PASSWORD ROLE`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "****"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* PASSWORD refers to the password associated with the existing account"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* ROLE refers to the role in NUSSU associated with the existing account"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must be at least 1 space between USERID and PASSWORD, and between PASSWORD and ROLE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must be at least 1 space between `login` keyword and USERID"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* The 3 parameters, USERID, PASSWORD and ROLE must be present in user input during the login process"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must not be any additional unnecessary parameters in user input during the login process"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must not be any spaces in USERID, PASSWORD and ROLE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "****"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `login X1234567X zaq1xsw2cde3 member` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Logs into Address book with user ID as X1234567X, password as zaq1xsw2cde3 and role as member."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::CorrectIdPasswordRole.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::LoginSuccessMessage.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Password is case-sensitive!"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new user account: `createaccount`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Creates a new user account in the address book. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Format: `createaccount USERID PASSWORD ROLE`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* PASSWORD refers to any desired passphrases the new user wishes to have"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* ROLE refers to the role in NUSSU associated with the existing account"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can only be upper-case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* USERID must not belong to an existing account"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* ROLE can only contain lower-case letter alphabets, and be only either `member`, `president` or `treasurer`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must be at least 1 space between USERID and PASSWORD, and between PASSWORD and ROLE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must be at least 1 space between `login` keyword and USERID"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* The 3 parameters, USERID, PASSWORD and ROLE must be present in user input during the account creation process"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must not be any additional unnecessary parameters in user input during the account creation process"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* There must not be any spaces in USERID, PASSWORD and ROLE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `createaccount X1234567X aq1xsw2cde3 member` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Creates a new account with user ID as X1234567X, password as zaq1xsw2cde3 and role as member in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chocological"
        },
        "content": "image::CreateAccountSuccess.PNG[width\u003d\"300\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "\u003d\u003d\u003d Adding person\u0027s skill: `asl`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Edits a person\u0027s skill in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Format: `asl INDEX s/SKILL l/SKILL_LEVEL`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "* `asl 2 s/Photography l/30`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "* `asl 4 s/Java l/40`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Locating persons: `find`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Finds persons in the displayed list whose names/tags contain any of the given keywords. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Format: `find [\\tag] [\\exclude] KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* For back-to-back find commands, the most recent find command will search according to the previous find command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* The `\\exclude` option will exclude any names/tags with the specified keywords"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* `find \\exclude Tom` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Returns any person without the name `Tom`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `find \\tag President` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Returns any person with the tag `President`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `find \\tag President Vice_President` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Returns any person with the tag `President` OR `Vice_President`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* `find \\tag \\exclude President` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Returns any person without the tag `President`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "**Search Pruning feature with find commands:**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "With the introduction of v1.1, NUSSU Connect now includes a Search Pruning feature that helps you"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "trim the list of contacts with every successive find command. This lets you search through the list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "of contacts in a much more intuitive manner without the hassle of typing a long single line command that is"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "usually error-prone."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "The concept of the Search Pruning feature will be further illustrated below."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "*Assume that the original list of contacts contains the following 3 persons.*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::InitialList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "*After executing the command `find \\tag VIP`* +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "*the displayed list will now contain 2 persons, both with the tag \u0027VIP\u0027*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::SecondList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "*Executing another command `find \\tag President`* +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "*will filter according to the previous displayed list instead of the original list* +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "*The displayed list now contains only 1 person with the tag \u0027President\u0027* +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "image::ThirdList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "****"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "\u003d\u003d\u003d Undoing Search Commands: `undosearch`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Restores the displayed list to the state before you perform your most recent find command +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Format: `undosearch`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "****"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* To be used together with Search Pruning feature"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Deleting : `delete`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Deletes a specific person from the address book. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Format: `delete [-a all] [INDEX]`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* If -a option is selected, all contacts on the list will be deleted and INDEX will be ignored."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chocological"
        },
        "content": "`delete -a` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Deletes everyone in the results of the `find` command."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting data for budget allocation: `budget`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Submits the data about number of events, expected turnout etc. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `budget c/CLUB NAME t/TURNOUT e/NUMBER OF EVENTS`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`budget c/Computing Club t/200 e/5`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Calculating the budgets : `calculatebudget`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Calculates the budgets for all the clubs in the address book using the total available budget"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `calculatebudget b/TOTAL AVAILABLE BUDGET IN SGD`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`calculatebudget b/50000`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Viewing the allocated budget : `viewbudget`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows all the allocated budgets to the user +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewbudget`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Submitting grant request : `request`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Submits data about amount of grant needed, the reason and tags the importance level"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `request m/AMOUNT r/REASON t/IMPORTANCE LEVEL`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "`request m/1000 r/for booking auditorium t/medium` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Viewing grant request : `viewrequest`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Shows a list of all the grant request sorted by order of importance, and if there is a tie, by descending order of amount requested. +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewrequest`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d Accepting grant request: `accept`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Approves a specific grant request from the list of grants."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `accept [-a all] [INDEX]`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Chocological"
        },
        "content": "****"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* Approves the request at the specified `INDEX`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* The index refers to the index number shown in the displayed requests list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* If -a option is selected, all requests on the list will be approved and INDEX will be ignored."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Chocological"
        },
        "content": "****"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Chocological"
        },
        "content": "`accept 2` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Approves the 2nd request in the list of grant requests."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Chocological"
        },
        "content": "`accept -a` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Approves all the requests in the list."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* *Login* : `login USERID PASSWORD ROLE`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Chocological"
        },
        "content": "e.g. `login A1234567M zaq1xsw2cde3 member`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* *Create Account* : `createaccount USERID PASSWORD ROLE` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Chocological"
        },
        "content": "e.g. `createaccount A1234567M zaq1xsw2cde3 member`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* *Delete* : `delete [-a all][INDEX]` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "* *Find* : `find [\\tag] [\\exclude] KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Chocological"
        },
        "content": "e.g. `find James Jake` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Chocological"
        },
        "content": "e.g `find \\tag President`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting data for budget* : `budget c/CLUB NAME t/TURNOUT e/NUMBER OF EVENTS` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `budget c/Computing Club t/200 e/5`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Calculating budgets* : `calculatebudget b/TOTAL AVAILABLE BUDGET IN SGD` +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `calculatebudget b/50000`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Viewing all the budgets* : `viewbudget`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting grant request* : request m/AMOUNT r/REASON t/IMPORTANCE LEVEL` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Viewing grant request* : `viewrequest`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Accepting a grant request* : `accept [-a all] [INDEX]` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "       `accept 2` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     `accept -a`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ladderinc": 59,
      "Chocological": 84,
      "derpyplops": 12,
      "-": 267,
      "sanjukta99": 28
    }
  },
  {
    "path": "docs/UserGuide_BACKUP_13948.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "﻿\u003d NUSSU Connect - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "By: `Team F09-1`      Since: `Sept 2018`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "NUSSU-Connect is an application for executive committee (exco) members of the NUS Student Union (NUSSU) to help them perform their daily tasks including managing recruitment, contacts, budgets and projects efficiently."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Logging into system: `login`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into application using relevant credentials. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `login USERID PASSWORD`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to the password associated with the existing account"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `login X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into Address book with user ID as X1234567X and password as zaq1xsw2cde3."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Password is case-sensitive!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Creating a new user account: `createaccount`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new user account in the address book. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `createaccount user/USERID pass/PASSWORD`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* user/ and pass/ are required prefixes before USERID and PASSWORD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to any desired passphrases the new user wishes to have"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must not belong to an existing account"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `createaccount user/X1234567X pass/zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting an existing user account: `deleteaccount`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes an existing account from the address book. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `deleteaccount USERID PASSWORD`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `deleteaccount X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the current account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Changing the password of an existing user account: `changepassword`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of an existing account from the address book. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `changepassword USERID CURRENTPASSWORD NEWPASSWORD`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* CURRENTPASSWORD refers to current passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* NEWPASSWORD must be different from CURRENTPASSWORD"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `changepassword X1234567X zaq1xsw2cde3 1qaz2wsx3edc` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of the current account with user ID as X1234567X, from \"zaq1xsw2cde3\" to \"1qaz2wsx3edc\" in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Locating persons: `find`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Finds persons in the displayed list whose names/tags contain any of the given keywords. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `find [\\tag tags]  KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* For back-to-back find commands, the most recent find command will search according to the previous find command"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President Vice_President` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President` OR `Vice_President`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "**Executing back-to-back find commands:**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Assume that the displayed list contains 3 person initially."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::InitialList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag VIP\" +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 2 person, both with the tag \u0027VIP\u0027"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::SecondList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag President\" +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "it will filter according to the previous displayed list +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 1 person, with the tag \u0027President\u0027 +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::ThirdList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Resetting Search History: `clearsearch`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Resets search history back to the very initial stage before any find commands are executed +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clearsearch`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* To be used together with the find command"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting : `delete`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes a specific person from the address book. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `delete [-a all] [INDEX]`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all contacts on the list will be deleted and INDEX will be ignored."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete -a` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes everyone in the results of the `find` command."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting data for budget allocation: `budget`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits the data about number of events, expected turnout etc. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `budget c/CLUB NAME t/TURNOUT e/NUMBER OF EVENTS`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`budget c/Computing Club t/200 e/5`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting data for budget allocation: `data`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits the data about number of events, expected turnout etc. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `data e/NUMBER OF EVENTS t/TURNOUT`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`data e/5 t/200` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e cf7a3827e267177ab295da9ebeb181586aa9c55f"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing the allocated budget : `viewbudget`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows the allocated budget to the user +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewbudget` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting grant request : `request`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits data about amount of grant needed, the reason and tags the importance level"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `request m/AMOUNT r/REASON t/IMPORTANCE LEVEL`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `request m/AMOUNT r/REASON t/IMPORTANCE LEVEL"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e cf7a3827e267177ab295da9ebeb181586aa9c55f"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`request m/1000 r/for booking auditorium t/medium` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing grant request : `viewrequest`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all the grant request sorted by order of importance, and if there is a tie, by descending order of amount requested. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewrequest` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Accepting grant request: `accept`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves a specific grant request from the list of grants."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `accept [-a all] [INDEX]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `accept [-a all] [INDEX] +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e cf7a3827e267177ab295da9ebeb181586aa9c55f"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Approves the request at the specified `INDEX`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed requests list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all requests on the list will be approved and INDEX will be ignored."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept 2` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves the 2nd request in the list of grant requests."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept -a` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves all the requests in the list."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Login* : `login USERID PASSWORD`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `login A1234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Create Account* : `createaccount USERID PASSWORD` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `createaccount user/A1234567M pass/zaq1xsw2cde3`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete Account* : `deleteaccount USERID PASSWORD` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `deleteaccount A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Change Password* : `changepassword USERID CURRENTPASSWORD NEWPASSWORD` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `changepassword A01234567M zaq1xsw2cde3 1qaz2wsx3edc`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete* : `delete [-a all][INDEX]` +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Find* : `find [\\tag tags] KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `find James Jake` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g `find \\tag President`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting data for budget* : `budget c/CLUB NAME t/TURNOUT e/NUMBER OF EVENTS` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `budget c/Computing Club t/200 e/5`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting grant request* : request m/AMOUNT r/REASON t/IMPORTANCE LEVEL` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Viewing grant request* : `viewrequest`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Accepting a grant request* : `accept [-a all] [INDEX]` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "       `accept 2` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     `accept -a`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 448
    }
  },
  {
    "path": "docs/UserGuide_BASE_13948.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "﻿\u003d NUSSU Connect - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "By: `Team F09-1`  \tSince: `Sept 2018`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "NUSSU Connect is for the executive committee members of NUSSU who are comfortable with working with Command Line Interface (CLI). It is meant for fast typers within NUSSU and it could help them perform their daily tasks such as managing recruitment, contacts, budgets and projects much more efficiently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Logging into system: `login`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into application using relevant credentials. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `X1234567X` for user ID fields, where X can be any lower or upper case letter alphabet"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `login` +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into Address book with user ID as X1234567X and password as zaq1xsw2cde3."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Password is case-sensitive!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Creating a new user account: `create account`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new user account in the address book. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `user/USERID pass/PASSWORD`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* user/ and pass/ are required prefixes before USERID and PASSWORD"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to any desired passphrases the new user wishes to have"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must not belong to an existing account"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `create account` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`user/X1234567X pass/zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting an existing user account: `delete account`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes an existing account from the address book. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `USERID PASSWORD`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete account` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the current account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Changing the password of an existing user account: `change password`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of an existing account from the address book. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `USERID CURRENTPASSWORD NEWPASSWORD`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* CURRENTPASSWORD refers to current passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* NEWPASSWORD must be different from CURRENTPASSWORD"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `change password` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`X1234567X zaq1xsw2cde3 1qaz2wsx3edc` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of the current account with user ID as X1234567X, from \"zaq1xsw2cde3\" to \"1qaz2wsx3edc\" in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Locating persons: `find`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Finds persons in the displayed list whose names/tags contain any of the given keywords. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `find [\\tag tags]  KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* For back-to-back find commands, the most recent find command will search according to the previous find command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President Vice_President` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President` OR `Vice_President`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "**Executing back-to-back find commands:**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Assume that the displayed list contains 3 person initially."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::InitialList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag VIP\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 2 person, both with the tag \u0027VIP\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::SecondList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag President\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "it will filter according to the previous displayed list +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 1 person, with the tag \u0027President\u0027 +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::ThirdList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Resetting Search History: `clearsearch`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Resets search history back to the very initial stage before any find commands are executed"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clearsearch`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* To be used together with the find command"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting : `delete`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes a specific person from the address book. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `delete [-a all] [INDEX]`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all contacts on the list will be deleted and INDEX will be ignored."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete -a` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes everyone in the results of the `find` command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting data for budget allocation: `data`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits the data about number of events, expected turnout etc. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `data e/NUMBER OF EVENTS t/TURNOUT`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`data e/5 t/200`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing the allocated budget : `viewbudget`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows the allocated budget to the user +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewbudget`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting grant request : `request`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits data about amount of grant needed, the reason and tags the importance level"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `request m/AMOUNT r/REASON t/IMPORTANCE LEVEL"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing grant request : `viewrequest`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all the grant request sorted by order of importance, and if there is a tie, by descending order of amount requested. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewrequest`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Accepting grant request: `accept`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves a specific grant request from the list of grants."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `accept [-a all] [INDEX]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Approves the request at the specified `INDEX`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed requests list."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all requests on the list will be approved and INDEX will be ignored."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept 2` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves the 2nd request in the list of grant requests."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept -a` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves all the requests in the list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Login* : `USERID PASSWORD`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `login` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Create Account* : `USERID PASSWORD` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `create account` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete Account* : `USERID PASSWORD` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `delete account` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Change Password* : `USERID CURRENTPASSWORD NEWPASSWORD` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `change password` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3 1qaz2wsx3edc`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete* : `delete [-a all][INDEX]` +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Find* : `find [\\tag tags] KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `find James Jake` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g `find \\tag President`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting data for budget* : `data e/NUMBER OF EVENTS t/TURNOUT` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `data e/5 t/200`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting grant request* : request m/AMOUNT r/REASON t/IMPORTANCE LEVEL` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Viewing grant request* : `viewrequest`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Accepting a grant request* : `accept [-a all] [INDEX]` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "       `accept 2` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     `accept -a`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 435
    }
  },
  {
    "path": "docs/UserGuide_LOCAL_13948.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "﻿\u003d NUSSU Connect - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "By: `Team F09-1`  \tSince: `Sept 2018`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "NUSSU Connect is for the executive committee members of NUSSU who are comfortable with working with Command Line Interface (CLI). It is meant for fast typers within NUSSU and it could help them perform their daily tasks such as managing recruitment, contacts, budgets and projects much more efficiently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Logging into system: `login`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into application using relevant credentials. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `X1234567X` for user ID fields, where X can be any lower or upper case letter alphabet"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `login` +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into Address book with user ID as X1234567X and password as zaq1xsw2cde3."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Password is case-sensitive!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Creating a new user account: `create account`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new user account in the address book. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `user/USERID pass/PASSWORD`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* user/ and pass/ are required prefixes before USERID and PASSWORD"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to any desired passphrases the new user wishes to have"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must not belong to an existing account"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `create account` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`user/X1234567X pass/zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting an existing user account: `delete account`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes an existing account from the address book. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `USERID PASSWORD`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete account` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the current account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Changing the password of an existing user account: `change password`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of an existing account from the address book. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `USERID CURRENTPASSWORD NEWPASSWORD`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* CURRENTPASSWORD refers to current passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* NEWPASSWORD must be different from CURRENTPASSWORD"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `change password` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`X1234567X zaq1xsw2cde3 1qaz2wsx3edc` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of the current account with user ID as X1234567X, from \"zaq1xsw2cde3\" to \"1qaz2wsx3edc\" in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Locating persons: `find`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Finds persons in the displayed list whose names/tags contain any of the given keywords. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `find [\\tag tags]  KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* For back-to-back find commands, the most recent find command will search according to the previous find command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President Vice_President` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President` OR `Vice_President`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "**Executing back-to-back find commands:**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Assume that the displayed list contains 3 person initially."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::InitialList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag VIP\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 2 person, both with the tag \u0027VIP\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::SecondList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag President\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "it will filter according to the previous displayed list +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 1 person, with the tag \u0027President\u0027 +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::ThirdList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Resetting Search History: `clearsearch`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Resets search history back to the very initial stage before any find commands are executed"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clearsearch`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* To be used together with the find command"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting : `delete`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes a specific person from the address book. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `delete [-a all] [INDEX]`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all contacts on the list will be deleted and INDEX will be ignored."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete -a` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes everyone in the results of the `find` command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting data for budget allocation: `budget`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits the data about number of events, expected turnout etc. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `budget c/CLUB NAME t/TURNOUT e/NUMBER OF EVENTS`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`budget c/Computing Club t/200 e/5`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing the allocated budget : `viewbudget`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows the allocated budget to the user +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewbudget`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting grant request : `request`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits data about amount of grant needed, the reason and tags the importance level"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `request m/AMOUNT r/REASON t/IMPORTANCE LEVEL`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing grant request : `viewrequest`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all the grant request sorted by order of importance, and if there is a tie, by descending order of amount requested. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewrequest`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Accepting grant request: `accept`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves a specific grant request from the list of grants."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `accept [-a all] [INDEX]`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Approves the request at the specified `INDEX`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed requests list."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all requests on the list will be approved and INDEX will be ignored."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept 2` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves the 2nd request in the list of grant requests."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept -a` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves all the requests in the list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Login* : `USERID PASSWORD`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `login` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Create Account* : `USERID PASSWORD` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `create account` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete Account* : `USERID PASSWORD` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `delete account` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Change Password* : `USERID CURRENTPASSWORD NEWPASSWORD` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `change password` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\t`A01234567M zaq1xsw2cde3 1qaz2wsx3edc`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete* : `delete [-a all][INDEX]` +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Find* : `find [\\tag tags] KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `find James Jake` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g `find \\tag President`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting data for budget* : `budget c/CLUB NAME t/TURNOUT e/NUMBER OF EVENTS` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `budget c/Computing Club t/200 e/5`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting grant request* : request m/AMOUNT r/REASON t/IMPORTANCE LEVEL` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Viewing grant request* : `viewrequest`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Accepting a grant request* : `accept [-a all] [INDEX]` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "       `accept 2` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     `accept -a`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 435
    }
  },
  {
    "path": "docs/UserGuide_REMOTE_13948.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "﻿\u003d NUSSU Connect - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "By: `Team F09-1`      Since: `Sept 2018`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "NUSSU-Connect is an application for executive committee (exco) members of the NUS Student Union (NUSSU) to help them perform their daily tasks including managing recruitment, contacts, budgets and projects efficiently."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Logging into system: `login`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into application using relevant credentials. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `login USERID PASSWORD`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to the password associated with the existing account"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `login X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Logs into Address book with user ID as X1234567X and password as zaq1xsw2cde3."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Password is case-sensitive!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Creating a new user account: `createaccount`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new user account in the address book. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `createaccount user/USERID pass/PASSWORD`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* user/ and pass/ are required prefixes before USERID and PASSWORD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to any desired passphrases the new user wishes to have"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must not belong to an existing account"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `createaccount user/X1234567X pass/zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Creates a new account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting an existing user account: `deleteaccount`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes an existing account from the address book. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `deleteaccount USERID PASSWORD`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* PASSWORD refers to passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `deleteaccount X1234567X zaq1xsw2cde3` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the current account with user ID as X1234567X and password as zaq1xsw2cde3 in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Changing the password of an existing user account: `changepassword`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of an existing account from the address book. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `changepassword USERID CURRENTPASSWORD NEWPASSWORD`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID refers to student matriculation number"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* CURRENTPASSWORD refers to current passphrase associated with USERID of the account"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The USERID must be in the `X1234567X` format, where X can be any lower or upper case letter alphabet, and there must be exactly 7 digits between the two `X`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* USERID must belong to an existing account"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* NEWPASSWORD must be different from CURRENTPASSWORD"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `changepassword X1234567X zaq1xsw2cde3 1qaz2wsx3edc` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Changes the password of the current account with user ID as X1234567X, from \"zaq1xsw2cde3\" to \"1qaz2wsx3edc\" in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Locating persons: `find`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Finds persons in the displayed list whose names/tags contain any of the given keywords. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `find [\\tag tags]  KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* For back-to-back find commands, the most recent find command will search according to the previous find command"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find \\tag President Vice_President` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Returns any person with the tag `President` OR `Vice_President`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "**Executing back-to-back find commands:**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Assume that the displayed list contains 3 person initially."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::InitialList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag VIP\" +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 2 person, both with the tag \u0027VIP\u0027"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::SecondList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "After executing the command \"find \\tag President\" +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "it will filter according to the previous displayed list +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "the displayed list will contain 1 person, with the tag \u0027President\u0027 +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "image::ThirdList.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Resetting Search History: `clearsearch`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Resets search history back to the very initial stage before any find commands are executed +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clearsearch`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* To be used together with the find command"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Deleting : `delete`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes a specific person from the address book. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `delete [-a all] [INDEX]`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all contacts on the list will be deleted and INDEX will be ignored."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`delete -a` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Deletes everyone in the results of the `find` command."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting data for budget allocation: `data`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits the data about number of events, expected turnout etc. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `data e/NUMBER OF EVENTS t/TURNOUT`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`data e/5 t/200` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing the allocated budget : `viewbudget`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows the allocated budget to the user +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewbudget` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Submitting grant request : `request`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Submits data about amount of grant needed, the reason and tags the importance level"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `request m/AMOUNT r/REASON t/IMPORTANCE LEVEL"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`request m/1000 r/for booking auditorium t/medium` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Viewing grant request : `viewrequest`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Shows a list of all the grant request sorted by order of importance, and if there is a tie, by descending order of amount requested. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `viewrequest` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Accepting grant request: `accept`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves a specific grant request from the list of grants."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `accept [-a all] [INDEX] +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* Approves the request at the specified `INDEX`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index refers to the index number shown in the displayed requests list."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* If -a option is selected, all requests on the list will be approved and INDEX will be ignored."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "****"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept 2` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves the 2nd request in the list of grant requests."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* `viewrequest` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "`accept -a` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Approves all the requests in the list."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Login* : `login USERID PASSWORD`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `login A1234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Create Account* : `createaccount USERID PASSWORD` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `createaccount user/A1234567M pass/zaq1xsw2cde3`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete Account* : `deleteaccount USERID PASSWORD` +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `deleteaccount A01234567M zaq1xsw2cde3`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Change Password* : `changepassword USERID CURRENTPASSWORD NEWPASSWORD` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `changepassword A01234567M zaq1xsw2cde3 1qaz2wsx3edc`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Delete* : `delete [-a all][INDEX]` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Find* : `find [\\tag tags] KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `find James Jake` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g `find \\tag President`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting data for budget* : `data e/NUMBER OF EVENTS t/TURNOUT` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `data e/5 t/200`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Submitting grant request* : request m/AMOUNT r/REASON t/IMPORTANCE LEVEL` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Viewing grant request* : `viewrequest`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "* *Accepting a grant request* : `accept [-a all] [INDEX]` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "       `accept 2` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "e.g. `viewrequest` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     `accept -a`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 428
    }
  },
  {
    "path": "docs/team/MelvinTanJitChong.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "The purpose of this portfolio is to document a summary of my contributions to the project. This project is a software"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "engineering project that aims to solve some of the common issues that NUSSU is facing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "NUSSU-Connect is an application for executive committee (exco) members of the NUS Student Union (NUSSU) to help them perform their daily tasks including managing recruitment, contacts, budgets and projects efficiently."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "Other team members working on this project are Jonathan Ng Hian Leong, Sanjukta, and Soh Boon Jun."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d\u003d List of Features"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Feature |Feature description |Format | Example"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Logging into system |Logs into application using relevant credentials |`login USERID PASSWORD ROLE` |`login X1234567X zaq1xsw2cde3 member`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Creating a new user account |Creates a new user account in the address book |`createaccount USERID PASSWORD ROLE` |`createaccount X1234567X aq1xsw2cde3 member`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Search Pruning |Trim the list of contacts with every successive find command without the hassle of typing a long single line command |`find \\tag ROLE` |`find \\tag President`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Undoing Search Commands |Restores the displayed list to the state before you perform your most recent find command |`undosearch` |"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Submitting data for budget allocation |Submits the data about number of events, expected turnout etc |`budget c/CLUB NAME t/TURNOUT e/NUMBER OF EVENTS` |`budget c/Computing Club t/200 e/5`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Calculating the budgets |Calculates the budgets for all the clubs in the address book using the total available budget |`calculatebudget b/TOTAL AVAILABLE BUDGET IN SGD` |`calculatebudget b/50000`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Viewing the allocated budget |Shows all the allocated budgets to the user |`viewbudget` |"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Submitting grant request |Submits data about amount of grant needed, the reason and tags the importance level |`request m/AMOUNT r/REASON t/IMPORTANCE LEVEL` |`request m/1000 r/for booking auditorium t/medium`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Viewing grant request |Shows a list of all the grant request sorted by order of importance, and if there is a tie, by descending order of amount requested |`viewrequest` |"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Accepting grant request |Approves a specific grant request from the list of grants |`accept [-a all] [INDEX]` |`viewrequest` + `accept 2`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Adding person\u0027s skill |Edits a person\u0027s skill in the address book |`asl INDEX s/SKILL l/SKILL_LEVEL` |`asl 2 s/Photography l/30"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|Locating persons |Finds persons in the displayed list whose names/tags contain any of the given keywords |`find [\\tag] [\\exclude] KEYWORD [MORE_KEYWORDS]` |`find \\tag President`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d Preface"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "This section shows the various contributions made to the project, covering aspects such as enhancement features, codes contributed and other forms of contributions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* *Major enhancement*: added *the ability to securely log into the application with the relevant login credentials with a specific level of access to the application features associated with the login credentials*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chocological"
        },
        "content": "---"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chocological"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Chocological": 110
    }
  },
  {
    "path": "login/loginbook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003cloginbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eA1234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eA1234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/loginbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.storage.LoginBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.storage.XmlLoginBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBookStorage loginBookStorage \u003d new XmlLoginBookStorage(userPrefs.getLoginBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        storage \u003d new StorageManager(loginBookStorage, addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Optional\u003cReadOnlyLoginBook\u003e loginBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ReadOnlyLoginBook initialLoginData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            loginBookOptional \u003d storage.readLoginBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            if (!loginBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                logger.info(\"Login data file not found. Will be starting with a new LoginBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            initialLoginData \u003d loginBookOptional.orElseGet(SampleDataUtil::getSampleLoginBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            logger.warning(\"Login data file not in the correct format. Will be starting with an empty LoginBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            initialLoginData \u003d new LoginBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty LoginBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            initialLoginData \u003d new LoginBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new ModelManager(initialLoginData, initialData, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ui.start(primaryStage, model, history);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "Chocological": 25,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_LOGIN_LISTED_OVERVIEW \u003d \"Login successful!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/LoginBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/** Indicates the LoginBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public final ReadOnlyLoginBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBookChangedEvent(ReadOnlyLoginBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return \"number of accounts \" + data.getLoginDetailsList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *   Checks for case, and a full word match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *       containsWordCheckCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *       containsWordCheckCase(\"ABc def\", \"Abc\") \u003d\u003d false // casing does not match"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *       containsWordCheckCase(\"ABc def\", \"ABc\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean containsWordCheckCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                .anyMatch(preppedWord::contentEquals);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 26,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public String getLastExecutedCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return userInputHistory.getLast();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 9,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of clubs */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    ObservableList\u003cClubBudgetElements\u003e getFilteredClubsList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "sanjukta99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ObservableList\u003cLoginDetails\u003e getFilteredLoginDetailsList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return model.getFilteredLoginDetailsList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ObservableList\u003cClubBudgetElements\u003e getFilteredClubsList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return model.getFilteredClubsList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 5,
      "-": 52,
      "sanjukta99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LoginManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * The manager of the login functionality of the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static boolean isLoginSuccessful \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static boolean isMember \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static boolean isPresident \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static boolean isTreasurer \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginManager() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean getIsLoginSuccessful() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return isLoginSuccessful;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean getIsMember() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return isMember;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean getIsPresident() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return isPresident;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean getIsTreasurer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return isTreasurer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void setIsLoginSuccessful(boolean setLoginSuccessful) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        isLoginSuccessful \u003d setLoginSuccessful;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void setIsMember(boolean setMember) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        isMember \u003d setMember;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void setIsPresident(boolean setPresident) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        isPresident \u003d setPresident;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void setIsTreasurer(boolean setTreasurer) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        isTreasurer \u003d setTreasurer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void setAllRolesFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        isMember \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        isPresident \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        isTreasurer \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/arithmetic/CalculateTotalAttendees.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.arithmetic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Calculates the total number of attendees across all events, based on the club budget elements entered by club"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * treasure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class CalculateTotalAttendees {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final List\u003cClubBudgetElements\u003e listOfClubs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @param listOfClubs is the filtered list with which to calculate totalAttendees"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public CalculateTotalAttendees(List\u003cClubBudgetElements\u003e listOfClubs) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(listOfClubs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.listOfClubs \u003d listOfClubs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @return the totalAttendees"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int arithmeticTotalAttendees() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        int totalAttendees \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfClubs.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            ClubBudgetElements currentClub \u003d listOfClubs.get(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            int currentExpectedTurnout \u003d Integer.parseInt(currentClub.getExpectedTurnout().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            int currentNumberOfEvents \u003d Integer.parseInt(currentClub.getNumberOfEvents().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            totalAttendees +\u003d (currentExpectedTurnout * currentNumberOfEvents);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return totalAttendees;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSkillCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "content": "//@@author derpyplops-reused"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "//{The implementation is a simple renaming of the \"remark\" example in the Dev Guide."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "// Code from it is also reused throughout the project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "// Which will be extended later to other uses.}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Adds a skill for a person in the Addressbook."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "public class AddSkillCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addskill\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the skill of the person identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"Existing skill will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + PREFIX_SKILL + \"[SKILL]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + PREFIX_SKILL + \"Can swim.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New skill added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String MESSAGE_ADD_SKILL_SUCCESS \u003d \"Added skill to person: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String MESSAGE_DELETE_SKILL_SUCCESS \u003d \"Remove skill to person: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public final SkillLevel dummySkillLevel \u003d new SkillLevel(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final Skill skill;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * @param skill of the person to be updated to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public AddSkillCommand(Index index, Skill skill) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        requireAllNonNull(index, skill);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skill \u003d skill;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * Creates an AddSkillCommand to add the specified {@code Skill}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                personToEdit.getAddress(), skill, dummySkillLevel, personToEdit.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        String message \u003d !skill.value.isEmpty() ? MESSAGE_ADD_SKILL_SUCCESS : MESSAGE_DELETE_SKILL_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (!(other instanceof AddSkillCommand)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillCommand e \u003d (AddSkillCommand) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                \u0026\u0026 skill.equals(e.skill);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "ladderinc": 1,
      "derpyplops": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSkillLevelCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLLEVEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Changes the skill of an existing person in the address book, with a tagged skill skillLevel."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "public class AddSkillLevelCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"asl\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the skill of the person identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"Existing skill will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + PREFIX_SKILL + \"[SKILL] \" + PREFIX_SKILLLEVEL + \"[LEVEL]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            + PREFIX_SKILL + \"Photography \" + PREFIX_SKILLLEVEL + \"4\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String MESSAGE_ADD_SKILL_SUCCESS \u003d \"Added skill to Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String MESSAGE_DELETE_SKILL_SUCCESS \u003d \"Removed skill from Person: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final Skill skill;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final SkillLevel skillLevel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * @param index of the person in the filtered person list to edit the skill"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * @param skill of the person to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * @param skillLevel of the skill that the person has"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public AddSkillLevelCommand(Index index, Skill skill, SkillLevel skillLevel) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        requireAllNonNull(index, skill, skillLevel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skill \u003d skill;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skillLevel \u003d skillLevel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                personToEdit.getAddress(), skill, skillLevel, personToEdit.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        String message \u003d !skill.value.isEmpty() ? MESSAGE_ADD_SKILL_SUCCESS : MESSAGE_DELETE_SKILL_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (!(other instanceof AddSkillLevelCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand e \u003d (AddSkillLevelCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                \u0026\u0026 skill.equals(e.skill);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "derpyplops": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BudgetCalculationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.arithmetic.CalculateTotalAttendees;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.TotalBudget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Calculates the budgets to be allocated to all the clubs in the list of clubs in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class BudgetCalculationCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calculatebudget\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculates the budgets to be allocated to all the \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"clubs in the list of clubs in the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"Parameters:  \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_TOTAL_BUDGET + \"TOTAL BUDGET (IN SGD) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 50000 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_CALCULATE_BUDGET_SUCCESS \u003d \"The budgets have been calculated.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_INVALID_TOTAL_BUDGET \u003d \"Please enter a valid total budget!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLUB \u003d \"This is a duplicate club\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final TotalBudget totalBudget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @param totalBudget of the person in the filtered clubs list to calculate the budget with"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public BudgetCalculationCommand(TotalBudget totalBudget) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(totalBudget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        List\u003cClubBudgetElements\u003e listOfClubs \u003d model.getFilteredClubsList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (Integer.parseInt(totalBudget.toString()) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TOTAL_BUDGET);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        int budgetPerPerson;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        CalculateTotalAttendees totalAttendees \u003d new CalculateTotalAttendees(listOfClubs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        budgetPerPerson \u003d Integer.parseInt(totalBudget.toString()) / totalAttendees.arithmeticTotalAttendees();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        for (i \u003d 0; i \u003c listOfClubs.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            ClubBudgetElements currentClubForBudget \u003d listOfClubs.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            int currenteo \u003d Integer.parseInt(currentClubForBudget.getExpectedTurnout().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            int currentnoe \u003d Integer.parseInt(currentClubForBudget.getNumberOfEvents().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            int totalClubMembers \u003d currenteo * currentnoe;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            int currentClubsBudget \u003d budgetPerPerson * totalClubMembers;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            FinalClubBudget toAdd \u003d new FinalClubBudget(currentClubForBudget.getClubName(), currentClubsBudget);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            if (model.hasClubBudget(toAdd)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_CLUB);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            model.addClubBudget(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CALCULATE_BUDGET_SUCCESS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLUB_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_TURNOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_EVENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Submits the data for budget allocation to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Submits the data for calculating the budget of a\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \" club. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_CLUB_NAME + \"CLUB NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_EXPECTED_TURNOUT + \"EXPECTED TURNOUT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_NUMBER_OF_EVENTS + \"NUMBER OF EVENTS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_CLUB_NAME + \"Computing Club \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_EXPECTED_TURNOUT + \"200 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_NUMBER_OF_EVENTS + \"5 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Data submitted: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLUB \u003d \"This club\u0027s data already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final ClubBudgetElements toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Creates a BudgetCommand to add the specified {@code ClubBudgetElements}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public BudgetCommand(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(club);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        toAdd \u003d club;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (model.hasClub(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLUB);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        model.addClub(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || (other instanceof BudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 toAdd.equals(((BudgetCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Adds an account to the login book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class CreateAccountCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"createaccount\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an account for the login book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"Parameters: USERID PASSWORD ROLE\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" A1234567M zaq1xsw2cde3 treasurer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account created: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"This account already exists in the login book\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final LoginDetails toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Creates a CreateAccountCommand to add the specified {@code LoginDetails}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public CreateAccountCommand(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(loginDetails);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.toAdd \u003d loginDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (model.hasAccount(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model.createAccount(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof CreateAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CreateAccountCommand) other).toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Skill updatedSkill \u003d personToEdit.getSkill();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        SkillLevel updatedSkillLevel \u003d personToEdit.getSkillLevel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                updatedAddress, updatedSkill, updatedSkillLevel, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "derpyplops": 7,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.formatter.KeywordsOutputFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names/tags contain any of \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            + \"Parameters: [\\\\tag] [\\\\exclude] KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD + \" alice bob charlie\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \" \" + FindCommandParser.EXCLUDE_OPTION_STRING + \" alice\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            + \"Example3: \" + COMMAND_WORD + \" \" + FindCommandParser.TAG_OPTION_STRING + \" President\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    protected boolean isExcludeMode \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    protected KeywordsOutputFormatter formatter \u003d new KeywordsOutputFormatter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 10,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPersonSubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class FindPersonSubCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public FindPersonSubCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this(predicate, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public FindPersonSubCommand(NameContainsKeywordsPredicate predicate, boolean isExcludeMode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.isExcludeMode \u003d isExcludeMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (isExcludeMode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.recordKeywords(KeywordType.ExcludeNames, predicate.getLowerCaseKeywords());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.executeSearch(predicate.negate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.recordKeywords(KeywordType.IncludeNames, predicate.getLowerCaseKeywords());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.executeSearch(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                        + formatter.getOutputString(model.getReadOnlyKeywordsRecord()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                || (other instanceof FindPersonSubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPersonSubCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindTagSubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Finds and lists all persons in address book whose tags contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class FindTagSubCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public FindTagSubCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this(predicate, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public FindTagSubCommand(TagContainsKeywordsPredicate predicate, boolean isExcludeMode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.isExcludeMode \u003d isExcludeMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (isExcludeMode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.recordKeywords(KeywordType.ExcludeTags, predicate.getLowerCaseKeywords());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.executeSearch(predicate.negate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.recordKeywords(KeywordType.IncludeTags, predicate.getLowerCaseKeywords());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.executeSearch(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                        + formatter.getOutputString(model.getReadOnlyKeywordsRecord()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                || (other instanceof FindTagSubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTagSubCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.searchhistory.SearchHistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Queries the login book to see if there is a user ID and password that matches input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * user ID and password. Used for the login process."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Keyword matching is case insensitive for user ID and case sensitive for user Password."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public abstract class LoginCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Login into NUSSU-Connect with input \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"user ID, password and role.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"Parameters: USERID PASSWORD ROLE\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" A3583758X 1qaxcdwd2w member\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private SearchHistoryManager searchHistoryManager \u003d new SearchHistoryManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Clears the current searchHistoryManager object of previous login input details in preparation for another"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * login attempt so that the filtered login details list becomes unfiltered again. Returns a new predicate generated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * from user input login id to be used in the filtering of the login details list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param idPredicate the predicate generated from user input login id"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @return a new predicate generated from user input login id"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Predicate getMostUpdatedIdPredicate(Predicate idPredicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        searchHistoryManager.clearSearchHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return searchHistoryManager.executeNewSearch(idPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns a new predicate generated from user input login password to be used in the filtering of the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * login details list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param passwordPredicate the predicate generated from user input login password"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @return a new predicate generated from user input login password"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Predicate getMostUpdatedPasswordPredicate(Predicate passwordPredicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return searchHistoryManager.executeNewSearch(passwordPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns a new predicate generated from user input login role to be used in the filtering of the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * login details list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param rolePredicate the predicate generated from user input login role"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @return a new predicate generated from user input login role"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Predicate getMostUpdatedRolePredicate(Predicate rolePredicate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return searchHistoryManager.executeNewSearch(rolePredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginUserIdPasswordRoleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LOGIN_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACCOUNTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.LoginManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserIdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPasswordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Queries the login book to see if there is a user ID and password that matches input user ID and password."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Used for the login process."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Keyword matching is case insensitive for user ID but case sensitive for password."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginUserIdPasswordRoleCommand extends LoginCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UserIdContainsKeywordsPredicate idPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UserPasswordContainsKeywordsPredicate passwordPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UserRoleContainsKeywordsPredicate rolePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginUserIdPasswordRoleCommand(UserIdContainsKeywordsPredicate idPredicate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                          UserPasswordContainsKeywordsPredicate passwordPredicate,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                          UserRoleContainsKeywordsPredicate rolePredicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.idPredicate \u003d idPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.passwordPredicate \u003d passwordPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.rolePredicate \u003d rolePredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        resetAccountList(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        updateFilteredAccountList(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        checkUpdatedAccountListSetLoginCondition(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new CommandResult(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Resets the previously updated accounts list in the model to a fresh state containing all existing accounts."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param model the current model being used to filter the accounts list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private void resetAccountList(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (model.getFilteredLoginDetailsList().size() \u003d\u003d 0) { // when user tries to login again after failed first try"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            model.updateFilteredLoginDetailsList(PREDICATE_SHOW_ALL_ACCOUNTS); // resets account list to show all"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Updates the account list in the model to reflect input of user login credentials."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param model the current model being used to filter the accounts list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private void updateFilteredAccountList(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedIdPredicate \u003d getMostUpdatedIdPredicate(getIdPredicate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model.updateFilteredLoginDetailsList(updatedIdPredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedPasswordPredicate \u003d getMostUpdatedPasswordPredicate(getPasswordPredicate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model.updateFilteredLoginDetailsList(updatedPasswordPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedRolePredicate \u003d getMostUpdatedRolePredicate(getRolePredicate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model.updateFilteredLoginDetailsList(updatedRolePredicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Checks if there is an existing account in the account list in the model that matches input of user login"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * credentials, and sets the login condition as successful only if the input user credentials is correct."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param model the current model being used to filter the accounts list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private void checkUpdatedAccountListSetLoginCondition(Model model) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (model.getFilteredLoginDetailsList().size() !\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            LoginManager.setIsLoginSuccessful(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            LoginManager.setAllRolesFalse();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            LoginManager.setIsLoginSuccessful(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            || (other instanceof LoginUserIdPasswordRoleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            \u0026\u0026 getIdPredicate().equals(((LoginUserIdPasswordRoleCommand) other).getIdPredicate()))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            \u0026\u0026 getPasswordPredicate().equals(((LoginUserIdPasswordRoleCommand) other).getPasswordPredicate())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            \u0026\u0026 getRolePredicate().equals(((LoginUserIdPasswordRoleCommand) other).getRolePredicate()); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserIdContainsKeywordsPredicate getIdPredicate() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return idPredicate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserPasswordContainsKeywordsPredicate getPasswordPredicate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return passwordPredicate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserRoleContainsKeywordsPredicate getRolePredicate() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return rolePredicate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoSearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.formatter.KeywordsOutputFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Reverts the {@code model}\u0027s search history to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class UndoSearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undosearch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Search History is empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private KeywordsOutputFormatter formatter \u003d new KeywordsOutputFormatter();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.revertLastSearch();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + formatter.getOutputString(model.getReadOnlyKeywordsRecord()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } catch (EmptyHistoryException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            model.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewClubBudgetsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLUB_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class ViewClubBudgetsCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewbudget\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the club\u0027s budget. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_CLUB_NAME + \"CLUB NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + PREFIX_CLUB_NAME + \"Computing Club \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Club budget is: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_INVALID_CLUB \u003d \"This club\u0027s budget does not exist in the address book\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final ClubName toShow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Creates a ViewClubBudgetCommand to view the specified {@code FinalClubBudget}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ViewClubBudgetsCommand(ClubName club) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(club);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        toShow \u003d club;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        /**if (!(model.hasClubBudget(toShow))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CLUB);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        List\u003cFinalClubBudget\u003e listOfBudgets \u003d model.getFilteredClubBudgetsList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        String budgetToShow \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        for (i \u003d 0; i \u003c listOfBudgets.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            FinalClubBudget currentBudget \u003d listOfBudgets.get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            if (currentBudget.getClubName().equals(toShow)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                budgetToShow \u003d Integer.toString(currentBudget.getAllocatedBudget());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                System.out.println(\"the budget is \" + budgetToShow);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, budgetToShow));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, budgetToShow));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/formatter/KeywordsOutputFormatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.logic.commands.formatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.ReadOnlyKeywordsRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * A class that creates output strings of keywords according to KeywordsRecord"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class KeywordsOutputFormatter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static final int MAX_STRING_WIDTH \u003d 100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static final int EXTRA_PADDING_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static final char INCLUDE_PREFIX \u003d \u0027+\u0027;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static final char EXCLUDE_PREFIX \u003d \u0027-\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static final String TAG_KEYWORDS_HEADING \u003d \"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag Keywords History \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static final String NAME_KEYWORDS_HEADING \u003d \"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Name Keywords History \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static final String PREFIXED_KEYWORD_FORMAT \u003d \"%c%s \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private StringBuffer outputString \u003d new StringBuffer();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private ReadOnlyKeywordsRecord record;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private int currentStringWidth \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public String getOutputString(ReadOnlyKeywordsRecord record) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assert record !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        appendNameKeywordsToOutputString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        appendTagKeywordsToOutputString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return outputString.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Appends both included and excluded names to output string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void appendNameKeywordsToOutputString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (hasNameKeywords()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            currentStringWidth \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            outputString.append(NAME_KEYWORDS_HEADING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            for (String keyword: record.getIncludedNames()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                ensureStringWidthWithinLimit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                appendIncludedKeyword(keyword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                recalculateCurrentStringWidth(keyword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            for (String keyword: record.getExcludedNames()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                ensureStringWidthWithinLimit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                appendExcludedKeyword(keyword);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                recalculateCurrentStringWidth(keyword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Appends both included and excluded tags to output string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void appendTagKeywordsToOutputString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (hasTagKeywords()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            currentStringWidth \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            outputString.append(TAG_KEYWORDS_HEADING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            for (String keyword: record.getIncludedTags()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                ensureStringWidthWithinLimit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                appendIncludedKeyword(keyword);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                recalculateCurrentStringWidth(keyword);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            for (String keyword: record.getExcludedTags()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                ensureStringWidthWithinLimit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                appendExcludedKeyword(keyword);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                recalculateCurrentStringWidth(keyword);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Starts outputString on a newline if its width is too long."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void ensureStringWidthWithinLimit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (currentStringWidth \u003e\u003d MAX_STRING_WIDTH) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            outputString.append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            currentStringWidth \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private boolean hasTagKeywords() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return !record.getIncludedTags().isEmpty()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                || !record.getExcludedTags().isEmpty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private boolean hasNameKeywords() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return !record.getIncludedNames().isEmpty()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                || !record.getExcludedNames().isEmpty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void appendIncludedKeyword(String keyword) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String prefixedKeyword \u003d String.format(PREFIXED_KEYWORD_FORMAT, INCLUDE_PREFIX, keyword);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        outputString.append(prefixedKeyword);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void appendExcludedKeyword(String keyword) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String prefixedKeyword \u003d String.format(PREFIXED_KEYWORD_FORMAT, EXCLUDE_PREFIX, keyword);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        outputString.append(prefixedKeyword);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void recalculateCurrentStringWidth(String keyword) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (keyword !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            currentStringWidth +\u003d keyword.length() + EXTRA_PADDING_LENGTH;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Skill skill \u003d new Skill(\"\"); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        SkillLevel skillLevel \u003d new SkillLevel(0); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, skill, skillLevel, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 6,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSkillCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.commands.AddSkillCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Parses input arguments and creates a new {@code AddSkillCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "public class AddSkillCommandParser implements Parser\u003cAddSkillCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddSkillCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * and returns a {@code AddSkillCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public AddSkillCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SKILL);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSkillCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        String skill \u003d argMultimap.getValue(PREFIX_SKILL).orElse(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return new AddSkillCommand(index, new Skill(skill));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSkillLevelCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLLEVEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.commands.AddSkillLevelCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Parses input arguments and creates a new {@code AddSkillLevelCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "public class AddSkillLevelCommandParser implements Parser\u003cAddSkillLevelCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddSkillLevelCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * and returns a {@code AddSkillLevelCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public AddSkillLevelCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SKILLLEVEL, PREFIX_SKILL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                    AddSkillLevelCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Skill skill \u003d new Skill(argMultimap.getValue(PREFIX_SKILL).orElse(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        SkillLevel level \u003d new SkillLevel(Integer.parseInt(argMultimap.getValue(PREFIX_SKILLLEVEL).orElse(\"\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return new AddSkillLevelCommand(index, skill, level);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.commands.AddSkillCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.commands.AddSkillLevelCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.BudgetCalculationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.CreateAccountCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.UndoSearchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.ViewClubBudgetsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return new LoginUserIdPasswordRoleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        case CreateAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return new CreateAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        case AddSkillCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            return new AddSkillCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        case AddSkillLevelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            return new AddSkillLevelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        case UndoSearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            return new UndoSearchCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        case BudgetCalculationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return new BudgetCalculationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        case ViewClubBudgetsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return new ViewClubBudgetsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 3,
      "Chocological": 7,
      "derpyplops": 10,
      "-": 91,
      "sanjukta99": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BudgetCalculationCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.BudgetCalculationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.TotalBudget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Parses input arguments and creates a new BudgetCalculationCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class BudgetCalculationCommandParser implements Parser\u003cBudgetCalculationCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCalculationCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * and returns an BudgetCalculationCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public BudgetCalculationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TOTAL_BUDGET);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TOTAL_BUDGET)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                    BudgetCalculationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        TotalBudget totalBudget \u003d ParserUtil.parseTotalBudget(argMultimap.getValue(PREFIX_TOTAL_BUDGET).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new BudgetCalculationCommand(totalBudget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLUB_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_TURNOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_EVENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ExpectedTurnout;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.NumberOfEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Parses input arguments and creates a new BudgetCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * and returns an BudgetCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLUB_NAME, PREFIX_EXPECTED_TURNOUT, PREFIX_NUMBER_OF_EVENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLUB_NAME, PREFIX_EXPECTED_TURNOUT, PREFIX_NUMBER_OF_EVENTS)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ClubName clubname \u003d ParserUtil.parseClubName(argMultimap.getValue(PREFIX_CLUB_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ExpectedTurnout expectedturnout \u003d ParserUtil.parseExpectedTurnout(argMultimap.getValue("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                PREFIX_EXPECTED_TURNOUT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        NumberOfEvents numberofevents \u003d ParserUtil.parseNumberOfEvents(argMultimap.getValue("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                PREFIX_NUMBER_OF_EVENTS).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ClubBudgetElements club \u003d new ClubBudgetElements(clubname, expectedturnout, numberofevents);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new BudgetCommand(club);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final Prefix PREFIX_SKILL \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final Prefix PREFIX_SKILLLEVEL \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final Prefix PREFIX_CLUB_NAME \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final Prefix PREFIX_EXPECTED_TURNOUT \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final Prefix PREFIX_NUMBER_OF_EVENTS \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final Prefix PREFIX_TOTAL_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 2,
      "-": 14,
      "sanjukta99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateAccountCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseUserId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseUserPassword;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseUserRole;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.CreateAccountCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPassword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRole;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Parses input arguments and creates a new CreateAccountCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class CreateAccountCommandParser implements Parser\u003cCreateAccountCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateAccountCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * and returns an CreateAccountCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public CreateAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails details \u003d extractLoginDetailsFromInput(keywords, args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new CreateAccountCommand(details);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Constructs and returns a LoginDetails object from the input of user account credentials"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param keywords string array representation of login user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param args from input of user account credentials"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @return LoginDetails object constructed from parsed user input consisting of userId, userPassword and userRole"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginDetails extractLoginDetailsFromInput(String[] keywords, String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (keywords.length !\u003d 3) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            StringTokenizer st \u003d new StringTokenizer(args);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            UserId userId \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            UserPassword userPassword \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            UserRole userRole \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            for (int i \u003d 1; st.hasMoreTokens(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    userId \u003d parseUserId(st.nextToken());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                } else if (i \u003d\u003d 3) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    userPassword \u003d parseUserPassword(st.nextToken());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                } else if (i \u003d\u003d 4) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    userRole \u003d parseUserRole(st.nextToken());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return new LoginDetails(userId, userPassword, userRole);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.FindPersonSubCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.FindTagSubCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final String TAG_OPTION_STRING \u003d \"\\\\tag\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final String EXCLUDE_OPTION_STRING \u003d \"\\\\exclude\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        List\u003cString\u003e keywordsList \u003d new ArrayList\u003cString\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (!hasValidInputFormat(keywordsList)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (isExcludeTagSearch(keywordsList)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            removesFirstTwoItemsFromKeywordsList(keywordsList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return new FindTagSubCommand(new TagContainsKeywordsPredicate(keywordsList), true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else if (isIncludeTagSearch(keywordsList)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            keywordsList.remove(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return new FindTagSubCommand(new TagContainsKeywordsPredicate(keywordsList));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else if (isExcludePersonSearch(keywordsList)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            keywordsList.remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return new FindPersonSubCommand(new NameContainsKeywordsPredicate(keywordsList), true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return new FindPersonSubCommand(new NameContainsKeywordsPredicate(keywordsList));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private boolean isExcludePersonSearch(List\u003cString\u003e keywordsList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return keywordsList.get(0).equals(EXCLUDE_OPTION_STRING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private boolean isIncludeTagSearch(List\u003cString\u003e keywordsList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return keywordsList.size() \u003e\u003d 2 \u0026\u0026 keywordsList.get(0).equals(TAG_OPTION_STRING)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 !keywordsList.get(1).equals(EXCLUDE_OPTION_STRING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private boolean isExcludeTagSearch(List\u003cString\u003e keywordsList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return keywordsList.size() \u003e\u003d 2 \u0026\u0026 keywordsList.get(0).equals(TAG_OPTION_STRING)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 keywordsList.get(1).equals(EXCLUDE_OPTION_STRING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns false if the user\u0027s input is in the incorrect format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private boolean hasValidInputFormat(List\u003cString\u003e keywordsList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (keywordsList.get(0).equals(TAG_OPTION_STRING) \u0026\u0026 keywordsList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else if (keywordsList.get(0).equals(TAG_OPTION_STRING)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 keywordsList.get(1).equals(EXCLUDE_OPTION_STRING) \u0026\u0026 keywordsList.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else if (keywordsList.get(0).equals(EXCLUDE_OPTION_STRING) \u0026\u0026 keywordsList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void removesFirstTwoItemsFromKeywordsList(List\u003cString\u003e keywordsList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assert keywordsList.size() \u003e\u003d 2;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        keywordsList.remove(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        keywordsList.remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 61,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginUserIdPasswordRoleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.LoginManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.LoginUserIdPasswordRoleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserIdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPasswordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Parses input arguments and creates a new LoginUserIdCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginUserIdPasswordRoleCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginUserIdPasswordRoleCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * and returns an LoginUserIdPasswordRoleCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        List\u003cString\u003e keywordsList \u003d new ArrayList\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return setRoleReturnLoginCommandObject(keywords, keywordsList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Sets the conditions for certain roles and returns a LoginUserIdPasswordRoleCommand object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param keywords string array representation of user login input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param keywordsList array list representation of user login input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @return a LoginUserIdPasswordRoleCommand object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginUserIdPasswordRoleCommand setRoleReturnLoginCommandObject("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            String[] keywords, List\u003cString\u003e keywordsList) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (keywords.length \u003c 3) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } else if (keywords.length \u003e 3) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            switch(keywords[2]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            case \"member\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                LoginManager.setIsMember(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            case \"president\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                LoginManager.setIsPresident(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            case \"treasurer\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                LoginManager.setIsTreasurer(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new LoginUserIdPasswordRoleCommand(new UserIdContainsKeywordsPredicate(keywordsList),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserPasswordContainsKeywordsPredicate(keywordsList),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserRoleContainsKeywordsPredicate(keywordsList));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    T parse(String userInput) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ExpectedTurnout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.NumberOfEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.TotalBudget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPassword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRole;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses a {@code String userId} into a {@code UserId}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws ParseException if the given {@code userId} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static UserId parseUserId(String userId) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(userId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String trimmeduserId \u003d userId.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!UserId.isValidUserId(trimmeduserId)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException(UserId.MESSAGE_USERID_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new UserId(trimmeduserId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses a {@code String userPassword} into a {@code UserPassword}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws ParseException if the given {@code userPassword} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static UserPassword parseUserPassword(String userPassword) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(userPassword);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String trimmeduserPassword \u003d userPassword.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!UserPassword.isValidUserPassword(trimmeduserPassword)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException(UserPassword.MESSAGE_USERPASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new UserPassword(trimmeduserPassword);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses a {@code String userRole} into a {@code UserRole}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws ParseException if the given {@code userRole} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static UserRole parseUserRole(String userRole) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(userRole);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String trimmeduserRole \u003d userRole.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!UserRole.isValidUserRole(trimmeduserRole)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new ParseException(UserRole.MESSAGE_USERROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new UserRole(trimmeduserRole);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Parses a {@code String clubname} into a {@code ClubName}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @throws ParseException if the given {@code clubname} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static ClubName parseClubName(String clubname) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(clubname);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        String trimmedClubName \u003d clubname.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!ClubName.isValidClubName(trimmedClubName)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new ParseException(ClubName.MESSAGE_CLUB_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new ClubName(trimmedClubName);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Parses a {@code String expectedturnout} into a {@code ExpectedTurnout}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @throws ParseException if the given {@code expectedturnout} is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static ExpectedTurnout parseExpectedTurnout(String expectedturnout) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(expectedturnout);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        String trimmedExpectedTurnout \u003d expectedturnout.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!ExpectedTurnout.isValidExpectedTurnout(trimmedExpectedTurnout)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new ParseException(ExpectedTurnout.MESSAGE_EXPECTED_TURNOUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new ExpectedTurnout(trimmedExpectedTurnout);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Parses a {@code String numberofevents} into a {@code NumberOfEvents}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @throws ParseException if the given {@code numberofevents} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static NumberOfEvents parseNumberOfEvents(String numberofevents) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(numberofevents);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        String trimmedNumberOfEvents \u003d numberofevents.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!NumberOfEvents.isValidNumberOfEvents(trimmedNumberOfEvents)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new ParseException(NumberOfEvents.MESSAGE_NUMBER_OF_EVENTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new NumberOfEvents(trimmedNumberOfEvents);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Parses a {@code int totalBudget} into a {@code int}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @throws ParseException if the given {@code totalBudget} is invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static TotalBudget parseTotalBudget(String totalBudget) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(totalBudget);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        String trimmedTotalBudget \u003d totalBudget.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!TotalBudget.isValidTotalBudget(trimmedTotalBudget)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new ParseException(TotalBudget.MESSAGE_TOTAL_BUDGET_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new TotalBudget(trimmedTotalBudget);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 47,
      "-": 124,
      "sanjukta99": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewClubBudgetsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLUB_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.ViewClubBudgetsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Parses input arguments and creates a new ViewClubBudgetsCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class ViewClubBudgetsCommandParser implements Parser\u003cViewClubBudgetsCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewClubBudgetsCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * and returns a ViewClubBudgetsCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ViewClubBudgetsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLUB_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLUB_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                    ViewClubBudgetsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ClubName clubName \u003d ParserUtil.parseClubName(argMultimap.getValue(PREFIX_CLUB_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new ViewClubBudgetsCommand(clubName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.UniqueClubsList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.UniqueClubBudgetList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final UniqueClubsList clubs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        clubs \u003d new UniqueClubsList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final UniqueClubBudgetList clubBudgets;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        clubBudgets \u003d new UniqueClubBudgetList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a club with the same identity as {@code club} exists in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean hasClub(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(club);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubs.contains(club);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Adds a club to the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * The club must not already exist in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void addClub(ClubBudgetElements c) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        clubs.add(c);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a club budget with the same identity as {@code clubBudget} exists in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean hasClubBudget(FinalClubBudget clubBudget) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(clubBudget);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubBudgets.contains(clubBudget);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Adds a club budget to the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * The club budget must not already exist in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void addClubBudget(FinalClubBudget c) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        clubBudgets.add(c);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ObservableList\u003cClubBudgetElements\u003e getClubsList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubs.asUnmodifiableObservableList(); }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ObservableList\u003cFinalClubBudget\u003e getClubBudgetsList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubBudgets.asUnmodifiableObservableList(); }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "sanjukta99": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LoginBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UniqueAccountList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Wraps all data at the login-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Duplicates are not allowed (by .isSameAccount comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginBook implements ReadOnlyLoginBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UniqueAccountList accounts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        accounts \u003d new UniqueAccountList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Creates a LoginBook using the LoginDetails in the {@code toBeCopied}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBook(ReadOnlyLoginBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Replaces the contents of the account list with {@code loginDetails}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * {@code loginDetails} must not contain duplicate login details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void setLoginDetails(List\u003cLoginDetails\u003e accounts) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.accounts.setLoginDetails(accounts);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Resets the existing data of this {@code LoginBook} with {@code newData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void resetData(ReadOnlyLoginBook newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        setLoginDetails(newData.getLoginDetailsList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    //// login-level operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if an account with the same credentials as {@code loginDetails} exists in the login book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean hasAccount(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(loginDetails);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return accounts.contains(loginDetails);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Adds an account to the login book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * The account must not already exist in the login book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void createAccount(LoginDetails l) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        accounts.add(l);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof LoginBook // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 accounts.equals(((LoginBook) other).accounts));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return accounts.asUnmodifiableObservableList().size() + \" accounts\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return accounts.hashCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ObservableList\u003cLoginDetails\u003e getLoginDetailsList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return accounts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.ReadOnlyKeywordsRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Predicate\u003cLoginDetails\u003e PREDICATE_SHOW_ALL_ACCOUNTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    Predicate\u003cClubBudgetElements\u003e PREDICATE_SHOW_ALL_CLUBS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    Predicate\u003cFinalClubBudget\u003e PREDICATE_SHOW_ALL_CLUB_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Creates an account for address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * The account must not already exist in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void createAccount(LoginDetails loginDetails);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if an account with the same user ID as {@code account} exists in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    boolean hasAccount(LoginDetails credentials);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /** Returns the LoginBook */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    ReadOnlyLoginBook getLoginBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /** Returns an unmodifiable view of the filtered login details list */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    ObservableList\u003cLoginDetails\u003e getFilteredLoginDetailsList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns an unmodifiable view of the filtered clubs list */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    ObservableList\u003cClubBudgetElements\u003e getFilteredClubsList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns an unmodifiable view of the filtered club budgets list */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    ObservableList\u003cFinalClubBudget\u003e getFilteredClubBudgetsList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Updates the filter of the filtered login details list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void updateFilteredLoginDetailsList(Predicate\u003cLoginDetails\u003e predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Updates the filter of the filtered club budgets list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    void updateFilteredClubBudgetsList(Predicate\u003cFinalClubBudget\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a club with the same identity as {@code club} exists in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    boolean hasClub(ClubBudgetElements club);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Adds the given club."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @code club} must not already exist in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    void addClub(ClubBudgetElements club);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a club budget with the same identity as {@code clubBudget} exists in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    boolean hasClubBudget(FinalClubBudget clubBudget);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Adds the given club budget."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @code clubBudget} must not already exist in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    void addClubBudget(FinalClubBudget clubBudget);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Reverts model\u0027s filtered person list and search history to previous state."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    void revertLastSearch() throws EmptyHistoryException;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Updates model\u0027s filtered person list and search history to the next state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    void executeSearch(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Resets all search history and returns filtered person list to initial state."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    void resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Records keywords into history."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    void recordKeywords(KeywordType type, List\u003cString\u003e keywords);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns only the readable version of KeywordsRecord."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    ReadOnlyKeywordsRecord getReadOnlyKeywordsRecord();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 28,
      "Chocological": 25,
      "-": 76,
      "sanjukta99": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.events.model.LoginBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordsRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.ReadOnlyKeywordsRecord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.SearchHistoryManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final SearchHistoryManager\u003cPerson\u003e searchHistoryManager \u003d new SearchHistoryManager\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final KeywordsRecord keywordsRecord \u003d new KeywordsRecord();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final VersionedLoginBook versionedLoginBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final FilteredList\u003cLoginDetails\u003e filteredLoginDetails;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final FilteredList\u003cClubBudgetElements\u003e filteredClubs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final FilteredList\u003cFinalClubBudget\u003e filteredClubBudgets;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ModelManager(ReadOnlyLoginBook loginBook, ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireAllNonNull(loginBook, addressBook, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        versionedLoginBook \u003d new VersionedLoginBook(loginBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        filteredClubs \u003d new FilteredList\u003c\u003e(versionedAddressBook.getClubsList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        filteredLoginDetails \u003d new FilteredList\u003c\u003e(versionedLoginBook.getLoginDetailsList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        filteredClubBudgets \u003d new FilteredList\u003c\u003e(versionedAddressBook.getClubBudgetsList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this(new LoginBook(), new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ReadOnlyLoginBook getLoginBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return versionedLoginBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private void indicateLoginBookChanged() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        raise(new LoginBookChangedEvent(versionedLoginBook));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void createAccount(LoginDetails details) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        versionedLoginBook.createAccount(details);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        updateFilteredLoginDetailsList(PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        indicateLoginBookChanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean hasAccount(LoginDetails details) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(details);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return versionedLoginBook.hasAccount(details);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Submitting Budget Data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean hasClub(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(club);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return versionedAddressBook.hasClub(club);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void addClub(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        versionedAddressBook.addClub(club);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Account List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ObservableList\u003cLoginDetails\u003e getFilteredLoginDetailsList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredLoginDetails);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredLoginDetailsList(Predicate\u003cLoginDetails\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        filteredLoginDetails.setPredicate(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getting Final Budget \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean hasClubBudget(FinalClubBudget clubBudget) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(clubBudget);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return versionedAddressBook.hasClubBudget(clubBudget);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void addClubBudget(FinalClubBudget clubBudget) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        versionedAddressBook.addClubBudget(clubBudget);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Clubs List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ClubBudgetElements} backed by the internal list of"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ObservableList\u003cClubBudgetElements\u003e getFilteredClubsList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredClubs);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Club Budgets List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code FinalClubBudget} backed by the internal list of"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ObservableList\u003cFinalClubBudget\u003e getFilteredClubBudgetsList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredClubBudgets);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void updateFilteredClubBudgetsList(Predicate\u003cFinalClubBudget\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        filteredClubBudgets.setPredicate(predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Persons Search Pruning \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void revertLastSearch() throws EmptyHistoryException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d searchHistoryManager.revertLastSearch();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (predicate !\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            filteredPersons.setPredicate(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        keywordsRecord.undoKeywordsHistory();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void executeSearch(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        Predicate\u003cPerson\u003e updatedPredicate \u003d searchHistoryManager.executeNewSearch(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        filteredPersons.setPredicate(updatedPredicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void resetSearchHistoryToInitialState() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        searchHistoryManager.clearSearchHistory();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        filteredPersons.setPredicate(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        keywordsRecord.clearKeywordsHistory();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void recordKeywords(KeywordType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        requireAllNonNull(keywords);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        keywordsRecord.recordKeywords(type, keywords);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public ReadOnlyKeywordsRecord getReadOnlyKeywordsRecord() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return keywordsRecord;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 searchHistoryManager.equals(other.searchHistoryManager);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 49,
      "Chocological": 44,
      "-": 141,
      "sanjukta99": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    ObservableList\u003cClubBudgetElements\u003e getClubsList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    ObservableList\u003cFinalClubBudget\u003e getClubBudgetsList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "sanjukta99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLoginBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Unmodifiable view of the login book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public interface ReadOnlyLoginBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns an unmodifiable view of the accounts list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * This list will not contain any duplicate accounts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    ObservableList\u003cLoginDetails\u003e getLoginDetailsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Path loginBookFilePath \u003d Paths.get(\"data\" , \"loginbook.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Path getLoginBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return loginBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 5,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedLoginBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * {@code LoginBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class VersionedLoginBook extends LoginBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final List\u003cReadOnlyLoginBook\u003e loginBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public VersionedLoginBook(ReadOnlyLoginBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBookStateList.add(new LoginBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!(other instanceof VersionedLoginBook)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        VersionedLoginBook otherVersionedLoginBook \u003d (VersionedLoginBook) other;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return super.equals(otherVersionedLoginBook)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 loginBookStateList.equals(otherVersionedLoginBook.loginBookStateList)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedLoginBook.currentStatePointer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budgetelements/ClubBudgetElements.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.budgetelements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Represents the budget elements of a club in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class ClubBudgetElements {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final ClubName clubname;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final ExpectedTurnout expectedturnout;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final NumberOfEvents numberofevents;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubBudgetElements(ClubName clubname, ExpectedTurnout expectedturnout, NumberOfEvents numberofevents) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireAllNonNull(clubname, expectedturnout, numberofevents);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.clubname \u003d clubname;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.expectedturnout \u003d expectedturnout;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.numberofevents \u003d numberofevents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubName getClubName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubname;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ExpectedTurnout getExpectedTurnout() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return expectedturnout;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public NumberOfEvents getNumberOfEvents() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return numberofevents;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if both clubs have the same name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean isSameClub(ClubBudgetElements otherClubBudgetElements) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (otherClubBudgetElements \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return otherClubBudgetElements !\u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 otherClubBudgetElements.getClubName().equals(getClubName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!(other instanceof ClubBudgetElements)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ClubBudgetElements otherClubBudgetElements \u003d (ClubBudgetElements) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return otherClubBudgetElements.getClubName().equals(getClubName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return Objects.hash(clubname, expectedturnout, numberofevents);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        builder.append(getClubName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                .append(\" Expected Turnout: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                .append(getExpectedTurnout())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                .append(\" Number of Events: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                .append(getNumberOfEvents());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budgetelements/ClubName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.budgetelements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Represents a Club\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidClubName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class ClubName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_CLUB_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            \"Club names should only contain alphanumeric characters and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * The first character of the club name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String CLUB_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public final String clubName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @param clubname A valid club name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubName(String clubname) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(clubname);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        checkArgument(isValidClubName(clubname), MESSAGE_CLUB_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        clubName \u003d clubname;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a given string is a valid club name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static boolean isValidClubName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return test.matches(CLUB_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || (other instanceof ClubName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 clubName.equals(((ClubName) other).clubName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budgetelements/ExpectedTurnout.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.budgetelements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Represents the expected number of attendees for every event a club is planning to have, in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpectedTurnout(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class ExpectedTurnout {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_EXPECTED_TURNOUT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            \"Expected turnout should only contain numbers, and it can be any number including zero\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String EXPECTED_TURNOUT_VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Constructs a {@code ExpectedTurnout}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @param expectedturnout A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ExpectedTurnout(String expectedturnout) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(expectedturnout);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        checkArgument(isValidExpectedTurnout(expectedturnout), MESSAGE_EXPECTED_TURNOUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        value \u003d expectedturnout;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static boolean isValidExpectedTurnout(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return test.matches(EXPECTED_TURNOUT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || (other instanceof ExpectedTurnout // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 value.equals(((ExpectedTurnout) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budgetelements/NumberOfEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.budgetelements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Represents the number of events a club is planning to have, in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNumberOfEvents(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class NumberOfEvents {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_NUMBER_OF_EVENTS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            \"Number of events should only contain numbers, and it can be any number including zero\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String NUMBER_OF_EVENTS_VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Constructs a {@code NumberOfEvents}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @param numberofevents A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public NumberOfEvents(String numberofevents) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(numberofevents);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        checkArgument(isValidNumberOfEvents(numberofevents), MESSAGE_NUMBER_OF_EVENTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        value \u003d numberofevents;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static boolean isValidNumberOfEvents(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return test.matches(NUMBER_OF_EVENTS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || (other instanceof NumberOfEvents // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 value.equals(((NumberOfEvents) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budgetelements/UniqueClubsList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.budgetelements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.exceptions.DuplicateClubException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * A list of clubs that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * A club is considered unique by comparing using {@code ClubBudgetElements#isSameClub(ClubBudgetElements)}. As such"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * adding of clubs uses ClubBudgetElements#isSameClub(ClubBudgetElements) for equality so as to ensure that the club"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * being added is unique in terms of identity in the UniqueClubsList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * @see ClubBudgetElements#isSameClub(ClubBudgetElements)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class UniqueClubsList implements Iterable\u003cClubBudgetElements\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final ObservableList\u003cClubBudgetElements\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if the list contains an equivalent club as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean contains(ClubBudgetElements toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameClub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Adds a club to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * The club must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void add(ClubBudgetElements toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new DuplicateClubException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ObservableList\u003cClubBudgetElements\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public Iterator\u003cClubBudgetElements\u003e iterator() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || (other instanceof UniqueClubsList // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueClubsList) other).internalList));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private boolean clubsAreUnique(List\u003cClubBudgetElements\u003e clubs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        for (int i \u003d 0; i \u003c clubs.size() - 1; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clubs.size(); j++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                if (clubs.get(i).isSameClub(clubs.get(j))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budgetelements/exceptions/DuplicateClubException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.budgetelements.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Signals that the operation will result in duplicate Clubs (Clubs are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class DuplicateClubException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public DuplicateClubException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        super(\"Operation would result in duplicate clubs\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/clubbudget/FinalClubBudget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.clubbudget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Represents the final allocated budget of a club in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class FinalClubBudget {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final ClubName clubname;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final int allocatedBudget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public FinalClubBudget(ClubName clubname, int allocatedBudget) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireAllNonNull(clubname, allocatedBudget);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.clubname \u003d clubname;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.allocatedBudget \u003d allocatedBudget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubName getClubName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return clubname;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int getAllocatedBudget() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return allocatedBudget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean isSameFinalClubBudget(FinalClubBudget otherFinalClubBudget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (otherFinalClubBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return otherFinalClubBudget !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 otherFinalClubBudget.getClubName().equals(getClubName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if both clubs have the same identity fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (!(other instanceof FinalClubBudget)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        FinalClubBudget otherFinalClubBudget \u003d (FinalClubBudget) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return otherFinalClubBudget.getClubName().equals(getClubName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return Objects.hash(clubname, allocatedBudget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        builder.append(getClubName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                .append(\" Final allocated budget: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                .append(getAllocatedBudget());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/clubbudget/TotalBudget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.clubbudget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Represents the Total Budget made available by the NUSSU Exco in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTotalBudget(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class TotalBudget {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String MESSAGE_TOTAL_BUDGET_CONSTRAINTS \u003d \"Total budget should only contain numbers \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"including zero. It should be given in SGD\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String TOTAL_BUDGET_VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Constructs a {@code TotalBudget}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * @param totalBudget A valid total budget."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public TotalBudget(String totalBudget) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(totalBudget);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        checkArgument(isValidTotalBudget(totalBudget), MESSAGE_TOTAL_BUDGET_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        value \u003d totalBudget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static boolean isValidTotalBudget(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return test.matches(TOTAL_BUDGET_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || (other instanceof TotalBudget // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 value.equals(((TotalBudget) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/clubbudget/UniqueClubBudgetList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.clubbudget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * A list of final club budgets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * A club budget is considered unique by comparing using {@code FinalClubBudget#isSameFinalClubBudget(FinalClubBudge)}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * @see FinalClubBudget#isSameFinalClubBudget(FinalClubBudget)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class UniqueClubBudgetList implements Iterable\u003cFinalClubBudget\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private final ObservableList\u003cFinalClubBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if the list contains an equivalent club as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean contains(FinalClubBudget toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFinalClubBudget);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Adds a club budget to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * The club must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void add(FinalClubBudget toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            //throw new DuplicateFinalClubBudgetException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ObservableList\u003cFinalClubBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public Iterator\u003cFinalClubBudget\u003e iterator() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                || (other instanceof UniqueClubBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueClubBudgetList) other).internalList));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns true if {@code persons} contains only clubs\u0027 budgets."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private boolean clubsAreUnique(List\u003cFinalClubBudget\u003e clubBudgets) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        for (int i \u003d 0; i \u003c clubBudgets.size() - 1; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clubBudgets.size(); j++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                if (clubBudgets.get(i).isSameFinalClubBudget(clubBudgets.get(j))) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/clubbudget/exceptions/DuplicateFinalClubBudgetException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.model.clubbudget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * Signals that the operation will result in duplicate Club Budgets (Club budgets are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class DuplicateFinalClubBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public DuplicateFinalClubBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        super(\"Operation would result in duplicate club budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/LoginDetails.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Represents user\u0027s login credentials."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginDetails {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UserId userId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UserPassword userPassword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UserRole userRole;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginDetails(UserId userId, UserPassword userPassword, UserRole userRole) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireAllNonNull(userId, userPassword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userPassword \u003d userPassword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userRole \u003d userRole;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserId getUserId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return userId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserPassword getUserPassword() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return userPassword;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserRole getUserRole() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return userRole;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if and only if both accounts are of the same user ID."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean isSameAccount(LoginDetails otherAccount) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (otherAccount \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return otherAccount !\u003d null \u0026\u0026 otherAccount.getUserId().equals(getUserId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if both accounts have the same user ID."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!(other instanceof LoginDetails)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails otherAccount \u003d (LoginDetails) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return otherAccount.getUserId().equals(getUserId());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return Objects.hash(userId, userPassword, userRole);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        builder.append(getUserId())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                .append(getUserPassword())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                .append(getUserRole());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/UniqueAccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.exceptions.DuplicateAccountException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * A list of accounts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * An account is considered unique by comparing using {@code LoginDetails#isSameAccount(LoginDetails)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * As such, adding and updating of accounts uses LoginDetails#isSameAccount(LoginDetails)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * for equality so as to ensure that the account being added or updated is unique in terms of details"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * in the UniqueAccountList. However, the removal of an account uses LoginDetails#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * as to ensure that the account with exactly the same user ID and password will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * @see LoginDetails#isSameAccount(LoginDetails)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UniqueAccountList implements Iterable\u003cLoginDetails\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final ObservableList\u003cLoginDetails\u003e internalLoginList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if the list contains an equivalent account as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean contains(LoginDetails toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return internalLoginList.stream().anyMatch(toCheck::isSameAccount);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Adds an account to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * The account must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void add(LoginDetails toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        internalLoginList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Replaces the contents of this list with {@code loginDetails}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * {@code loginDetails} must not contain duplicate accounts."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void setLoginDetails(List\u003cLoginDetails\u003e loginDetails) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireAllNonNull(loginDetails);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!loginDetailsAreUnique(loginDetails)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        internalLoginList.setAll(loginDetails);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Iterator\u003cLoginDetails\u003e iterator() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return internalLoginList.iterator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof UniqueAccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 internalLoginList.equals(((UniqueAccountList) other).internalLoginList));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return internalLoginList.hashCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ObservableList\u003cLoginDetails\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalLoginList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if {@code loginDetails} contains only unique accounts."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private boolean loginDetailsAreUnique(List\u003cLoginDetails\u003e loginDetails) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        for (int i \u003d 0; i \u003c loginDetails.size() - 1; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            for (int j \u003d i + 1; j \u003c loginDetails.size(); j++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                if (loginDetails.get(i).isSameAccount(loginDetails.get(j))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/UserId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Represents an account\u0027s user ID in the login book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUserId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UserId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_USERID_CONSTRAINTS \u003d \"User ID should only contain 9 alphanumeric characters, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    + \" with the first and last character, upper-case only alphabets, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"7 characters in between, all integers, and it should not be blank and not have any spaces\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String USERID_VALIDATION_REGEX \u003d \"[A-Z][0-9]{7}[A-Z]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public final String fullUserId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Constructs a {@code UserId}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param id A valid userid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserId(String id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        checkArgument(isValidUserId(id), MESSAGE_USERID_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        fullUserId \u003d id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if a given string is a valid user ID."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean isValidUserId(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return test.matches(USERID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof UserId // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 fullUserId.equals(((UserId) other).fullUserId)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return fullUserId.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/UserIdContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Tests that a {@code LoginDetails}\u0027s {@code UserId} matches the user ID given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UserIdContainsKeywordsPredicate implements Predicate\u003cLoginDetails\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserIdContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean test(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(loginDetails.getUserId().fullUserId, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof UserIdContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 keywords.equals(((UserIdContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/UserPassword.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Represents an account\u0027s user password in the login book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUserPassword(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UserPassword {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_USERPASSWORD_CONSTRAINTS \u003d \"User password is case-sensitive, and it \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"should not be blank and not have any spaces\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String USERPASSWORD_VALIDATION_REGEX \u003d \"[\\\\S]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public final String fullUserPassword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Constructs a {@code UserPassword}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param pass A valid userpassword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserPassword(String pass) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(pass);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        checkArgument(isValidUserPassword(pass), MESSAGE_USERPASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        fullUserPassword \u003d pass;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if a given string is a valid user password."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean isValidUserPassword(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return test.matches(USERPASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof UserPassword // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 fullUserPassword.equals(((UserPassword) other).fullUserPassword)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return fullUserPassword.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/UserPasswordContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Tests that a {@code LoginDetails}\u0027s {@code UserPassword} matches the input password given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UserPasswordContainsKeywordsPredicate implements Predicate\u003cLoginDetails\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserPasswordContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean test(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                StringUtil.containsWordCheckCase(loginDetails.getUserPassword().fullUserPassword, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof UserPasswordContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 keywords.equals(((UserPasswordContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/UserRole.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Represents an account\u0027s user role in the login book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUserRole(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UserRole {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_USERROLE_CONSTRAINTS \u003d \"User role must be either member, president \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            + \"or treasurer.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String USERROLE_VALIDATION_REGEX \u003d \"\\\\b(member|president|treasurer)\\\\b\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public final String fullUserRole;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Constructs a {@code UserRole}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param role A valid userrole."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserRole(String role) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        checkArgument(isValidUserRole(role), MESSAGE_USERROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        fullUserRole \u003d role;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns true if a given string is a valid user role."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static boolean isValidUserRole(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return test.matches(USERROLE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof UserRole // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 fullUserRole.equals(((UserRole) other).fullUserRole)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return fullUserRole.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/UserRoleContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Tests that a {@code LoginDetails}\u0027s {@code UserRole} matches the input role given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UserRoleContainsKeywordsPredicate implements Predicate\u003cLoginDetails\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public UserRoleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean test(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                StringUtil.containsWordIgnoreCase(loginDetails.getUserRole().fullUserRole, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                || (other instanceof UserRoleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 keywords.equals(((UserRoleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/login/exceptions/DuplicateAccountException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Signals that the operation will result in duplicate LoginDetails (LoginDetails are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * have the same user ID)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class DuplicateAccountException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public DuplicateAccountException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        super(\"Operation would result in duplicate accounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static java.util.stream.Collectors.collectingAndThen;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public List\u003cString\u003e getLowerCaseKeywords() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                .map(String::toLowerCase)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                .collect(collectingAndThen(toList(), ImmutableList::copyOf));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final Skill skill;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final SkillLevel skillLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Skill skill,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                  SkillLevel skillLevel, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skill \u003d skill;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skillLevel \u003d skillLevel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public Skill getSkill() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return skill;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public SkillLevel getSkillLevel() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return skillLevel; }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return true; //memory when you compare between 2 objects"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 13,
      "-": 118,
      "sanjukta99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Skill.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Represents a Person\u0027s skill in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "public class Skill {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public Skill(String skill) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        value \u003d skill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                || (other instanceof Skill // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                \u0026\u0026 value.equals(((Skill) other).value)); // state check"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/SkillLevel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Represents a Skill\u0027s Level in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "public class SkillLevel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public final int skillLevel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public SkillLevel(int skillLevel) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skillLevel \u003d skillLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return Integer.toString(skillLevel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                || (other instanceof SkillLevel // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                \u0026\u0026 skillLevel \u003d\u003d ((SkillLevel) other).skillLevel); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static java.util.stream.Collectors.collectingAndThen;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public List\u003cString\u003e getLowerCaseKeywords() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                .map(String::toLowerCase)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                .collect(collectingAndThen(toList(), ImmutableList::copyOf));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        HashSet\u003cString\u003e tagsAsString \u003d retrievePersonTagsAsString(person);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        for (String s:keywords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            if (tagsAsString.contains(s.toLowerCase())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns a HashSet of String representing a {@code Person}\u0027s Tags"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private HashSet\u003cString\u003e retrievePersonTagsAsString(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        HashSet\u003cString\u003e tagsAsString \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        Set\u003cTag\u003e tags \u003d person.getTags();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        for (Tag tag:tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            tagsAsString.add(tag.toSearchString().toLowerCase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return tagsAsString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/searchhistory/KeywordType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.searchhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * A set of pre-defined keyword types used in searching"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public enum KeywordType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    IncludeNames, ExcludeNames, IncludeTags, ExcludeTags;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/searchhistory/KeywordsBundle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.searchhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * A utility class to store the list of keywords and its type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class KeywordsBundle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private KeywordType type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    KeywordsBundle (KeywordType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public KeywordType getType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/searchhistory/KeywordsHistoryStack.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.searchhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Represents the in-app memory of all keywords and their types that were previously executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "class KeywordsHistoryStack {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private Stack\u003cKeywordsBundle\u003e keywordsBundlesStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    void push(KeywordType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        KeywordsBundle bundle \u003d new KeywordsBundle(type, keywords);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        keywordsBundlesStack.push(bundle);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns a KeywordBundle object that was at the top of the stack"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * and removes it from the stack."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @throws EmptyHistoryException If search history is empty before revert."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    KeywordsBundle pop() throws EmptyHistoryException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return keywordsBundlesStack.pop();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } catch (EmptyStackException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new EmptyHistoryException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    void clear() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        keywordsBundlesStack.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/searchhistory/KeywordsRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.searchhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import com.google.common.collect.TreeMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Represents the in-app memory of all keywords relevant to the current Persons search."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class KeywordsRecord implements ReadOnlyKeywordsRecord {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private TreeMultiset\u003cString\u003e includedNamesSet \u003d TreeMultiset.create();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private TreeMultiset\u003cString\u003e includedTagsSet \u003d TreeMultiset.create();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private TreeMultiset\u003cString\u003e excludedNamesSet \u003d TreeMultiset.create();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private TreeMultiset\u003cString\u003e excludedTagsSet \u003d TreeMultiset.create();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private KeywordsHistoryStack historyStack \u003d new KeywordsHistoryStack();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Clears all keywords in memory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void clearKeywordsHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        includedNamesSet.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        includedTagsSet.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        excludedNamesSet.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        excludedTagsSet.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        historyStack.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Resets in-app memory of keywords back to its previous state."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void undoKeywordsHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        KeywordsBundle bundle \u003d historyStack.pop();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        switch (bundle.getType()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case IncludeNames:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            removeKeywordsFromSet(includedNamesSet, bundle.getKeywords());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case ExcludeNames:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            removeKeywordsFromSet(excludedNamesSet, bundle.getKeywords());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case IncludeTags:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            removeKeywordsFromSet(includedTagsSet, bundle.getKeywords());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case ExcludeTags:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            removeKeywordsFromSet(excludedTagsSet, bundle.getKeywords());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Records keywords according to their type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @param type KeywordType."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @param keywords list of words to be stored in memory."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void recordKeywords (KeywordType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case IncludeNames:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            addKeywordsToSet(includedNamesSet, keywords);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case ExcludeNames:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            addKeywordsToSet(excludedNamesSet, keywords);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case IncludeTags:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            addKeywordsToSet(includedTagsSet, keywords);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        case ExcludeTags:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            addKeywordsToSet(excludedTagsSet, keywords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        updateHistoryStack(type, keywords);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void removeKeywordsFromSet(TreeMultiset\u003cString\u003e set, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            set.remove(keyword);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void addKeywordsToSet(TreeMultiset\u003cString\u003e set, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        set.addAll(keywords);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void updateHistoryStack(KeywordType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        historyStack.push(type, keywords);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public SortedSet\u003cString\u003e getIncludedTags() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return includedTagsSet.elementSet();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public SortedSet\u003cString\u003e getExcludedTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return excludedTagsSet.elementSet();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public SortedSet\u003cString\u003e getIncludedNames() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return includedNamesSet.elementSet();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public SortedSet\u003cString\u003e getExcludedNames() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return excludedNamesSet.elementSet();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/searchhistory/ReadOnlyKeywordsRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.searchhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * An interface for KeywordsRecord that only allows the retrieval of data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public interface ReadOnlyKeywordsRecord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    SortedSet\u003cString\u003e getIncludedTags();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    SortedSet\u003cString\u003e getExcludedTags();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    SortedSet\u003cString\u003e getIncludedNames();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    SortedSet\u003cString\u003e getExcludedNames();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/searchhistory/SearchHistoryManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.searchhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Represents in-memory model for Predicates containing system search logic."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class SearchHistoryManager\u003cT\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final Predicate\u003cT\u003e emptyStackPredicate \u003d predicate -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private Stack\u003cPredicate\u003cT\u003e\u003e searchHistoryStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /** Returns Predicate at top of search history stack if stack is non-empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * If search history stack is empty, a predicate that defaults to true is returned."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @return a Predicate containing the system search logic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private Predicate\u003cT\u003e retrievePredicateAtTopOfStack() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (!searchHistoryStack.empty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return searchHistoryStack.peek();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return emptyStackPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /** Updates system search logic to its next state given a Predicate containing user-defined search logic."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @param newPredicate a Predicate containing user-defined search logic."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void addNewPredicateToStack(Predicate\u003cT\u003e newPredicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (searchHistoryStack.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            searchHistoryStack.push(newPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            Predicate\u003cT\u003e predicate \u003d retrievePredicateAtTopOfStack();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            Predicate\u003cT\u003e updatedPredicate \u003d predicate.and(newPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            searchHistoryStack.push(updatedPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void removeLastPredicateFromStack() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        searchHistoryStack.pop();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /** Returns a Predicate containing system search logic after reverting to its previous state."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * If search history is empty after revert, a predicate that defaults to true is returned."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @return a Predicate containing the system search logic after reverting."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @throws EmptyHistoryException If search history is empty before revert."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public Predicate\u003cT\u003e revertLastSearch() throws EmptyHistoryException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            removeLastPredicateFromStack();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        } catch (EmptyStackException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new EmptyHistoryException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return retrievePredicateAtTopOfStack();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /** Returns a Predicate containing system search logic given a user-defined search logic."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @param predicate a Predicate containing the user-defined search logic."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * @return a Predicate containing the system search logic."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public Predicate\u003cT\u003e executeNewSearch(Predicate\u003cT\u003e predicate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        addNewPredicateToStack(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assert !searchHistoryStack.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return retrievePredicateAtTopOfStack();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns true if search history is empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return searchHistoryStack.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void clearSearchHistory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        searchHistoryStack.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (!(obj instanceof SearchHistoryManager)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        SearchHistoryManager other \u003d (SearchHistoryManager) obj;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return searchHistoryStack.size() \u003d\u003d other.searchHistoryStack.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/searchhistory/exceptions/EmptyHistoryException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.searchhistory.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * Signals that an illegal operation has been performed on an empty search history"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class EmptyHistoryException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Format state as text for searching."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public String toSearchString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPassword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRole;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} and {@code LoginBook} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final Skill EMPTY_SKILL \u003d new Skill(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final SkillLevel EMPTY_SKILLLEVEL \u003d new SkillLevel(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Skill(\"Photography\"), new SkillLevel(90),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Skill(\"Videography\"), new SkillLevel(50),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Skill(\"Design\"), new SkillLevel(45),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Skill(\"Photoshop\"), new SkillLevel(50),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Skill(\"Stage Managing\"), new SkillLevel(30),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Skill(\"Public Speaking\"), new SkillLevel(80),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static LoginDetails[] getSampleLoginDetails() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new LoginDetails[] {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            new LoginDetails(new UserId(\"A1234567M\"), new UserPassword(\"zaq1xsw2cde3\"), new UserRole(\"treasurer\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            new LoginDetails(new UserId(\"A1234568M\"), new UserPassword(\"1qaz2wsx3edc\"), new UserRole(\"president\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static ReadOnlyLoginBook getSampleLoginBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook sampleLb \u003d new LoginBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        for (LoginDetails sampleAccount : getSampleLoginDetails()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            sampleLb.createAccount(sampleAccount);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return sampleLb;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 22,
      "derpyplops": 12,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LoginBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Represents a storage for {@link seedu.address.model.LoginBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public interface LoginBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Path getLoginBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns LoginBook data as a {@link ReadOnlyLoginBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Optional\u003cReadOnlyLoginBook\u003e readLoginBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @see #getLoginBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Optional\u003cReadOnlyLoginBook\u003e readLoginBook(Path loginFilePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Saves the given {@link ReadOnlyLoginBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param loginBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void saveLoginBook(ReadOnlyLoginBook loginBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @see #saveLoginBook(ReadOnlyLoginBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void saveLoginBook(ReadOnlyLoginBook loginBook, Path loginFilePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.events.model.LoginBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public interface Storage extends LoginBookStorage, AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Path getLoginBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    Optional\u003cReadOnlyLoginBook\u003e readLoginBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void saveLoginBook(ReadOnlyLoginBook loginBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Saves the current version of the Login Book to the hard disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void handleLoginBookChangedEvent(LoginBookChangedEvent abce);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 20,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.events.model.LoginBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private LoginBookStorage loginBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public StorageManager(LoginBookStorage loginBookStorage, AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.loginBookStorage \u003d loginBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LoginBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Path getLoginBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return loginBookStorage.getLoginBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Optional\u003cReadOnlyLoginBook\u003e readLoginBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return readLoginBook(loginBookStorage.getLoginBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Optional\u003cReadOnlyLoginBook\u003e readLoginBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return loginBookStorage.readLoginBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void saveLoginBook(ReadOnlyLoginBook loginBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        saveLoginBook(loginBook, loginBookStorage.getLoginBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void saveLoginBook(ReadOnlyLoginBook loginBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBookStorage.saveLoginBook(loginBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void handleLoginBookChangedEvent(LoginBookChangedEvent event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            saveLoginBook(event.data);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 45,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPassword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRole;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * JAXB-friendly version of the Account."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class XmlAccount {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MISSING_ACCOUNT_FIELD_MESSAGE_FORMAT \u003d \"LoginDetail\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private String userId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private String userPassword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private String userRole;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Constructs an XmlAccount."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public XmlAccount() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Constructs an {@code XmlAccount} with the given account details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public XmlAccount(String userId, String userPassword, String userRole) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userPassword \u003d userPassword;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userRole \u003d userRole;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Converts a given LoginDetails into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAccount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public XmlAccount(LoginDetails source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userId \u003d source.getUserId().fullUserId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userPassword \u003d source.getUserPassword().fullUserPassword;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userRole \u003d source.getUserRole().fullUserRole;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Converts this jaxb-friendly account object into the model\u0027s LoginDetails object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the account"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginDetails toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (userId \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ACCOUNT_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    UserId.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!UserId.isValidUserId(userId)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new IllegalValueException(UserId.MESSAGE_USERID_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        final UserId modelUserId \u003d new UserId(userId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (userPassword \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ACCOUNT_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                          UserPassword.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!UserPassword.isValidUserPassword(userPassword)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new IllegalValueException(UserPassword.MESSAGE_USERPASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        final UserPassword modelUserPassword \u003d new UserPassword(userPassword);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!UserRole.isValidUserRole(userRole)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new IllegalValueException(UserRole.MESSAGE_USERROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        final UserRole modelUserRole \u003d new UserRole(userRole);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new LoginDetails(modelUserId, modelUserPassword, modelUserRole);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!(other instanceof XmlAccount)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount otherLoginDetails \u003d (XmlAccount) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return Objects.equals(userId, otherLoginDetails.userId)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 Objects.equals(userPassword, otherLoginDetails.userPassword)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \u0026\u0026 Objects.equals(userRole, otherLoginDetails.userRole);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private String skill;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private String skillLevel; // TODO: Determine if this needs to be a string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skill \u003d source.getSkill().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skillLevel \u003d Integer.toString(source.getSkillLevel().skillLevel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (skill \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Skill.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        if (skillLevel \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                    SkillLevel.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        final Skill modelSkill \u003d new Skill(skill);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        final SkillLevel modelSkillLevel \u003d new SkillLevel(5); // TODO: Change this to a real value."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelSkill, modelSkillLevel, modelTags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 21,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlLoginBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * A class to access LoginBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class XmlLoginBookStorage implements LoginBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlLoginBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Path loginFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public XmlLoginBookStorage(Path loginFilePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.loginFilePath \u003d loginFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Path getLoginBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return loginFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Optional\u003cReadOnlyLoginBook\u003e readLoginBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return readLoginBook(loginFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Similar to {@link #readLoginBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param loginFilePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public Optional\u003cReadOnlyLoginBook\u003e readLoginBook(Path loginFilePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                                                FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(loginFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!Files.exists(loginFilePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            logger.info(\"LoginBook file \" + loginFilePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlSerializableLoginBook xmlLoginBook \u003d XmlLoginFileStorage.loadDataFromSaveFile(loginFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return Optional.of(xmlLoginBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            logger.info(\"Illegal values found in \" + loginFilePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void saveLoginBook(ReadOnlyLoginBook loginBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        saveLoginBook(loginBook, loginFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Similar to {@link #saveLoginBook(ReadOnlyLoginBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @param loginFilePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void saveLoginBook(ReadOnlyLoginBook loginBook, Path loginFilePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(loginBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        requireNonNull(loginFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        FileUtil.createIfMissing(loginFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlLoginFileStorage.saveDataToFile(loginFilePath, new XmlSerializableLoginBook(loginBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlLoginFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Stores loginbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class XmlLoginFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Saves the given loginbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableLoginBook loginBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            XmlUtil.saveDataToFile(file, loginBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns login book in the file or an empty login book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static XmlSerializableLoginBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                                                  FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableLoginBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableLoginBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * An Immutable LoginBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "@XmlRootElement(name \u003d \"loginbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class XmlSerializableLoginBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"LoginDetails list contains duplicate account(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private List\u003cXmlAccount\u003e accounts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Creates an empty XmlSerializableLoginBook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public XmlSerializableLoginBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public XmlSerializableLoginBook(ReadOnlyLoginBook src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        accounts.addAll(src.getLoginDetailsList().stream().map(XmlAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Converts this loginbook into the model\u0027s {@code LoginBook} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * {@code XmlAccount}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook loginBook \u003d new LoginBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        for (XmlAccount l : accounts) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            LoginDetails loginDetails \u003d l.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            if (loginBook.hasAccount(loginDetails)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            loginBook.createAccount(loginDetails);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return loginBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (!(other instanceof XmlSerializableLoginBook)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return accounts.equals(((XmlSerializableLoginBook) other).accounts);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 4,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javax.swing.JOptionPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Provides the UI for the login process."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "class LoginWindow {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    LoginWindow() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * method to kick-start the login process."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void initializeLogin(Logic logic) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String loginInput \u003d JOptionPane.showInputDialog(\"Please login first by entering login credentials:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        if (loginInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            logic.execute(loginInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.LoginManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Starts a pop-up window which prompts the user for input of login credentials."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private void initializeLoginProcess() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginWindow loginWindow \u003d new LoginWindow();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginWindow.initializeLogin(logic);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            initializeLoginProcess();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } while(!(LoginManager.getIsLoginSuccessful()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 19,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private Label skill;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private Label skillLevel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skill.setText(person.getSkill().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skillLevel.setText(Integer.toString(person.getSkillLevel().skillLevel)); // TODO: Is there a better way?"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 6,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    void start(Stage primaryStage, Model model, CommandHistory history);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void start(Stage primaryStage, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 3,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "      \u003cLabel fx:id\u003d\"skill\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$skill\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "      \u003cLabel fx:id\u003d\"skillLevel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$skillLevel\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003eSkillsets\u003c/skill\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e5\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003eSkillsets\u003c/skill\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e5\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlLoginBookStorageTest/NotXmlFormatLoginBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "Chocological": 1
    }
  },
  {
    "path": "src/test/data/XmlLoginBookStorageTest/invalidAccountLoginBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003cloginbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c!-- account with invalid user ID field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eAA234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/loginbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 9
    }
  },
  {
    "path": "src/test/data/XmlLoginBookStorageTest/invalidAndValidAccountLoginBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003cloginbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c!-- Valid account --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eA1234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c!-- account with invalid user ID field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eAA234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/loginbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 15
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003ePhotography\u003c/skill\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e20\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003eExcel\u003c/skill\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e30\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003eWord\u003c/skill\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e40\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003eDance\u003c/skill\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e50\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003eActing\u003c/skill\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e60\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003eManaging\u003c/skill\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e70\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill\u003eJava\u003c/skill\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel\u003e80\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 14,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoginBookTest/invalidAccountsLoginBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c!-- Account with invalid user ID field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003cloginbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eAA234565M\u003c/userId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/loginbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidLoginDetailField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c!-- Account with an invalid user id field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003clogindetail\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserId\u003eAA234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/logindetail\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingLoginDetailField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c!-- Login detail with missing user ID field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003clogindetail\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/logindetail\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskill isPrivate\u003d\"false\"\u003e\u003c/skill\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        \u003cskillLevel isPrivate\u003d\"false\"\u003e\u003c/skillLevel\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 18,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validLoginBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003cloginbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eA1234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003caccounts\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserId\u003eA1234568M\u003c/userId\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserPassword\u003e1qaz2wsx3edc\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003c/accounts\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/loginbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 13
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validLoginDetails.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003clogindetail\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserId\u003eA1234567M\u003c/userId\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserPassword\u003ezaq1xsw2cde3\u003c/userPassword\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    \u003cuserRole\u003emember\u003c/userRole\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "\u003c/logindetail\u003e"
      }
    ],
    "authorContributionMap": {
      "Chocological": 6
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private static final String SKILL_FIELD_ID \u003d \"#skill\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private static final String SKILLLEVEL_FIELD_ID \u003d \"#skillLevel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final Label skillLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private final Label skillLevelLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skillLabel \u003d getChildNode(SKILL_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skillLevelLabel \u003d getChildNode(SKILLLEVEL_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public String getSkill() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return skillLabel.getText(); }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public String getSkillLevel() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return skillLevelLabel.getText(); }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 12,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBook readStorageLoginBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return new LoginBook(storage.readLoginBook().get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"Data is not in the LoginBook format.\", dce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model copy \u003d new ModelManager((model.getLoginBook()), (model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ModelHelper.setFilteredLoginList(copy, model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ui.start(primaryStage, model, history);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 19,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.storage.XmlAccount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.storage.XmlSerializableLoginBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.LoginBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path EMPTY_LOGIN_FILE \u003d TEST_DATA_FOLDER.resolve(\"emptyLogin.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path MISSING_LOGIN_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingLogin.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path VALID_LOGIN_FILE \u003d TEST_DATA_FOLDER.resolve(\"validLoginBook.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path MISSING_LOGINDETAILS_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingLoginDetailField.xml\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path INVALID_LOGINDETAILS_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLoginDetailField.xml\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path VALID_LOGINDETAILS_FILE \u003d TEST_DATA_FOLDER.resolve(\"validLoginDetails.xml\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path TEMP_LOGIN_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempLoginBook.xml\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String INVALID_USERID \u003d \"AA234567M\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String VALID_USERID \u003d \"A1234567M\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String VALID_USERPASSWORD \u003d \"zaq1xsw2cde3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String VALID_USERROLE \u003d \"member\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.getDataFromFile(null, LoginBook.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_LOGIN_FILE, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_LOGIN_FILE, LoginBook.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_LOGIN_FILE, LoginBook.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook dataFromLoginFile \u003d XmlUtil.getDataFromFile(VALID_LOGIN_FILE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                XmlSerializableLoginBook.class).toModelType();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(2, dataFromLoginFile.getLoginDetailsList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void xmlAccountFromFile_fileWithMissingLoginDetailsField_validResult() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount actualLoginDetail \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                MISSING_LOGINDETAILS_FIELD_FILE, XmlAccountWithRootElement.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount expectedLoginDetail \u003d new XmlAccount(null, VALID_USERPASSWORD, VALID_USERROLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(expectedLoginDetail, actualLoginDetail);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void xmlAccountFromFile_fileWithInvalidLoginDetailsField_validResult() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount actualLoginDetail \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                INVALID_LOGINDETAILS_FIELD_FILE, XmlAccountWithRootElement.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount expectedLoginDetail \u003d new XmlAccount(INVALID_USERID, VALID_USERPASSWORD, VALID_USERROLE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(expectedLoginDetail, actualLoginDetail);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void xmlAccountFromFile_fileWithValidLoginDetails_validResult() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount actualLoginDetail \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                VALID_LOGINDETAILS_FILE, XmlAccountWithRootElement.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount expectedLoginDetail \u003d new XmlAccount(VALID_USERID, VALID_USERPASSWORD, VALID_USERROLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(expectedLoginDetail, actualLoginDetail);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.saveDataToFile(null, new LoginBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_LOGIN_FILE, null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_LOGIN_FILE, new LoginBook());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        FileUtil.createFile(TEMP_LOGIN_FILE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlSerializableLoginBook loginDataToWrite \u003d new XmlSerializableLoginBook(new LoginBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_LOGIN_FILE, loginDataToWrite);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlSerializableLoginBook loginDataFromFile \u003d XmlUtil.getDataFromFile(TEMP_LOGIN_FILE,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                XmlSerializableLoginBook.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(loginDataToWrite, loginDataFromFile);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBookBuilder accountBuilder \u003d new LoginBookBuilder(new LoginBook());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginDataToWrite \u003d new XmlSerializableLoginBook("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                accountBuilder.withLoginDetails(new AccountBuilder().build()).build());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_LOGIN_FILE, loginDataToWrite);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginDataFromFile \u003d XmlUtil.getDataFromFile(TEMP_LOGIN_FILE, XmlSerializableLoginBook.class);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(loginDataToWrite, loginDataFromFile);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAccount}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @XmlRootElement(name \u003d \"logindetail\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static class XmlAccountWithRootElement extends XmlAccount {}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 72,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.ReadOnlyKeywordsRecord;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void createAccount(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean hasAccount(LoginDetails credentials) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ReadOnlyLoginBook getLoginBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ObservableList\u003cLoginDetails\u003e getFilteredLoginDetailsList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public ObservableList\u003cClubBudgetElements\u003e getFilteredClubsList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public ObservableList\u003cFinalClubBudget\u003e getFilteredClubBudgetsList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void updateFilteredLoginDetailsList(Predicate\u003cLoginDetails\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public void updateFilteredClubBudgetsList(Predicate\u003cFinalClubBudget\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public boolean hasClub(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public void addClub(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public boolean hasClubBudget(FinalClubBudget clubBudget) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public void addClubBudget(FinalClubBudget clubBudget) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        public void revertLastSearch() throws EmptyHistoryException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        public void executeSearch(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        public void resetSearchHistoryToInitialState() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        public void recordKeywords(KeywordType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        public ReadOnlyKeywordsRecord getReadOnlyKeywordsRecord() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 30,
      "Chocological": 27,
      "-": 203,
      "sanjukta99": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddSkillLevelCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_LEVEL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_LEVEL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "content": "//@@author derpyplops-reused"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "//{The implementation is a simple renaming of the \"remark\" example in the Dev Guide, extended slightly"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "// Code from it is also reused throughout the project."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "// Which will be extended later to other uses.}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AddSkillLevelCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derpyplops"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "public class AddSkillLevelCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private static final String SKILL_STUB \u003d \"Some skill\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private static final int SKILLLEVEL_STUB \u003d 99;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void execute_addAddSkillLevelUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withSkill(SKILL_STUB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(editedPerson.getSkill().value),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new SkillLevel(editedPerson.getSkillLevel().skillLevel)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        String expectedMessage \u003d String.format(AddSkillLevelCommand.MESSAGE_ADD_SKILL_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandSuccess(addSkillCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void execute_deleteAddSkillLevelUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withSkill(\"\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(editedPerson.getSkill().value),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new SkillLevel(editedPerson.getSkillLevel().skillLevel)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        String expectedMessage \u003d String.format(AddSkillLevelCommand.MESSAGE_DELETE_SKILL_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandSuccess(addSkillCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                .withSkill(SKILL_STUB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(editedPerson.getSkill().value),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new SkillLevel(editedPerson.getSkillLevel().skillLevel)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        String expectedMessage \u003d String.format(AddSkillLevelCommand.MESSAGE_ADD_SKILL_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandSuccess(addSkillCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(VALID_SKILL_BOB), new SkillLevel(VALID_SKILL_LEVEL_BOB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandFailure(addSkillCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(VALID_SKILL_BOB), new SkillLevel(VALID_SKILL_LEVEL_BOB));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandFailure(addSkillCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person personToModify \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person modifiedPerson \u003d new PersonBuilder(personToModify).withSkill(SKILL_STUB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(SKILL_STUB), new SkillLevel(SKILLLEVEL_STUB));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // skill -\u003e first person skill changed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        addSkillCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // redo -\u003e same first person modified again"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(\"\"), new SkillLevel(SKILLLEVEL_STUB));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandFailure(addSkillCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * 1. Modifies {@code Person#skill} from a filtered list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * 2. Undo the modification."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand addSkillCommand \u003d new AddSkillLevelCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(SKILL_STUB), new SkillLevel(SKILLLEVEL_STUB));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person personToModify \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        Person modifiedPerson \u003d new PersonBuilder(personToModify).withSkill(SKILL_STUB).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // skill -\u003e modifies second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        addSkillCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // redo -\u003e modifies same second person in unfiltered person list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        final AddSkillLevelCommand standardCommand \u003d new AddSkillLevelCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(VALID_SKILL_AMY), new SkillLevel(VALID_SKILL_LEVEL_AMY));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand commandWithSameValues \u003d new AddSkillLevelCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(VALID_SKILL_AMY), new SkillLevel(VALID_SKILL_LEVEL_AMY));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertFalse(standardCommand.equals(new AddSkillLevelCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(VALID_SKILL_AMY), new SkillLevel(VALID_SKILL_LEVEL_AMY))));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        // different skill -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertFalse(standardCommand.equals(new AddSkillLevelCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                new Skill(VALID_SKILL_BOB), new SkillLevel(VALID_SKILL_LEVEL_BOB))));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "derpyplops": 202
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLUB_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_TURNOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_EVENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String VALID_ID_ACCOUNT1 \u003d \"A1234567M\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String VALID_ID_ACCOUNT2 \u003d \"A1234568M\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String VALID_PASSWORD_ACCOUNT1 \u003d \"zaq1xsw2cde3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String VALID_PASSWORD_ACCOUNT2 \u003d \"1qaz2wsx3edc\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String VALID_ROLE_ACCOUNT1 \u003d \"member\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String VALID_ROLE_ACCOUNT2 \u003d \"treasurer\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String ID_ACCOUNT1_DESC \u003d \" \" + VALID_ID_ACCOUNT1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String ID_ACCOUNT2_DESC \u003d \" \" + VALID_ID_ACCOUNT2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String PASSWORD_ACCOUNT1_DESC \u003d \" \" + VALID_PASSWORD_ACCOUNT1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String PASSWORD_ACCOUNT2_DESC \u003d \" \" + VALID_PASSWORD_ACCOUNT2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String ROLE_ACCOUNT1_DESC \u003d \" \" + VALID_ROLE_ACCOUNT1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String ROLE_ACCOUNT2_DESC \u003d \" \" + VALID_ROLE_ACCOUNT2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String INVALID_USERID \u003d \" \" + \"AA234567M\"; // \u0027A\u0027 not allowed where it is supposed to be a digit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String INVALID_USERROLE \u003d \" \" + \"janitor\"; // no such role as a \u0027janitor\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String VALID_SKILL_AMY \u003d \"Photography\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String VALID_SKILL_BOB \u003d \"Stage Manager\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final int VALID_SKILL_LEVEL_AMY \u003d 5;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final int VALID_SKILL_LEVEL_BOB \u003d 37;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String VALID_CLUB_NAME_COMPUTING \u003d \"Computing Club\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String VALID_CLUB_NAME_ECE \u003d \"ECE Club\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String VALID_EXPECTED_TURNOUT_COMPUTING \u003d \"200\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String VALID_EXPECTED_TURNOUT_ECE \u003d \"300\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String VALID_NUMBER_OF_EVENTS_COMPUTING \u003d \"5\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String VALID_NUMBER_OF_EVENTS_ECE \u003d \"7\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String CLUB_NAME_DESC_COMPUTING \u003d \" \" + PREFIX_CLUB_NAME + VALID_CLUB_NAME_COMPUTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String CLUB_NAME_DESC_ECE \u003d \" \" + PREFIX_CLUB_NAME + VALID_CLUB_NAME_ECE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String EXPECTED_TURNOUT_DESC_COMPUTING \u003d \" \" + PREFIX_EXPECTED_TURNOUT"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + VALID_EXPECTED_TURNOUT_COMPUTING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String EXPECTED_TURNOUT_DESC_ECE \u003d \" \" + PREFIX_EXPECTED_TURNOUT + VALID_EXPECTED_TURNOUT_ECE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String NUMBER_OF_EVENTS_DESC_COMPUTING \u003d \" \" + PREFIX_NUMBER_OF_EVENTS"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + VALID_NUMBER_OF_EVENTS_COMPUTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String NUMBER_OF_EVENTS_DESC_ECE \u003d \" \" + PREFIX_NUMBER_OF_EVENTS + VALID_NUMBER_OF_EVENTS_ECE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String INVALID_CLUB_NAME_DESC \u003d \" \" + PREFIX_CLUB_NAME"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"Comput!ng Club\"; // \u0027!\u0027 not allowed in club names"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String INVALID_EXPECTED_TURNOUT_DESC \u003d \" \" + PREFIX_EXPECTED_TURNOUT"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"10a\"; // \u0027a\u0027 not allowed in expected turnout"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String INVALID_NUMBER_OF_EVENTS_DESC \u003d \" \" + PREFIX_NUMBER_OF_EVENTS"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            + \"5!\"; // \u0027!\u0027 not allowed in number of events"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * - the login book and the filtered account list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void assertLoginCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                 CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook expectedLoginBook \u003d new LoginBook(actualModel.getLoginBook());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        List\u003cLoginDetails\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            assertEquals(expectedLoginBook, actualModel.getLoginBook());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.executeSearch(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "Chocological": 46,
      "derpyplops": 4,
      "-": 140,
      "sanjukta99": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateAccountCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CreateAccountCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class CreateAccountCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void execute_newAccount_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails validAccount \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.createAccount(validAccount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(new CreateAccountCommand(validAccount), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                String.format(CreateAccountCommand.MESSAGE_SUCCESS, validAccount), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void execute_duplicateAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails accountInList \u003d model.getLoginBook().getLoginDetailsList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandFailure(new CreateAccountCommand(accountInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                CreateAccountCommand.MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateAccountCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.ReadOnlyKeywordsRecord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.searchhistory.SearchHistoryManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class CreateAccountCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void constructor_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        new CreateAccountCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void execute_accountAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CreateAccountCommandTest.ModelStubAcceptingAccountAdded modelStub \u003d new CreateAccountCommandTest"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                                            .ModelStubAcceptingAccountAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails validAccount \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CommandResult commandResult \u003d new CreateAccountCommand(validAccount)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                               .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(String.format(CreateAccountCommand.MESSAGE_SUCCESS, validAccount), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(Arrays.asList(validAccount), modelStub.accountsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void execute_duplicateAccount_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails validAccount \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CreateAccountCommand createAccountCommand \u003d new CreateAccountCommand(validAccount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAccount(validAccount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expectMessage(CreateAccountCommand.MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        createAccountCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails loginDetailOne \u003d new AccountBuilder().withUserId(\"A1234567M\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails loginDetailTwo \u003d new AccountBuilder().withUserId(\"A1234568M\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CreateAccountCommand createAccountOneCommand \u003d new CreateAccountCommand(loginDetailOne);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CreateAccountCommand createAccountTwoCommand \u003d new CreateAccountCommand(loginDetailTwo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(createAccountOneCommand.equals(createAccountOneCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CreateAccountCommand createAccountOneCommandCopy \u003d new CreateAccountCommand(loginDetailOne);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(createAccountOneCommand.equals(createAccountOneCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(createAccountOneCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(createAccountOneCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(createAccountOneCommand.equals(createAccountTwoCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void createAccount(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean hasAccount(LoginDetails credentials) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ReadOnlyLoginBook getLoginBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ObservableList\u003cLoginDetails\u003e getFilteredLoginDetailsList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ObservableList\u003cClubBudgetElements\u003e getFilteredClubsList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ObservableList\u003cFinalClubBudget\u003e getFilteredClubBudgetsList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void updateFilteredLoginDetailsList(Predicate\u003cLoginDetails\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void updateFilteredClubBudgetsList(Predicate\u003cFinalClubBudget\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean hasClub(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void addClub(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean hasClubBudget(FinalClubBudget clubBudget) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void addClubBudget(FinalClubBudget clubBudget) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void revertLastSearch() throws EmptyHistoryException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void executeSearch(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void resetSearchHistoryToInitialState() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        public void recordKeywords(KeywordType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        public ReadOnlyKeywordsRecord getReadOnlyKeywordsRecord() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public SearchHistoryManager getSearchHistoryManager() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * A Model stub that contains a single account."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private class ModelStubWithAccount extends CreateAccountCommandTest.ModelStub {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        private final LoginDetails loginDetails;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ModelStubWithAccount(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            requireNonNull(loginDetails);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            this.loginDetails \u003d loginDetails;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean hasAccount(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            requireNonNull(loginDetails);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return this.loginDetails.isSameAccount(loginDetails);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * A Model stub that always accept the account being added."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private class ModelStubAcceptingAccountAdded extends CreateAccountCommandTest.ModelStub {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        final ArrayList\u003cLoginDetails\u003e accountsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public boolean hasAccount(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            requireNonNull(loginDetails);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return accountsAdded.stream().anyMatch(loginDetails::isSameAccount);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void createAccount(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            requireNonNull(loginDetails);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            accountsAdded.add(loginDetails);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ReadOnlyLoginBook getLoginBook() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return new LoginBook();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 13,
      "Chocological": 278
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.executeSearch(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "Chocological": 6,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                               new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                               new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                               new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                               new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                               new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoginBook(model.getLoginBook()),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                               new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 15,
      "-": 240
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JOHN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KHOR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.SEGWIT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalTaggedAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.testutil.KeywordsOutputUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLoginBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                                                   getTypicalTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"third\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate fourthPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"fourth\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindPersonSubCommand(firstPredicate, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindPersonSubCommand(secondPredicate, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand findThirdCommand \u003d new FindTagSubCommand(thirdPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand findFourthCommand \u003d new FindTagSubCommand(fourthPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(findThirdCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindPersonSubCommand(firstPredicate, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand findThirdCommandCopy \u003d new FindTagSubCommand(thirdPredicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(findThirdCommand.equals(findThirdCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(findFourthCommand.equals(4));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(findThirdCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        //different tag -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(findFourthCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        //different object -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(findFirstCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(null, null, null, null), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNameContainsKeywordsPredicate(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand command \u003d new FindPersonSubCommand(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void execute_excludeMultipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(null, null, null, Arrays.asList(\"kurz\", \"elle\", \"kunz\")), 7);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNameContainsKeywordsPredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand command \u003d new FindPersonSubCommand(predicate, true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(predicate.negate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL, GEORGE, JOHN, SEGWIT, KHOR), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(null, Arrays.asList(\"kurz\", \"elle\", \"kunz\"), null, null), 3);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNameContainsKeywordsPredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand command \u003d new FindPersonSubCommand(predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void execute_searchByTag_multiplePersonsFound() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(Arrays.asList(VALID_TAG_FRIEND), null, null, null), 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d prepareTagContainsKeywordsPredicate(VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand command \u003d new FindTagSubCommand(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(Arrays.asList(SEGWIT, KHOR), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void execute_excludeSearchByTag_multiplePersonsFound() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(null, null,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                Collections.singletonList(VALID_TAG_HUSBAND), null), 9);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d prepareTagContainsKeywordsPredicate(VALID_TAG_HUSBAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand command \u003d new FindTagSubCommand(predicate, true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(predicate.negate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, JOHN, KHOR),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                model.getFilteredPersonList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void execute_searchByTag_onePersonFound() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(Collections.singletonList(VALID_TAG_HUSBAND),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                null, null, null), 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d prepareTagContainsKeywordsPredicate(VALID_TAG_HUSBAND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand command \u003d new FindTagSubCommand(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(Arrays.asList(SEGWIT), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void execute_twoBackToBackFindCommand_onePersonFound() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String firstExpectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(Collections.singletonList(VALID_TAG_FRIEND),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                null, null, null), 2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        String secondExpectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                + KeywordsOutputUtil.getOutputString(Collections.singletonList(VALID_TAG_FRIEND),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                Collections.singletonList(\"choo\"), null, null), 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d prepareTagContainsKeywordsPredicate(VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand firstCommand \u003d new FindTagSubCommand(firstPredicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(firstPredicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(firstCommand, model, commandHistory, firstExpectedMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(Arrays.asList(SEGWIT, KHOR), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d prepareNameContainsKeywordsPredicate(\"Choo\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand secondCommand \u003d new FindPersonSubCommand(secondPredicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.executeSearch(secondPredicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(secondCommand, model, commandHistory, secondExpectedMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(Arrays.asList(SEGWIT), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNameContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Parses {@code userInput} into a {@code TagContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private TagContainsKeywordsPredicate prepareTagContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 123,
      "Chocological": 1,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getLoginBook(), model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginUserIdPasswordRoleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LOGIN_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.LOGINDETAIL1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalTaggedAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserIdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPasswordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.searchhistory.SearchHistoryManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code LoginUserIdPasswordRoleCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginUserIdPasswordRoleCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLoginBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            getTypicalTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private SearchHistoryManager searchHistoryManager \u003d new SearchHistoryManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate firstIdPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserIdContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate secondIdPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserIdContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate thirdPasswordPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserPasswordContainsKeywordsPredicate(Collections.singletonList(\"third\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate fourthPasswordPredicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserPasswordContainsKeywordsPredicate(Collections.singletonList(\"fourth\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate fifthRolePredicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserRoleContainsKeywordsPredicate(Collections.singletonList(\"fifth\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate sixthRolePredicate \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new UserRoleContainsKeywordsPredicate(Collections.singletonList(\"sixth\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand loginFirstCommand \u003d new LoginUserIdPasswordRoleCommand(firstIdPredicate,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                thirdPasswordPredicate, fifthRolePredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand loginSecondCommand \u003d new LoginUserIdPasswordRoleCommand(secondIdPredicate,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                fourthPasswordPredicate, sixthRolePredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(loginFirstCommand.equals(loginFirstCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(loginSecondCommand.equals(loginSecondCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand loginFirstCommandCopy \u003d new LoginUserIdPasswordRoleCommand(firstIdPredicate,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                thirdPasswordPredicate, fifthRolePredicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(loginFirstCommand.equals(loginFirstCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand loginSecondCommandCopy \u003d new LoginUserIdPasswordRoleCommand(secondIdPredicate,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                fourthPasswordPredicate, sixthRolePredicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(loginSecondCommand.equals(loginSecondCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(loginFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(loginSecondCommand.equals(4));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(loginFirstCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(loginSecondCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // different login details -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(loginFirstCommand.equals(loginSecondCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredAccountList_zeroParameters_loginFailed() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate idPredicate \u003d prepareUserIdContainsKeywordsPredicate(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate passwordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate rolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\" \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand command \u003d new LoginUserIdPasswordRoleCommand(idPredicate,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                passwordPredicate, rolePredicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedIdPredicate \u003d getMostUpdatedIdPredicate(idPredicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedIdPredicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedPasswordPredicate \u003d getMostUpdatedPasswordPredicate(passwordPredicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedPasswordPredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedRolePredicate \u003d getMostUpdatedRolePredicate(rolePredicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedRolePredicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredAccountList_correctLoginDetails_loginSuccessful() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate idPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234561M\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate passwordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zaq1xsw2cde3\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate rolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"member\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand command \u003d new LoginUserIdPasswordRoleCommand(idPredicate,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                passwordPredicate, rolePredicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedIdPredicate \u003d getMostUpdatedIdPredicate(idPredicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedIdPredicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedPasswordPredicate \u003d getMostUpdatedPasswordPredicate(passwordPredicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedPasswordPredicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedRolePredicate \u003d getMostUpdatedRolePredicate(rolePredicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedRolePredicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredAccountList_wrongUserId_loginFailed() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate idPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234560M\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate passwordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zaq1xsw2cde3\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate rolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"member\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand command \u003d new LoginUserIdPasswordRoleCommand(idPredicate,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                passwordPredicate, rolePredicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedIdPredicate \u003d getMostUpdatedIdPredicate(idPredicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedIdPredicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedPasswordPredicate \u003d getMostUpdatedPasswordPredicate(passwordPredicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedPasswordPredicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedRolePredicate \u003d getMostUpdatedRolePredicate(rolePredicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedRolePredicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertNotEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredAccountList_wrongUserPassword_loginFailed() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate idPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234561M\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate passwordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zwevwrvrrbre\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate rolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"member\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand command \u003d new LoginUserIdPasswordRoleCommand(idPredicate,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                passwordPredicate, rolePredicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedIdPredicate \u003d getMostUpdatedIdPredicate(idPredicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedIdPredicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedPasswordPredicate \u003d getMostUpdatedPasswordPredicate(passwordPredicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedPasswordPredicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedRolePredicate \u003d getMostUpdatedRolePredicate(rolePredicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedRolePredicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertNotEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredAccountList_wrongUserRole_loginFailed() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate idPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234561M\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate passwordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zaq1xsw2cde3\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate rolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"treasurer\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand command \u003d new LoginUserIdPasswordRoleCommand(idPredicate,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                passwordPredicate, rolePredicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedIdPredicate \u003d getMostUpdatedIdPredicate(idPredicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedIdPredicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedPasswordPredicate \u003d getMostUpdatedPasswordPredicate(passwordPredicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedPasswordPredicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedRolePredicate \u003d getMostUpdatedRolePredicate(rolePredicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedRolePredicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertNotEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredAccountList_multipleLoginTriesWrongLoginDetails_loginFailed() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate firstIdPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234561M\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate firstPasswordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zaq1xsw2cde3\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate firstRolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"treasurer\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand firstCommand \u003d new LoginUserIdPasswordRoleCommand(firstIdPredicate,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                firstPasswordPredicate, firstRolePredicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedFirstIdPredicate \u003d getMostUpdatedIdPredicate(firstIdPredicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedFirstIdPredicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedFirstPasswordPredicate \u003d getMostUpdatedPasswordPredicate(firstPasswordPredicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedFirstPasswordPredicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedFirstRolePredicate \u003d getMostUpdatedRolePredicate(firstRolePredicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedFirstRolePredicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(firstCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertNotEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate secondIdPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234561M\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate secondPasswordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zaq1xsw2cde3\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate secondRolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"treasurer\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand secondCommand \u003d new LoginUserIdPasswordRoleCommand(secondIdPredicate,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                secondPasswordPredicate, secondRolePredicate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedSecondIdPredicate \u003d getMostUpdatedIdPredicate(secondIdPredicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedSecondIdPredicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedSecondPasswordPredicate \u003d getMostUpdatedPasswordPredicate(secondPasswordPredicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedSecondPasswordPredicate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedSecondRolePredicate \u003d getMostUpdatedRolePredicate(secondRolePredicate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedSecondRolePredicate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(secondCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertNotEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void updateFilteredAccountList_multipleLoginTriesFirstWrongSecondCorrect_loginSuccessful() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOGIN_LISTED_OVERVIEW);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate firstIdPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234561M\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate firstPasswordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zaq1xsw2cde3\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate firstRolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"treasurer\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand firstCommand \u003d new LoginUserIdPasswordRoleCommand(firstIdPredicate,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                firstPasswordPredicate, firstRolePredicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedFirstIdPredicate \u003d getMostUpdatedIdPredicate(firstIdPredicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedFirstIdPredicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedFirstPasswordPredicate \u003d getMostUpdatedPasswordPredicate(firstPasswordPredicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedFirstPasswordPredicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedFirstRolePredicate \u003d getMostUpdatedRolePredicate(firstRolePredicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedFirstRolePredicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(firstCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertNotEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserIdContainsKeywordsPredicate secondIdPredicate \u003d prepareUserIdContainsKeywordsPredicate(\"A1234561M\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserPasswordContainsKeywordsPredicate secondPasswordPredicate \u003d prepareUserPasswordContainsKeywordsPredicate("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                \"zaq1xsw2cde3\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserRoleContainsKeywordsPredicate secondRolePredicate \u003d prepareUserRoleContainsKeywordsPredicate(\"member\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginUserIdPasswordRoleCommand secondCommand \u003d new LoginUserIdPasswordRoleCommand(secondIdPredicate,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                secondPasswordPredicate, secondRolePredicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedSecondIdPredicate \u003d getMostUpdatedIdPredicate(secondIdPredicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedSecondIdPredicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedSecondPasswordPredicate \u003d getMostUpdatedPasswordPredicate(secondPasswordPredicate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedSecondPasswordPredicate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Predicate updatedSecondRolePredicate \u003d getMostUpdatedRolePredicate(secondRolePredicate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        expectedModel.updateFilteredLoginDetailsList(updatedSecondRolePredicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertCommandSuccess(secondCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(Arrays.asList(LOGINDETAIL1), model.getFilteredLoginDetailsList());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Predicate getMostUpdatedIdPredicate(Predicate idPredicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        searchHistoryManager.clearSearchHistory();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return searchHistoryManager.executeNewSearch(idPredicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Predicate getMostUpdatedPasswordPredicate(Predicate passwordPredicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return searchHistoryManager.executeNewSearch(passwordPredicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Predicate getMostUpdatedRolePredicate(Predicate rolePredicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return searchHistoryManager.executeNewSearch(rolePredicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses {@code userInput} into a {@code UserIdContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private UserIdContainsKeywordsPredicate prepareUserIdContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new UserIdContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses {@code userInput} into a {@code UserPasswordContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private UserPasswordContainsKeywordsPredicate prepareUserPasswordContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new UserPasswordContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Parses {@code userInput} into a {@code UserRoleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private UserRoleContainsKeywordsPredicate prepareUserRoleContainsKeywordsPredicate(String userInput) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new UserRoleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 281
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalLoginBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                         getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 3,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalLoginBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                         getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoSearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class UndoSearchCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalLoginBook(), getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalLoginBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void execute_emptySearchHistory_showFailureMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(new UndoSearchCommand(), model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                commandHistory, UndoSearchCommand.MESSAGE_FAILURE, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void execute_nonEmptySearchHistory_showSuccessMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        prepareSearchedModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(new UndoSearchCommand(), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                commandHistory, UndoSearchCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private void prepareSearchedModel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.executeSearch(new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.recordKeywords(KeywordType.IncludeNames, Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLLEVEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.logic.commands.AddSkillLevelCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.CreateAccountCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.FindPersonSubCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.FindTagSubCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.testutil.ClubBudgetElementsBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.testutil.ClubBudgetElementsUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parseCommand_login() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails loginDetails \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CreateAccountCommand command \u003d (CreateAccountCommand) parser.parseCommand(AccountUtil"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                .getCreateAccountCommand(loginDetails));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(new CreateAccountCommand(loginDetails), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parseCommand_createaccount() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails loginDetails \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        CreateAccountCommand command \u003d (CreateAccountCommand) parser.parseCommand(AccountUtil"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                                                        .getCreateAccountCommand(loginDetails));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(new CreateAccountCommand(loginDetails), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void parseCommand_find_person() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(new FindPersonSubCommand(new NameContainsKeywordsPredicate(keywords), false), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void parseCommand_find_tag() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + \"\\\\tag \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertEquals(new FindTagSubCommand(new TagContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void parseCommand_budget() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ClubBudgetElements club \u003d new ClubBudgetElementsBuilder().build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        BudgetCommand command \u003d (BudgetCommand) parser.parseCommand(ClubBudgetElementsUtil.getBudgetCommand(club));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertEquals(new BudgetCommand(club), command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public void parseCommand_addSkillLevelCommand() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        final Skill skill \u003d new Skill(\"Photography\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        final SkillLevel skillLevel \u003d new SkillLevel(5);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        AddSkillLevelCommand command \u003d (AddSkillLevelCommand) parser.parseCommand("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                AddSkillLevelCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                + PREFIX_SKILL + skill + \" \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "                + PREFIX_SKILLLEVEL + skillLevel);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertEquals(new AddSkillLevelCommand(INDEX_FIRST_PERSON, skill, skillLevel), command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "derpyplops"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 13,
      "Chocological": 20,
      "derpyplops": 18,
      "-": 141,
      "sanjukta99": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BudgetCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLUB_NAME_DESC_COMPUTING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLUB_NAME_DESC_ECE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_TURNOUT_DESC_COMPUTING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_TURNOUT_DESC_ECE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLUB_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_TURNOUT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NUMBER_OF_EVENTS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NUMBER_OF_EVENTS_DESC_COMPUTING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NUMBER_OF_EVENTS_DESC_ECE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLUB_NAME_COMPUTING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_TURNOUT_COMPUTING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMBER_OF_EVENTS_COMPUTING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.testutil.TypicalClubBudgetElements.COMPUTING_CLUB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ExpectedTurnout;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.NumberOfEvents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.testutil.ClubBudgetElementsBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class BudgetCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private BudgetCommandParser parser \u003d new BudgetCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        ClubBudgetElements expectedClub \u003d new ClubBudgetElementsBuilder(COMPUTING_CLUB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + CLUB_NAME_DESC_COMPUTING"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                + EXPECTED_TURNOUT_DESC_COMPUTING + NUMBER_OF_EVENTS_DESC_COMPUTING, new BudgetCommand(expectedClub));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // multiple  club names - last  club name accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseSuccess(parser, CLUB_NAME_DESC_ECE + CLUB_NAME_DESC_COMPUTING + EXPECTED_TURNOUT_DESC_COMPUTING"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                + NUMBER_OF_EVENTS_DESC_COMPUTING, new BudgetCommand(expectedClub));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // multiple expected turnouts  - last expected turnout accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseSuccess(parser, CLUB_NAME_DESC_COMPUTING + EXPECTED_TURNOUT_DESC_ECE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                + EXPECTED_TURNOUT_DESC_COMPUTING + NUMBER_OF_EVENTS_DESC_COMPUTING, new BudgetCommand(expectedClub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // multiple number of events - last number of events accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseSuccess(parser, CLUB_NAME_DESC_COMPUTING + EXPECTED_TURNOUT_DESC_COMPUTING"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                + NUMBER_OF_EVENTS_DESC_ECE + NUMBER_OF_EVENTS_DESC_COMPUTING, new BudgetCommand(expectedClub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // missing club name prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, VALID_CLUB_NAME_COMPUTING + EXPECTED_TURNOUT_DESC_COMPUTING"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                        + NUMBER_OF_EVENTS_DESC_COMPUTING,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // missing expected turnout prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, CLUB_NAME_DESC_COMPUTING + VALID_EXPECTED_TURNOUT_COMPUTING"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                        + NUMBER_OF_EVENTS_DESC_COMPUTING,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // missing number of events prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, CLUB_NAME_DESC_COMPUTING + EXPECTED_TURNOUT_DESC_COMPUTING"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                        + VALID_NUMBER_OF_EVENTS_COMPUTING,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, VALID_CLUB_NAME_COMPUTING + VALID_EXPECTED_TURNOUT_COMPUTING"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                        + VALID_NUMBER_OF_EVENTS_COMPUTING,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // invalid club name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, INVALID_CLUB_NAME_DESC + EXPECTED_TURNOUT_DESC_COMPUTING"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                + NUMBER_OF_EVENTS_DESC_COMPUTING, ClubName.MESSAGE_CLUB_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // invalid expected turnout"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, CLUB_NAME_DESC_COMPUTING + INVALID_EXPECTED_TURNOUT_DESC"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                + NUMBER_OF_EVENTS_DESC_COMPUTING, ExpectedTurnout.MESSAGE_EXPECTED_TURNOUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // invalid number of events"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, CLUB_NAME_DESC_COMPUTING + EXPECTED_TURNOUT_DESC_COMPUTING"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                + INVALID_NUMBER_OF_EVENTS_DESC, NumberOfEvents.MESSAGE_NUMBER_OF_EVENTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, INVALID_CLUB_NAME_DESC + INVALID_EXPECTED_TURNOUT_DESC"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                        + NUMBER_OF_EVENTS_DESC_COMPUTING,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                ClubName.MESSAGE_CLUB_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CLUB_NAME_DESC_COMPUTING"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                        + EXPECTED_TURNOUT_DESC_COMPUTING + NUMBER_OF_EVENTS_DESC_COMPUTING,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (ParseException | CommandException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (ParseException | CommandException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CreateAccountCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_ACCOUNT1_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERROLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_ACCOUNT1_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_ACCOUNT1_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.ACCOUNT1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.CreateAccountCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRole;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class CreateAccountCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private CreateAccountCommandParser parser \u003d new CreateAccountCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails expectedAccount \u003d new AccountBuilder(ACCOUNT1).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ID_ACCOUNT1_DESC"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                + PASSWORD_ACCOUNT1_DESC + ROLE_ACCOUNT1_DESC , new CreateAccountCommand(expectedAccount));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // invalid user id"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertParseFailure(parser, INVALID_USERID + PASSWORD_ACCOUNT1_DESC + ROLE_ACCOUNT1_DESC,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                UserId.MESSAGE_USERID_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertParseFailure(parser, ID_ACCOUNT1_DESC + PASSWORD_ACCOUNT1_DESC + INVALID_USERROLE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                UserRole.MESSAGE_USERROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertParseFailure(parser, INVALID_USERID + PASSWORD_ACCOUNT1_DESC + INVALID_USERROLE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                UserId.MESSAGE_USERID_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ID_ACCOUNT1_DESC + PASSWORD_ACCOUNT1_DESC"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                        + ROLE_ACCOUNT1_DESC,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.FindPersonSubCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.FindTagSubCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                new FindPersonSubCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")), false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // parsing with exclude option enabled"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand expectedFindCommand2 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                new FindPersonSubCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")), true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertParseSuccess(parser, \"\\\\exclude Alice Bob\", expectedFindCommand2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // parsing with tag option enabled"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand expectedFindCommand3 \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                new FindTagSubCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"colleagues\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertParseSuccess(parser, \"\\\\tag friends colleagues\", expectedFindCommand3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // parsing with tag and exclude options enabled"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        FindCommand expectedFindCommand4 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                new FindTagSubCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"colleagues\")), true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertParseSuccess(parser, \"\\\\tag friends colleagues\", expectedFindCommand4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void parse_noKeywords_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        //parse tags without keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertParseFailure(parser, \"\\\\tag\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        //parse with exclude option enabled without keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertParseFailure(parser, \"\\\\exclude\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        //parse tags with exclude option enabled without keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertParseFailure(parser, \"\\\\tag \\\\exclude\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 32,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginUserIdPasswordRoleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.LoginUserIdPasswordRoleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginUserIdPasswordRoleCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private LoginUserIdPasswordRoleCommandParser parser \u003d new LoginUserIdPasswordRoleCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                LoginUserIdPasswordRoleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String INVALID_USERID \u003d \"AA123456M\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String VALID_USERID \u003d \"A1234567M\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parseUserId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUserId((String) null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parseUserId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseUserId(INVALID_USERID));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parseUserId_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserId expectedUserId \u003d new UserId(VALID_USERID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(expectedUserId, ParserUtil.parseUserId(VALID_USERID));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void parseUserId_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String userIdWithWhitespace \u003d WHITESPACE + VALID_USERID + WHITESPACE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        UserId expectedUserId \u003d new UserId(VALID_USERID);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(expectedUserId, ParserUtil.parseUserId(userIdWithWhitespace));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 27,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.clubbudget.FinalClubBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        private final ObservableList\u003cClubBudgetElements\u003e clubs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        private final ObservableList\u003cFinalClubBudget\u003e clubBudgets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public ObservableList\u003cClubBudgetElements\u003e getClubsList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return clubs;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        public ObservableList\u003cFinalClubBudget\u003e getClubBudgetsList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            return clubBudgets;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "sanjukta99": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LoginBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.LOGINDETAIL5;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalLoginBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.exceptions.DuplicateAccountException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final LoginBook loginBook \u003d new LoginBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(Collections.emptyList(), loginBook.getLoginDetailsList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.resetData(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void resetData_withValidReadOnlyLoginBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook newData \u003d getTypicalLoginBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertEquals(newData, loginBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void resetData_withDuplicateAccounts_throwsDuplicateAccountException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails editedLoginDetails \u003d new AccountBuilder(LOGINDETAIL5).withUserPassword(\"1qaz2wsx3edc\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        List\u003cLoginDetails\u003e newAccounts \u003d Arrays.asList(LOGINDETAIL5, editedLoginDetails);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBookStub newData \u003d new LoginBookStub(newAccounts);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(DuplicateAccountException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.resetData(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void hasAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.hasAccount(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void hasAccount_accountNotInLoginBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(loginBook.hasAccount(LOGINDETAIL5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void hasAccount_accountInLoginBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.createAccount(LOGINDETAIL5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(loginBook.hasAccount(LOGINDETAIL5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void hasAccount_accountWithSameUserIdFieldInLoginBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.createAccount(LOGINDETAIL5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails editedLoginDetails \u003d new AccountBuilder(LOGINDETAIL5).withUserPassword(\"1qaz2wsx3edc\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(loginBook.hasAccount(editedLoginDetails));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void getAccountList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.getLoginDetailsList().remove(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static class LoginBookStub implements ReadOnlyLoginBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        private final ObservableList\u003cLoginDetails\u003e accounts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBookStub(Collection\u003cLoginDetails\u003e loginDetails) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            this.accounts.setAll(loginDetails);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public ObservableList\u003cLoginDetails\u003e getLoginDetailsList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            return accounts;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.LOGINDETAIL1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.LOGINDETAIL2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.LoginBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void hasAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        modelManager.hasAccount(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void hasAccount_accountInLoginBook_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        modelManager.createAccount(LOGINDETAIL1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(modelManager.hasAccount(LOGINDETAIL1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void getFilteredAccountList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        modelManager.getFilteredLoginDetailsList().remove(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void revertLastSearch_emptySearchHistory_throwsEmptyHistoryException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        thrown.expect(EmptyHistoryException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        modelManager.revertLastSearch();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook loginBook \u003d new LoginBookBuilder().withLoginDetails(LOGINDETAIL1)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                .withLoginDetails(LOGINDETAIL2).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook differentLoginBook \u003d new LoginBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        modelManager \u003d new ModelManager(loginBook, addressBook, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(loginBook, addressBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentLoginBook, differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        modelManager.executeSearch(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(loginBook, addressBook, userPrefs)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        modelManager.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(loginBook, addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 9,
      "Chocological": 29,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SearchHistoryManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.SearchHistoryManagerUtil.DEFAULT_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.SearchHistoryManagerUtil.getEmptySearchHistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static seedu.address.testutil.SearchHistoryManagerUtil.getFilledSearchHistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.SearchHistoryManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.exceptions.EmptyHistoryException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class SearchHistoryManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void revertLastSearch_emptySearchHistory_throwsEmptyHistoryException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        thrown.expect(EmptyHistoryException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        SearchHistoryManager\u003cPerson\u003e searchHistoryManager \u003d getEmptySearchHistoryManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        searchHistoryManager.revertLastSearch();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void clearSearchHistory_nonEmptySearchHistory_searchHistoryIsEmpty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        SearchHistoryManager\u003cPerson\u003e searchHistoryManager \u003d getFilledSearchHistoryManager(2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        searchHistoryManager.clearSearchHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(searchHistoryManager.isEmpty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void revertLastSearch_nonEmptySearchHistory_searchHistoryIsNotEmpty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        SearchHistoryManager\u003cPerson\u003e searchHistoryManager \u003d getFilledSearchHistoryManager(2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        searchHistoryManager.revertLastSearch();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(searchHistoryManager.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void executeNewSearch_emptySearchHistory_searchHistoryIsNotEmpty() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        SearchHistoryManager\u003cPerson\u003e searchHistoryManager \u003d getEmptySearchHistoryManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        searchHistoryManager.executeNewSearch(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(searchHistoryManager.isEmpty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/login/UniqueAccountListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_ACCOUNT2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.LOGINDETAIL1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.exceptions.DuplicateAccountException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class UniqueAccountListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private final UniqueAccountList uniqueAccountList \u003d new UniqueAccountList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void contains_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        uniqueAccountList.contains(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void contains_accountNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(uniqueAccountList.contains(LOGINDETAIL1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void contains_accountInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        uniqueAccountList.add(LOGINDETAIL1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(uniqueAccountList.contains(LOGINDETAIL1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void contains_accountWithSameUserIdInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        uniqueAccountList.add(LOGINDETAIL1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginDetails editedLoginDetail1 \u003d new AccountBuilder(LOGINDETAIL1).withUserPassword(VALID_PASSWORD_ACCOUNT2)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertTrue(uniqueAccountList.contains(editedLoginDetail1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void add_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        uniqueAccountList.add(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void add_duplicateAccount_throwsDuplicateAccountException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        uniqueAccountList.add(LOGINDETAIL1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(DuplicateAccountException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        uniqueAccountList.add(LOGINDETAIL1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        uniqueAccountList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TagContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Pig\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Chicken\", \"Turkey\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void test_tagsContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                                                     Collections.singletonList(\"President\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"President\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"President\", \"VIP\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"President\", \"VIP\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"President\", \"VIP\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"President\", \"VIP\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"pReSiDeNt\", \"vIP\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"President\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public void test_tagsDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"President\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Sponsor\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"President\", \"VIP\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.events.model.LoginBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlLoginBookStorage loginBookStorage \u003d new XmlLoginBookStorage(getTempFilePath(\"lb\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        storageManager \u003d new StorageManager(loginBookStorage, addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void getLoginBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertNotNull(storageManager.getLoginBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlLoginBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                                             new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        storage.handleLoginBookChangedEvent(new LoginBookChangedEvent(new LoginBook()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    class XmlLoginBookStorageExceptionThrowingStub extends XmlLoginBookStorage {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public XmlLoginBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        public void saveLoginBook(ReadOnlyLoginBook loginBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 26,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAccountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.storage.XmlAccount.MISSING_ACCOUNT_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.LOGINDETAIL2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPassword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class XmlAccountTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String INVALID_USERID \u003d \"AA234567M\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String INVALID_USERPASSWORD \u003d \"zaq1 xsw2 cde3\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String VALID_USERID \u003d LOGINDETAIL2.getUserId().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String VALID_USERPASSWORD \u003d LOGINDETAIL2.getUserPassword().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final String VALID_USERROLE \u003d LOGINDETAIL2.getUserRole().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void toModelType_invalidUserId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount account \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new XmlAccount(INVALID_USERID, VALID_USERPASSWORD, VALID_USERROLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d UserId.MESSAGE_USERID_CONSTRAINTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void toModelType_nullUserId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount account \u003d new XmlAccount(null, VALID_USERPASSWORD, VALID_USERROLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_ACCOUNT_FIELD_MESSAGE_FORMAT, UserId.class.getSimpleName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void toModelType_invalidUserPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount account \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                new XmlAccount(\"A1234567M\", INVALID_USERPASSWORD, VALID_USERROLE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d UserPassword.MESSAGE_USERPASSWORD_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void toModelType_nullUserPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlAccount account \u003d new XmlAccount(\"A1234567M\", null, VALID_USERROLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_ACCOUNT_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                UserPassword.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlLoginBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.ReadOnlyLoginBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class XmlLoginBookStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            \"XmlLoginBookStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void readLoginBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        readLoginBook(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLoginBook\u003e readLoginBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new XmlLoginBookStorage(Paths.get(filePath)).readLoginBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertFalse(readLoginBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        readLoginBook(\"NotXmlFormatLoginBook.xml\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void readLoginBook_invalidAccountLoginBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        readLoginBook(\"invalidAccountLoginBook.xml\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void readLoginBook_invalidAndValidAccountLoginBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        readLoginBook(\"invalidAndValidAccountLoginBook.xml\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void saveLoginBook_nullLoginBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        saveLoginBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Saves {@code loginBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private void saveLoginBook(ReadOnlyLoginBook loginBook, String filePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            new XmlLoginBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                    .saveLoginBook(loginBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        saveLoginBook(new LoginBook(), null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableLoginBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class XmlSerializableLoginBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableLoginBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Path INVALID_ACCOUNT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAccountsLoginBook.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public void toModelType_invalidAccountFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        XmlSerializableLoginBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ACCOUNT_FILE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                XmlSerializableLoginBook.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AccountBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserPassword;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.UserRole;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * A utility class to help with building LoginDetails objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class AccountBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String DEFAULT_USERID \u003d \"A1234567M\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String DEFAULT_USERPASSWORD \u003d \"zaq1xsw2cde3\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"member\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private UserId userId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private UserPassword userPassword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private UserRole userRole;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public AccountBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userId \u003d new UserId(DEFAULT_USERID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userPassword \u003d new UserPassword(DEFAULT_USERPASSWORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userRole \u003d new UserRole(DEFAULT_ROLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Initializes the AccountBuilder with the data of {@code LoginToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public AccountBuilder(LoginDetails loginToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userId \u003d loginToCopy.getUserId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userPassword \u003d loginToCopy.getUserPassword();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        userRole \u003d loginToCopy.getUserRole();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Sets the {@code UserId} of the {@code LoginDetails} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public AccountBuilder withUserId(String userid) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userId \u003d new UserId(userid);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Sets the {@code UserPassword} of the {@code LoginDetails} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public AccountBuilder withUserPassword(String userpassword) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userPassword \u003d new UserPassword(userpassword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Sets the {@code UserRole} of the {@code LoginDetails} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public AccountBuilder withUserRole(String userrole) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.userRole \u003d new UserRole(userrole);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginDetails build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new LoginDetails(userId, userPassword, userRole);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AccountUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.logic.commands.CreateAccountCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * A utility class for LoginDetails."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class AccountUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns an add command string for adding the {@code account}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static String getCreateAccountCommand(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return CreateAccountCommand.COMMAND_WORD + \" \" + getAccountDetails(loginDetails);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns the part of command string for the given {@code account}\u0027s details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static String getAccountDetails(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        sb.append(loginDetails.getUserId().fullUserId + \" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        sb.append(loginDetails.getUserPassword().fullUserPassword + \" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        sb.append(loginDetails.getUserRole().fullUserRole + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClubBudgetElementsBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ExpectedTurnout;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.NumberOfEvents;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * A utility class to help with building ClubBudgetElements objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class ClubBudgetElementsBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String DEFAULT_CLUB_NAME \u003d \"Computing Club\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String DEFAULT_EXPECTED_TURNOUT \u003d \"200\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final String DEFAULT_NUMBER_OF_EVENTS \u003d \"5\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private ClubName clubName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private ExpectedTurnout expectedTurnout;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private NumberOfEvents numberOfEvents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubBudgetElementsBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        clubName \u003d new ClubName(DEFAULT_CLUB_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        expectedTurnout \u003d new ExpectedTurnout(DEFAULT_EXPECTED_TURNOUT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        numberOfEvents \u003d new NumberOfEvents(DEFAULT_NUMBER_OF_EVENTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Initializes the ClubBudgetElementsBuilder with the data of {@code clubToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubBudgetElementsBuilder(ClubBudgetElements clubToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        clubName \u003d clubToCopy.getClubName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        expectedTurnout \u003d clubToCopy.getExpectedTurnout();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        numberOfEvents \u003d clubToCopy.getNumberOfEvents();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Sets the {@code ClubName} of the {@code ClubBudgetElements} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubBudgetElementsBuilder withClubName(String clubName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.clubName \u003d new ClubName(clubName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Sets the {@code ExpectedTurnout} of the {@code ClubBudgetElements} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubBudgetElementsBuilder withExpectedTurnout(String expectedTurnout) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.expectedTurnout \u003d new ExpectedTurnout(expectedTurnout);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Sets the {@code NumberOfEvents} of the {@code ClubBudgetElements} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubBudgetElementsBuilder withNumberOfEvents(String numberOfEvents) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        this.numberOfEvents \u003d new NumberOfEvents(numberOfEvents);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public ClubBudgetElements build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new ClubBudgetElements(clubName, expectedTurnout, numberOfEvents);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClubBudgetElementsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLUB_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_TURNOUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_EVENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class ClubBudgetElementsUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns a budget command string for adding the {@code club}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static String getBudgetCommand(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return BudgetCommand.COMMAND_WORD + \" \" + getClubBudgetElementsDetails(club);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns the part of command string for the given {@code club}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static String getClubBudgetElementsDetails(ClubBudgetElements club) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        sb.append(PREFIX_CLUB_NAME + club.getClubName().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        sb.append(PREFIX_EXPECTED_TURNOUT + club.getExpectedTurnout().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        sb.append(PREFIX_NUMBER_OF_EVENTS + club.getNumberOfEvents().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/KeywordsOutputUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.logic.commands.formatter.KeywordsOutputFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.KeywordsRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * A utility class to generate output string of keywords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class KeywordsOutputUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static String getOutputString (List\u003cString\u003e includedTags, List\u003cString\u003e includedNames,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                                              List\u003cString\u003e excludedTags, List\u003cString\u003e excludedNames) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        KeywordsRecord record \u003d prepareKeywordsRecord(includedNames, excludedNames, includedTags, excludedTags);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        KeywordsOutputFormatter formatter \u003d new KeywordsOutputFormatter();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return formatter.getOutputString(record);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Prepares keywordRecords according to the provided parameters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    private static KeywordsRecord prepareKeywordsRecord(List\u003cString\u003e includedNames, List\u003cString\u003e excludedNames,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "                                                        List\u003cString\u003e includedTags, List\u003cString\u003e excludedTags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        KeywordsRecord record \u003d new KeywordsRecord();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (includedNames !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            record.recordKeywords(KeywordType.IncludeNames, includedNames);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (excludedNames !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            record.recordKeywords(KeywordType.ExcludeNames, excludedNames);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (includedTags !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            record.recordKeywords(KeywordType.IncludeTags, includedTags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        if (excludedTags !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            record.recordKeywords(KeywordType.ExcludeTags, excludedTags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LoginBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * A utility class to help with building Loginbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": " *     {@code LoginBook lb \u003d new LoginBookBuilder().withLoginDetails(\"A1234567M\", \"zaq1xsw2cde3\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class LoginBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private LoginBook loginBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook \u003d new LoginBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBookBuilder(LoginBook loginBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        this.loginBook \u003d loginBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBookBuilder withLoginDetails(LoginDetails loginDetails) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        loginBook.createAccount(loginDetails);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public LoginBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return loginBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.Skill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "import seedu.address.model.person.SkillLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final String DEFAULT_SKILL \u003d \"Photography\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public static final int DEFAULT_SKILLLEVEL \u003d 20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private Skill skill;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    private SkillLevel skillLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skill \u003d new Skill(DEFAULT_SKILL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skillLevel \u003d new SkillLevel(DEFAULT_SKILLLEVEL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skill \u003d personToCopy.getSkill();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        skillLevel \u003d personToCopy.getSkillLevel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public PersonBuilder withSkill(String skill) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skill \u003d new Skill(skill);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    public PersonBuilder withSkillLevel(int skillLevel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        this.skillLevel \u003d new SkillLevel(skillLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        return new Person(name, phone, email, address, skill, skillLevel, tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 25,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SearchHistoryManagerUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "import seedu.address.model.searchhistory.SearchHistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " * A utility class for SearchHistoryManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ladderinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "public class SearchHistoryManagerUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final Predicate\u003cPerson\u003e DEFAULT_PREDICATE \u003d (t) -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static SearchHistoryManager\u003cPerson\u003e getEmptySearchHistoryManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return new SearchHistoryManager\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static SearchHistoryManager\u003cPerson\u003e getFilledSearchHistoryManager(int size) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        SearchHistoryManager\u003cPerson\u003e searchHistoryManager \u003d new SearchHistoryManager\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        for (int x \u003d 0; x \u003c size; x++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            searchHistoryManager.executeNewSearch(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return searchHistoryManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAccounts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chocological"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_ACCOUNT1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_ACCOUNT2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_ACCOUNT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_ACCOUNT2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_ACCOUNT1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_ACCOUNT2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.LoginBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chocological"
        },
        "content": " * A utility class containing a list of {@code LoginDetails} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chocological"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chocological"
        },
        "content": "public class TypicalAccounts {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final LoginDetails LOGINDETAIL1 \u003d new AccountBuilder().withUserId(\"A1234561M\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            .withUserPassword(\"zaq1xsw2cde3\").withUserRole(\"member\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final LoginDetails LOGINDETAIL2 \u003d new AccountBuilder().withUserId(\"A1234562M\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            .withUserPassword(\"1qaz2wsx3edc\").withUserRole(\"member\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final LoginDetails LOGINDETAIL3 \u003d new AccountBuilder().withUserId(\"A1234563M\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            .withUserPassword(\"1qaz2wsx3edc\").withUserRole(\"member\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final LoginDetails LOGINDETAIL4 \u003d new AccountBuilder().withUserId(\"A1234564M\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            .withUserPassword(\"zaq1xsw2cde3\").withUserRole(\"member\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final LoginDetails LOGINDETAIL5 \u003d new AccountBuilder().withUserId(\"A1234565M\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            .withUserPassword(\"zaq1xsw2cde3\").withUserRole(\"member\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final LoginDetails ACCOUNT1 \u003d new AccountBuilder().withUserId(VALID_ID_ACCOUNT1)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            .withUserPassword(VALID_PASSWORD_ACCOUNT1).withUserRole(VALID_ROLE_ACCOUNT1).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static final LoginDetails ACCOUNT2 \u003d new AccountBuilder().withUserId(VALID_ID_ACCOUNT2)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            .withUserPassword(VALID_PASSWORD_ACCOUNT2).withUserRole(VALID_ROLE_ACCOUNT2).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private TypicalAccounts() {} // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns an {@code LoginBook} with all the typical persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static LoginBook getTypicalLoginBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        LoginBook lb \u003d new LoginBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        for (LoginDetails loginDetails : getTypicalAccounts()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "            lb.createAccount(loginDetails);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return lb;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static List\u003cLoginDetails\u003e getTypicalAccounts() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LOGINDETAIL1, LOGINDETAIL2, LOGINDETAIL3, LOGINDETAIL4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chocological"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chocological": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClubBudgetElements.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLUB_NAME_COMPUTING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLUB_NAME_ECE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_TURNOUT_COMPUTING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_TURNOUT_ECE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMBER_OF_EVENTS_COMPUTING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMBER_OF_EVENTS_ECE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "import seedu.address.model.budgetelements.ClubBudgetElements;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " * A utility class containing a list of {@code ClubBudgetElements} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "public class TypicalClubBudgetElements {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final ClubBudgetElements CLUB_1 \u003d new ClubBudgetElementsBuilder().withClubName(\"Computing Club\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withExpectedTurnout(\"200\").withNumberOfEvents(\"5\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final ClubBudgetElements CLUB_2 \u003d new ClubBudgetElementsBuilder().withClubName(\"ECE Club\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withExpectedTurnout(\"300\").withNumberOfEvents(\"7\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final ClubBudgetElements CLUB_3 \u003d new ClubBudgetElementsBuilder().withClubName(\"Film Club\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withExpectedTurnout(\"150\").withNumberOfEvents(\"3\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final ClubBudgetElements CLUB_4 \u003d new ClubBudgetElementsBuilder().withClubName(\"Photography Club\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withExpectedTurnout(\"250\").withNumberOfEvents(\"2\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final ClubBudgetElements CLUB_5 \u003d new ClubBudgetElementsBuilder().withClubName(\"Dance Club\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withExpectedTurnout(\"400\").withNumberOfEvents(\"3\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    // Manually added - Club\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final ClubBudgetElements COMPUTING_CLUB \u003d new ClubBudgetElementsBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withClubName(VALID_CLUB_NAME_COMPUTING)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withExpectedTurnout(VALID_EXPECTED_TURNOUT_COMPUTING).withNumberOfEvents(VALID_NUMBER_OF_EVENTS_COMPUTING)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static final ClubBudgetElements ECE_CLUB \u003d new ClubBudgetElementsBuilder().withClubName(VALID_CLUB_NAME_ECE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            .withExpectedTurnout(VALID_EXPECTED_TURNOUT_ECE).withNumberOfEvents(VALID_NUMBER_OF_EVENTS_ECE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    private TypicalClubBudgetElements() {} // prevents instantiation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical clubs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        for (ClubBudgetElements club : getTypicalClubBudgetElements()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "            ab.addClub(club);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     * Returns a list of all typical clubs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    public static List\u003cClubBudgetElements\u003e getTypicalClubBudgetElements() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CLUB_1, CLUB_2, CLUB_3, CLUB_4, CLUB_5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sanjukta99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sanjukta99": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            .withSkill(\"Photography\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            .withSkillLevel(20).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final Person KHOR \u003d new PersonBuilder().withName(\"Khor Amy\").withPhone(\"81234567\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            .withEmail(\"ren@example.com\").withAddress(\"kampong glam\").withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final Person SEGWIT \u003d new PersonBuilder().withName(\"Segwit Choo\").withPhone(\"99939995\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            .withEmail(\"geegee@example.com\").withAddress(\"homeless\").withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static final Person JOHN \u003d new PersonBuilder().withName(\"John Choo\").withPhone(\"84823231\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            .withEmail(\"hong@example.com\").withAddress(\"china town\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * All typical persons are not Tagged"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * including those that are tagged."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static AddressBook getTypicalTaggedAddressBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        for (Person person : getTypicalPersonsWithTags()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns a list of all typical persons that are not tagged,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     * Returns a list of all typical persons that could be tagged,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersonsWithTags() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, JOHN, SEGWIT, KHOR));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 31,
      "derpyplops": 3,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            builder.append(\"\u003cskill\u003e\u003c/skill\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "            builder.append(\"\u003cskillLevel\u003e\u003c/skillLevel\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 2,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertEquals(expectedPerson.getSkill().value, actualCard.getSkill());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derpyplops"
        },
        "content": "        assertEquals(Integer.toString(expectedPerson.getSkillLevel().skillLevel), actualCard.getSkillLevel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derpyplops": 2,
      "-": 74
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        expectedModel.resetSearchHistoryToInitialState();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 2,
      "-": 296
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chocological"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        /*command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        assertSelectedCardUnchanged();*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(BENSON.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \\\\tag \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ladderinc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 6,
      "Chocological": 3,
      "-": 186
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chocological"
        },
        "content": "import seedu.address.model.login.LoginDetails;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static final Predicate\u003cLoginDetails\u003e PREDICATE_MATCHING_NO_LOGINDETAILS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ladderinc"
        },
        "content": "        model.executeSearch(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void setFilteredLoginList(Model model, List\u003cLoginDetails\u003e toDisplay) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        Optional\u003cPredicate\u003cLoginDetails\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chocological"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getLoginPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        model.updateFilteredLoginDetailsList(predicate.orElse(PREDICATE_MATCHING_NO_LOGINDETAILS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    public static void setFilteredLoginList(Model model, LoginDetails... toDisplay) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        setFilteredLoginList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chocological"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code LoginDetails} equals to {@code other}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chocological"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    private static Predicate\u003cLoginDetails\u003e getLoginPredicateMatching(LoginDetails other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chocological"
        },
        "content": "        return account -\u003e account.equals(other);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chocological"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ladderinc": 1,
      "Chocological": 24,
      "-": 38
    }
  }
]
